{"ast":null,"code":"var geometries = require('../core/geometry').geometries;\n\nvar geometryNames = require('../core/geometry').geometryNames;\n\nvar registerComponent = require('../core/component').registerComponent;\n\nvar THREE = require('../lib/three');\n\nvar dummyGeometry = new THREE.Geometry();\n/**\n * Geometry component. Combined with material component to make a mesh in 3D object.\n * Extended with registered geometries.\n */\n\nmodule.exports.Component = registerComponent('geometry', {\n  schema: {\n    buffer: {\n      default: true\n    },\n    primitive: {\n      default: 'box',\n      oneOf: geometryNames,\n      schemaChange: true\n    },\n    skipCache: {\n      default: false\n    }\n  },\n  init: function () {\n    this.geometry = null;\n  },\n\n  /**\n   * Talk to geometry system to get or create geometry.\n   */\n  update: function (previousData) {\n    var data = this.data;\n    var el = this.el;\n    var mesh;\n    var system = this.system; // Dispose old geometry if we created one.\n\n    if (this.geometry) {\n      system.unuseGeometry(previousData);\n      this.geometry = null;\n    } // Create new geometry.\n\n\n    this.geometry = system.getOrCreateGeometry(data); // Set on mesh. If mesh does not exist, create it.\n\n    mesh = el.getObject3D('mesh');\n\n    if (mesh) {\n      mesh.geometry = this.geometry;\n    } else {\n      mesh = new THREE.Mesh();\n      mesh.geometry = this.geometry;\n      el.setObject3D('mesh', mesh);\n    }\n  },\n\n  /**\n   * Tell geometry system that entity is no longer using the geometry.\n   * Unset the geometry on the mesh\n   */\n  remove: function () {\n    this.system.unuseGeometry(this.data);\n    this.el.getObject3D('mesh').geometry = dummyGeometry;\n    this.geometry = null;\n  },\n\n  /**\n   * Update geometry component schema based on geometry type.\n   */\n  updateSchema: function (data) {\n    var currentGeometryType = this.oldData && this.oldData.primitive;\n    var newGeometryType = data.primitive;\n    var schema = geometries[newGeometryType] && geometries[newGeometryType].schema; // Geometry has no schema.\n\n    if (!schema) {\n      throw new Error('Unknown geometry schema `' + newGeometryType + '`');\n    } // Nothing has changed.\n\n\n    if (currentGeometryType && currentGeometryType === newGeometryType) {\n      return;\n    }\n\n    this.extendSchema(schema);\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/geometry.js"],"names":["geometries","require","geometryNames","registerComponent","THREE","dummyGeometry","Geometry","module","exports","Component","schema","buffer","default","primitive","oneOf","schemaChange","skipCache","init","geometry","update","previousData","data","el","mesh","system","unuseGeometry","getOrCreateGeometry","getObject3D","Mesh","setObject3D","remove","updateSchema","currentGeometryType","oldData","newGeometryType","Error","extendSchema"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BD,UAA7C;;AACA,IAAIE,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAAP,CAA4BC,aAAhD;;AACA,IAAIC,iBAAiB,GAAGF,OAAO,CAAC,mBAAD,CAAP,CAA6BE,iBAArD;;AACA,IAAIC,KAAK,GAAGH,OAAO,CAAC,cAAD,CAAnB;;AAEA,IAAII,aAAa,GAAG,IAAID,KAAK,CAACE,QAAV,EAApB;AAEA;;;;;AAIAC,MAAM,CAACC,OAAP,CAAeC,SAAf,GAA2BN,iBAAiB,CAAC,UAAD,EAAa;AACvDO,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV,KADF;AAENC,IAAAA,SAAS,EAAE;AAACD,MAAAA,OAAO,EAAE,KAAV;AAAiBE,MAAAA,KAAK,EAAEZ,aAAxB;AAAuCa,MAAAA,YAAY,EAAE;AAArD,KAFL;AAGNC,IAAAA,SAAS,EAAE;AAACJ,MAAAA,OAAO,EAAE;AAAV;AAHL,GAD+C;AAOvDK,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,GAAgB,IAAhB;AACD,GATsD;;AAWvD;;;AAGAC,EAAAA,MAAM,EAAE,UAAUC,YAAV,EAAwB;AAC9B,QAAIC,IAAI,GAAG,KAAKA,IAAhB;AACA,QAAIC,EAAE,GAAG,KAAKA,EAAd;AACA,QAAIC,IAAJ;AACA,QAAIC,MAAM,GAAG,KAAKA,MAAlB,CAJ8B,CAM9B;;AACA,QAAI,KAAKN,QAAT,EAAmB;AACjBM,MAAAA,MAAM,CAACC,aAAP,CAAqBL,YAArB;AACA,WAAKF,QAAL,GAAgB,IAAhB;AACD,KAV6B,CAY9B;;;AACA,SAAKA,QAAL,GAAgBM,MAAM,CAACE,mBAAP,CAA2BL,IAA3B,CAAhB,CAb8B,CAe9B;;AACAE,IAAAA,IAAI,GAAGD,EAAE,CAACK,WAAH,CAAe,MAAf,CAAP;;AACA,QAAIJ,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACL,QAAL,GAAgB,KAAKA,QAArB;AACD,KAFD,MAEO;AACLK,MAAAA,IAAI,GAAG,IAAInB,KAAK,CAACwB,IAAV,EAAP;AACAL,MAAAA,IAAI,CAACL,QAAL,GAAgB,KAAKA,QAArB;AACAI,MAAAA,EAAE,CAACO,WAAH,CAAe,MAAf,EAAuBN,IAAvB;AACD;AACF,GAtCsD;;AAwCvD;;;;AAIAO,EAAAA,MAAM,EAAE,YAAY;AAClB,SAAKN,MAAL,CAAYC,aAAZ,CAA0B,KAAKJ,IAA/B;AACA,SAAKC,EAAL,CAAQK,WAAR,CAAoB,MAApB,EAA4BT,QAA5B,GAAuCb,aAAvC;AACA,SAAKa,QAAL,GAAgB,IAAhB;AACD,GAhDsD;;AAkDvD;;;AAGAa,EAAAA,YAAY,EAAE,UAAUV,IAAV,EAAgB;AAC5B,QAAIW,mBAAmB,GAAG,KAAKC,OAAL,IAAgB,KAAKA,OAAL,CAAapB,SAAvD;AACA,QAAIqB,eAAe,GAAGb,IAAI,CAACR,SAA3B;AACA,QAAIH,MAAM,GAAGV,UAAU,CAACkC,eAAD,CAAV,IAA+BlC,UAAU,CAACkC,eAAD,CAAV,CAA4BxB,MAAxE,CAH4B,CAK5B;;AACA,QAAI,CAACA,MAAL,EAAa;AAAE,YAAM,IAAIyB,KAAJ,CAAU,8BAA8BD,eAA9B,GAAgD,GAA1D,CAAN;AAAuE,KAN1D,CAO5B;;;AACA,QAAIF,mBAAmB,IAAIA,mBAAmB,KAAKE,eAAnD,EAAoE;AAAE;AAAS;;AAE/E,SAAKE,YAAL,CAAkB1B,MAAlB;AACD;AAhEsD,CAAb,CAA5C","sourcesContent":["var geometries = require('../core/geometry').geometries;\nvar geometryNames = require('../core/geometry').geometryNames;\nvar registerComponent = require('../core/component').registerComponent;\nvar THREE = require('../lib/three');\n\nvar dummyGeometry = new THREE.Geometry();\n\n/**\n * Geometry component. Combined with material component to make a mesh in 3D object.\n * Extended with registered geometries.\n */\nmodule.exports.Component = registerComponent('geometry', {\n  schema: {\n    buffer: {default: true},\n    primitive: {default: 'box', oneOf: geometryNames, schemaChange: true},\n    skipCache: {default: false}\n  },\n\n  init: function () {\n    this.geometry = null;\n  },\n\n  /**\n   * Talk to geometry system to get or create geometry.\n   */\n  update: function (previousData) {\n    var data = this.data;\n    var el = this.el;\n    var mesh;\n    var system = this.system;\n\n    // Dispose old geometry if we created one.\n    if (this.geometry) {\n      system.unuseGeometry(previousData);\n      this.geometry = null;\n    }\n\n    // Create new geometry.\n    this.geometry = system.getOrCreateGeometry(data);\n\n    // Set on mesh. If mesh does not exist, create it.\n    mesh = el.getObject3D('mesh');\n    if (mesh) {\n      mesh.geometry = this.geometry;\n    } else {\n      mesh = new THREE.Mesh();\n      mesh.geometry = this.geometry;\n      el.setObject3D('mesh', mesh);\n    }\n  },\n\n  /**\n   * Tell geometry system that entity is no longer using the geometry.\n   * Unset the geometry on the mesh\n   */\n  remove: function () {\n    this.system.unuseGeometry(this.data);\n    this.el.getObject3D('mesh').geometry = dummyGeometry;\n    this.geometry = null;\n  },\n\n  /**\n   * Update geometry component schema based on geometry type.\n   */\n  updateSchema: function (data) {\n    var currentGeometryType = this.oldData && this.oldData.primitive;\n    var newGeometryType = data.primitive;\n    var schema = geometries[newGeometryType] && geometries[newGeometryType].schema;\n\n    // Geometry has no schema.\n    if (!schema) { throw new Error('Unknown geometry schema `' + newGeometryType + '`'); }\n    // Nothing has changed.\n    if (currentGeometryType && currentGeometryType === newGeometryType) { return; }\n\n    this.extendSchema(schema);\n  }\n});\n"]},"metadata":{},"sourceType":"script"}