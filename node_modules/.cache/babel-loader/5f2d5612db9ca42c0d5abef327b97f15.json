{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { property } from 'lit-element';\nimport { $announceModelVisibility, $ariaLabel, $getLoaded, $getModelIsVisible, $isElementInViewport, $progressTracker, $updateSource, $userInputElement } from '../model-viewer-base.js';\nimport { $loader, CachingGLTFLoader } from '../three-components/CachingGLTFLoader.js';\nimport { ModelViewerGLTFInstance } from '../three-components/gltf-instance/ModelViewerGLTFInstance.js';\nimport { deserializeUrl, throttle } from '../utilities.js';\nimport { LoadingStatusAnnouncer } from './loading/status-announcer.js';\nexport const POSTER_TRANSITION_TIME = 300;\nexport const PROGRESS_BAR_UPDATE_THRESHOLD = 100;\nconst PROGRESS_MASK_BASE_OPACITY = 0.2;\nconst DEFAULT_DRACO_DECODER_LOCATION = 'https://www.gstatic.com/draco/versioned/decoders/1.3.5/';\nconst SPACE_KEY = 32;\nconst ENTER_KEY = 13;\nconst RevealStrategy = {\n  AUTO: 'auto',\n  INTERACTION: 'interaction'\n};\nconst PosterDismissalSource = {\n  INTERACTION: 'interaction'\n};\nconst loader = new CachingGLTFLoader(ModelViewerGLTFInstance);\nconst loadingStatusAnnouncer = new LoadingStatusAnnouncer();\nexport const $defaultProgressBarElement = Symbol('defaultProgressBarElement');\nexport const $defaultProgressMaskElement = Symbol('defaultProgressMaskElement');\nexport const $posterContainerElement = Symbol('posterContainerElement');\nexport const $defaultPosterElement = Symbol('defaultPosterElement');\nconst $posterDismissalSource = Symbol('posterDismissalSource');\nconst $modelIsReadyForReveal = Symbol('modelIsReadyForReveal');\nconst $shouldAttemptPreload = Symbol('shouldAttemptPreload');\nconst $shouldRevealModel = Symbol('shouldRevealModel');\nconst $showPoster = Symbol('showPoster');\nconst $hidePoster = Symbol('hidePoster');\nconst $modelIsRevealed = Symbol('modelIsRevealed');\nconst $preloadAttempted = Symbol('preloadAttempted');\nconst $sourceUpdated = Symbol('sourceUpdated');\nconst $updateLoadingAndVisibility = Symbol('updateLoadingAndVisibility');\nconst $updateProgressBar = Symbol('updateProgressBar');\nconst $lastReportedProgress = Symbol('lastReportedProgress');\nconst $ariaLabelCallToAction = Symbol('ariaLabelCallToAction');\nconst $clickHandler = Symbol('clickHandler');\nconst $keydownHandler = Symbol('keydownHandler');\nconst $progressHandler = Symbol('processHandler');\nconst $onClick = Symbol('onClick');\nconst $onKeydown = Symbol('onKeydown');\nconst $onProgress = Symbol('onProgress');\n/**\n * LoadingMixin implements features related to lazy loading, as well as\n * presentation details related to the pre-load / pre-render presentation of a\n * <model-viewer>\n *\n * This mixin implements support for models with DRACO-compressed meshes.\n * The DRACO decoder will be loaded on-demand if a glTF that uses the DRACO mesh\n * compression extension is encountered.\n *\n * By default, the DRACO decoder will be loaded from a Google CDN. It is\n * possible to customize where the decoder is loaded from by defining a global\n * configuration option for `<model-viewer>` like so:\n *\n * ```html\n * <script>\n * ModelViewerElement = self.ModelViewerElement || {};\n * ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration strategy must be performed *before* the\n * first `<model-viewer>` element is created in the browser. The configuration\n * can be done anywhere, but the easiest way to ensure it is done at the right\n * time is to do it in the `<head>` of the HTML document. This is the\n * recommended way to set the location because it is most compatible with\n * scenarios where the `<model-viewer>` library is lazily loaded.\n *\n * If you absolutely have to set the DRACO decoder location *after* the first\n * `<model-viewer>` element is created, you can do it this way:\n *\n * ```html\n * <script>\n * const ModelViewerElement = customElements.get('model-viewer');\n * ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration approach will not work until *after*\n * `<model-viewer>` is defined in the browser. Also note that this configuration\n * *must* be set *before* the first DRACO model is fully loaded.\n *\n * It is recommended that users who intend to take advantage of DRACO mesh\n * compression consider whether or not it is acceptable for their use case to\n * have code side-loaded from a Google CDN. If it is not acceptable, then the\n * location must be customized before loading any DRACO models in order to cause\n * the decoder to be loaded from an alternative, acceptable location.\n */\n\nexport const LoadingMixin = ModelViewerElement => {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n\n  class LoadingModelViewerElement extends ModelViewerElement {\n    constructor(...args) {\n      super(...args);\n      /**\n       * A URL pointing to the image to use as a poster in scenarios where the\n       * <model-viewer> is not ready to reveal a rendered model to the viewer.\n       */\n\n      this.poster = null;\n      /**\n       * An enumerable attribute describing under what conditions the\n       * <model-viewer> should reveal a model to the viewer.\n       *\n       * The default value is \"auto\". The only supported alternative value as\n       * of now is \"interaction\".\n       */\n\n      this.reveal = RevealStrategy.AUTO;\n      /**\n       * If true, a configured model file will be aggressively loaded, even if\n       * the <model-viewer> is only configured to reveal upon interaction.\n       */\n\n      this.preload = false;\n      this[_a] = false;\n      this[_b] = false;\n      this[_c] = false;\n      this[_d] = 0;\n      this[_e] = null; // TODO: Add this to the shadow root as part of this mixin's\n      // implementation:\n\n      this[_f] = this.shadowRoot.querySelector('.slot.poster');\n      this[_g] = this.shadowRoot.querySelector('#default-poster');\n      this[_h] = this.shadowRoot.querySelector('#default-progress-bar > .bar');\n      this[_j] = this.shadowRoot.querySelector('#default-progress-bar > .mask');\n      this[_k] = this[$defaultPosterElement].getAttribute('aria-label');\n\n      this[_l] = () => this[$onClick]();\n\n      this[_m] = event => this[$onKeydown](event);\n\n      this[_o] = event => this[$onProgress](event);\n\n      this[_p] = throttle(progress => {\n        const parentNode = this[$defaultProgressBarElement].parentNode;\n        requestAnimationFrame(() => {\n          this[$defaultProgressMaskElement].style.opacity = `${(1.0 - progress) * PROGRESS_MASK_BASE_OPACITY}`;\n          this[$defaultProgressBarElement].style.transform = `scaleX(${progress})`;\n\n          if (progress === 0) {\n            // NOTE(cdata): We remove and re-append the progress bar in this\n            // condition so that the progress bar does not appear to\n            // transition backwards from the right when we reset to 0 (or\n            // otherwise <1) progress after having already reached 1 progress\n            // previously.\n            parentNode.removeChild(this[$defaultProgressBarElement]);\n            parentNode.appendChild(this[$defaultProgressBarElement]);\n          } // NOTE(cdata): IE11 does not properly respect the second parameter\n          // of classList.toggle, which this implementation originally used.\n          // @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11865865/\n\n\n          if (progress === 1.0) {\n            this[$defaultProgressBarElement].classList.add('hide');\n          } else {\n            this[$defaultProgressBarElement].classList.remove('hide');\n          }\n        });\n      }, PROGRESS_BAR_UPDATE_THRESHOLD);\n      const ModelViewerElement = self.ModelViewerElement || {};\n      const dracoDecoderLocation = ModelViewerElement.dracoDecoderLocation || DEFAULT_DRACO_DECODER_LOCATION;\n      CachingGLTFLoader.setDRACODecoderLocation(dracoDecoderLocation);\n    }\n\n    static set dracoDecoderLocation(value) {\n      CachingGLTFLoader.setDRACODecoderLocation(value);\n    }\n\n    static get dracoDecoderLocation() {\n      return CachingGLTFLoader.getDRACODecoderLocation();\n    }\n    /**\n     * If provided, the callback will be passed each resource URL before a\n     * request is sent. The callback may return the original URL, or a new URL\n     * to override loading behavior. This behavior can be used to load assets\n     * from .ZIP files, drag-and-drop APIs, and Data URIs.\n     */\n\n\n    static mapURLs(callback) {\n      loader[$loader].manager.setURLModifier(callback);\n    }\n    /**\n     * Dismisses the poster, causing the model to load and render if\n     * necessary. This is currently effectively the same as interacting with\n     * the poster via user input.\n     */\n\n\n    dismissPoster() {\n      this[$posterDismissalSource] = PosterDismissalSource.INTERACTION;\n      this.requestUpdate();\n    }\n\n    connectedCallback() {\n      super.connectedCallback(); // Fired when a user first clicks the model element. Used to\n      // change the visibility of a poster image, or start loading\n      // a model.\n\n      this[$posterContainerElement].addEventListener('click', this[$clickHandler]);\n      this[$posterContainerElement].addEventListener('keydown', this[$keydownHandler]);\n      this[$progressTracker].addEventListener('progress', this[$progressHandler]);\n      loadingStatusAnnouncer.registerInstance(this);\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this[$posterContainerElement].removeEventListener('click', this[$clickHandler]);\n      this[$posterContainerElement].removeEventListener('keydown', this[$keydownHandler]);\n      this[$progressTracker].removeEventListener('progress', this[$progressHandler]);\n      loadingStatusAnnouncer.unregisterInstance(this);\n    }\n\n    async updated(changedProperties) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('poster') && this.poster != null) {\n        this[$defaultPosterElement].style.backgroundImage = `url(${this.poster})`;\n      }\n\n      if (changedProperties.has('src')) {\n        if (!this[$modelIsReadyForReveal]) {\n          this[$lastReportedProgress] = 0;\n        }\n\n        this[$posterDismissalSource] = null;\n        this[$preloadAttempted] = false;\n        this[$sourceUpdated] = false;\n      }\n\n      if (changedProperties.has('alt')) {\n        this[$defaultPosterElement].setAttribute('aria-label', `${this[$ariaLabel]}. ${this[$ariaLabelCallToAction]}`);\n      }\n\n      this[$updateLoadingAndVisibility]();\n    }\n\n    [(_a = $modelIsRevealed, _b = $preloadAttempted, _c = $sourceUpdated, _d = $lastReportedProgress, _e = $posterDismissalSource, _f = $posterContainerElement, _g = $defaultPosterElement, _h = $defaultProgressBarElement, _j = $defaultProgressMaskElement, _k = $ariaLabelCallToAction, _l = $clickHandler, _m = $keydownHandler, _o = $progressHandler, _p = $updateProgressBar, $onClick)]() {\n      this[$posterDismissalSource] = PosterDismissalSource.INTERACTION;\n      this.requestUpdate();\n    }\n\n    [$onKeydown](event) {\n      switch (event.keyCode) {\n        // NOTE(cdata): Links and buttons can typically be activated with\n        // both spacebar and enter to produce a synthetic click action\n        case SPACE_KEY:\n        case ENTER_KEY:\n          this[$posterDismissalSource] = PosterDismissalSource.INTERACTION;\n          break;\n\n        default:\n          break;\n      }\n\n      this.requestUpdate();\n    }\n\n    [$onProgress](event) {\n      const progress = event.detail.totalProgress;\n      this.requestUpdate();\n\n      if (progress === 1.0) {\n        this[$updateProgressBar].flush();\n      }\n\n      this[$updateProgressBar](progress);\n      this.dispatchEvent(new CustomEvent('progress', {\n        detail: {\n          totalProgress: progress\n        }\n      }));\n      this[$lastReportedProgress] = Math.max(progress, this[$lastReportedProgress]);\n    }\n\n    get [$modelIsReadyForReveal]() {\n      const src = this.src;\n      return !!src && CachingGLTFLoader.hasFinishedLoading(src) && this[$lastReportedProgress] === 1.0 && this[$shouldRevealModel];\n    }\n\n    get [$shouldRevealModel]() {\n      return this.reveal === RevealStrategy.AUTO || !!this[$posterDismissalSource];\n    }\n\n    get [$shouldAttemptPreload]() {\n      const src = this.src;\n      return !!src && (this.preload || this[$shouldRevealModel]) && this[$isElementInViewport];\n    }\n\n    async [$updateLoadingAndVisibility]() {\n      if (this[$shouldAttemptPreload] && !this[$preloadAttempted]) {\n        this[$preloadAttempted] = true;\n        const updatePreloadProgress = this[$progressTracker].beginActivity();\n\n        try {\n          const src = this.src;\n          const detail = {\n            url: src\n          };\n          await loader.preload(src, updatePreloadProgress);\n          this.dispatchEvent(new CustomEvent('preload', {\n            detail\n          }));\n        } catch (error) {\n          this.dispatchEvent(new CustomEvent('error', {\n            detail: {\n              type: 'loadfailure',\n              sourceError: error\n            }\n          }));\n        } finally {\n          updatePreloadProgress(1.0);\n          this.requestUpdate();\n        }\n      }\n\n      if (this[$modelIsReadyForReveal]) {\n        await this[$updateSource]();\n      } else {\n        this[$showPoster]();\n      }\n    }\n\n    [$showPoster]() {\n      const posterContainerElement = this[$posterContainerElement];\n      const defaultPosterElement = this[$defaultPosterElement];\n      const posterContainerOpacity = parseFloat(self.getComputedStyle(posterContainerElement).opacity);\n      defaultPosterElement.removeAttribute('tabindex');\n      defaultPosterElement.removeAttribute('aria-hidden');\n      posterContainerElement.classList.add('show');\n\n      if (posterContainerOpacity < 1.0) {\n        posterContainerElement.addEventListener('transitionend', () => {\n          const oldVisibility = this.modelIsVisible;\n          this[$modelIsRevealed] = false;\n          this[$announceModelVisibility](oldVisibility);\n        }, {\n          once: true\n        });\n      }\n    }\n\n    [$hidePoster]() {\n      const posterContainerElement = this[$posterContainerElement];\n      const defaultPosterElement = this[$defaultPosterElement];\n\n      if (posterContainerElement.classList.contains('show')) {\n        posterContainerElement.classList.remove('show'); // We might need to forward focus to our internal canvas, but that\n        // cannot happen until the poster has completely transitioned away\n\n        posterContainerElement.addEventListener('transitionend', () => {\n          const oldVisibility = this.modelIsVisible;\n          requestAnimationFrame(() => {\n            this[$modelIsRevealed] = true;\n            this[$announceModelVisibility](oldVisibility);\n            const root = this.getRootNode(); // If the <model-viewer> is still focused, forward the focus to\n            // the canvas that has just been revealed\n\n            if (root && root.activeElement === this) {\n              this[$userInputElement].focus();\n            } // Ensure that the poster is no longer focusable or visible to\n            // screen readers\n\n\n            defaultPosterElement.setAttribute('aria-hidden', 'true');\n            defaultPosterElement.tabIndex = -1;\n          });\n        }, {\n          once: true\n        });\n      }\n    }\n\n    [$getModelIsVisible]() {\n      return super[$getModelIsVisible]() && this[$modelIsRevealed];\n    }\n\n    [$getLoaded]() {\n      const src = this.src;\n      return super[$getLoaded]() || !!(src && CachingGLTFLoader.hasFinishedLoading(src));\n    }\n\n    async [$updateSource]() {\n      if (this[$modelIsReadyForReveal] && !this[$sourceUpdated]) {\n        this[$sourceUpdated] = true;\n        await super[$updateSource]();\n        this[$hidePoster]();\n      }\n    }\n\n  }\n\n  __decorate([property({\n    converter: {\n      fromAttribute: deserializeUrl\n    }\n  })], LoadingModelViewerElement.prototype, \"poster\", void 0);\n\n  __decorate([property({\n    type: String\n  })], LoadingModelViewerElement.prototype, \"reveal\", void 0);\n\n  __decorate([property({\n    type: Boolean\n  })], LoadingModelViewerElement.prototype, \"preload\", void 0);\n\n  return LoadingModelViewerElement;\n};","map":{"version":3,"sources":["../../src/features/loading.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit-element';\n\nimport ModelViewerElementBase, {$announceModelVisibility, $ariaLabel, $getLoaded, $getModelIsVisible, $isElementInViewport, $progressTracker, $updateSource, $userInputElement} from '../model-viewer-base.js';\nimport {$loader, CachingGLTFLoader} from '../three-components/CachingGLTFLoader.js';\nimport {ModelViewerGLTFInstance} from '../three-components/gltf-instance/ModelViewerGLTFInstance.js';\nimport {Constructor, deserializeUrl, throttle} from '../utilities.js';\n\nimport {LoadingStatusAnnouncer} from './loading/status-announcer.js';\n\nexport type RevealAttributeValue = 'auto'|'interaction';\ntype DismissalSource = 'interaction';\n\nexport const POSTER_TRANSITION_TIME = 300;\nexport const PROGRESS_BAR_UPDATE_THRESHOLD = 100;\nconst PROGRESS_MASK_BASE_OPACITY = 0.2;\n\nconst DEFAULT_DRACO_DECODER_LOCATION =\n    'https://www.gstatic.com/draco/versioned/decoders/1.3.5/';\n\nconst SPACE_KEY = 32;\nconst ENTER_KEY = 13;\n\nconst RevealStrategy: {[index: string]: RevealAttributeValue} = {\n  AUTO: 'auto',\n  INTERACTION: 'interaction'\n};\n\nconst PosterDismissalSource: {[index: string]: DismissalSource} = {\n  INTERACTION: 'interaction'\n};\n\nconst loader = new CachingGLTFLoader(ModelViewerGLTFInstance);\nconst loadingStatusAnnouncer = new LoadingStatusAnnouncer();\n\nexport const $defaultProgressBarElement = Symbol('defaultProgressBarElement');\nexport const $defaultProgressMaskElement = Symbol('defaultProgressMaskElement');\n\nexport const $posterContainerElement = Symbol('posterContainerElement');\nexport const $defaultPosterElement = Symbol('defaultPosterElement');\n\nconst $posterDismissalSource = Symbol('posterDismissalSource');\n\nconst $modelIsReadyForReveal = Symbol('modelIsReadyForReveal');\nconst $shouldAttemptPreload = Symbol('shouldAttemptPreload');\nconst $shouldRevealModel = Symbol('shouldRevealModel');\nconst $showPoster = Symbol('showPoster');\nconst $hidePoster = Symbol('hidePoster');\nconst $modelIsRevealed = Symbol('modelIsRevealed');\nconst $preloadAttempted = Symbol('preloadAttempted');\nconst $sourceUpdated = Symbol('sourceUpdated');\n\nconst $updateLoadingAndVisibility = Symbol('updateLoadingAndVisibility');\n\nconst $updateProgressBar = Symbol('updateProgressBar');\nconst $lastReportedProgress = Symbol('lastReportedProgress');\n\nconst $ariaLabelCallToAction = Symbol('ariaLabelCallToAction');\n\nconst $clickHandler = Symbol('clickHandler');\nconst $keydownHandler = Symbol('keydownHandler');\nconst $progressHandler = Symbol('processHandler');\nconst $onClick = Symbol('onClick');\nconst $onKeydown = Symbol('onKeydown');\nconst $onProgress = Symbol('onProgress');\n\nexport declare interface LoadingInterface {\n  poster: string|null;\n  reveal: RevealAttributeValue;\n  preload: boolean;\n  readonly loaded: boolean;\n  readonly modelIsVisible: boolean;\n  dismissPoster(): void;\n}\n\nexport declare interface LoadingStaticInterface {\n  dracoDecoderLocation: string;\n  mapURLs(callback: (url: string) => string): void;\n}\n\ninterface ModelViewerGlobalConfig {\n  dracoDecoderLocation?: string;\n}\n\n/**\n * LoadingMixin implements features related to lazy loading, as well as\n * presentation details related to the pre-load / pre-render presentation of a\n * <model-viewer>\n *\n * This mixin implements support for models with DRACO-compressed meshes.\n * The DRACO decoder will be loaded on-demand if a glTF that uses the DRACO mesh\n * compression extension is encountered.\n *\n * By default, the DRACO decoder will be loaded from a Google CDN. It is\n * possible to customize where the decoder is loaded from by defining a global\n * configuration option for `<model-viewer>` like so:\n *\n * ```html\n * <script>\n * ModelViewerElement = self.ModelViewerElement || {};\n * ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration strategy must be performed *before* the\n * first `<model-viewer>` element is created in the browser. The configuration\n * can be done anywhere, but the easiest way to ensure it is done at the right\n * time is to do it in the `<head>` of the HTML document. This is the\n * recommended way to set the location because it is most compatible with\n * scenarios where the `<model-viewer>` library is lazily loaded.\n *\n * If you absolutely have to set the DRACO decoder location *after* the first\n * `<model-viewer>` element is created, you can do it this way:\n *\n * ```html\n * <script>\n * const ModelViewerElement = customElements.get('model-viewer');\n * ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration approach will not work until *after*\n * `<model-viewer>` is defined in the browser. Also note that this configuration\n * *must* be set *before* the first DRACO model is fully loaded.\n *\n * It is recommended that users who intend to take advantage of DRACO mesh\n * compression consider whether or not it is acceptable for their use case to\n * have code side-loaded from a Google CDN. If it is not acceptable, then the\n * location must be customized before loading any DRACO models in order to cause\n * the decoder to be loaded from an alternative, acceptable location.\n */\nexport const LoadingMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement:\n        T): Constructor<LoadingInterface, LoadingStaticInterface>&T => {\n  class LoadingModelViewerElement extends ModelViewerElement {\n    static set dracoDecoderLocation(value: string) {\n      CachingGLTFLoader.setDRACODecoderLocation(value);\n    }\n\n    static get dracoDecoderLocation() {\n      return CachingGLTFLoader.getDRACODecoderLocation();\n    }\n\n    /**\n     * If provided, the callback will be passed each resource URL before a\n     * request is sent. The callback may return the original URL, or a new URL\n     * to override loading behavior. This behavior can be used to load assets\n     * from .ZIP files, drag-and-drop APIs, and Data URIs.\n     */\n    static mapURLs(callback: (url: string) => string) {\n      loader[$loader].manager.setURLModifier(callback);\n    }\n\n    /**\n     * A URL pointing to the image to use as a poster in scenarios where the\n     * <model-viewer> is not ready to reveal a rendered model to the viewer.\n     */\n    @property({converter: {fromAttribute: deserializeUrl}})\n    poster: string|null = null;\n\n    /**\n     * An enumerable attribute describing under what conditions the\n     * <model-viewer> should reveal a model to the viewer.\n     *\n     * The default value is \"auto\". The only supported alternative value as\n     * of now is \"interaction\".\n     */\n    @property({type: String})\n    reveal: RevealAttributeValue = RevealStrategy.AUTO;\n\n    /**\n     * If true, a configured model file will be aggressively loaded, even if\n     * the <model-viewer> is only configured to reveal upon interaction.\n     */\n    @property({type: Boolean}) preload: boolean = false;\n\n    /**\n     * Dismisses the poster, causing the model to load and render if\n     * necessary. This is currently effectively the same as interacting with\n     * the poster via user input.\n     */\n    dismissPoster() {\n      this[$posterDismissalSource] = PosterDismissalSource.INTERACTION;\n      this.requestUpdate();\n    }\n\n    protected[$modelIsRevealed] = false;\n    protected[$preloadAttempted] = false;\n    protected[$sourceUpdated] = false;\n\n    protected[$lastReportedProgress]: number = 0;\n\n    protected[$posterDismissalSource]: DismissalSource|null = null;\n\n    // TODO: Add this to the shadow root as part of this mixin's\n    // implementation:\n    protected[$posterContainerElement]: HTMLElement =\n        this.shadowRoot!.querySelector('.slot.poster') as HTMLElement;\n\n    protected[$defaultPosterElement]: HTMLElement =\n        this.shadowRoot!.querySelector('#default-poster') as HTMLElement;\n\n    protected[$defaultProgressBarElement]: HTMLElement =\n        this.shadowRoot!.querySelector('#default-progress-bar > .bar') as\n        HTMLElement;\n\n    protected[$defaultProgressMaskElement]: HTMLElement =\n        this.shadowRoot!.querySelector('#default-progress-bar > .mask') as\n        HTMLElement;\n\n    protected[$ariaLabelCallToAction] =\n        this[$defaultPosterElement].getAttribute('aria-label');\n\n    protected[$clickHandler]: () => void = () => this[$onClick]();\n    protected[$keydownHandler]:\n        (event: KeyboardEvent) => void = (event) => this[$onKeydown](event);\n    protected[$progressHandler]:\n        (event: Event) => void = (event) => this[$onProgress](event);\n\n    protected[$updateProgressBar] = throttle((progress: number) => {\n      const parentNode = this[$defaultProgressBarElement].parentNode as Element;\n\n      requestAnimationFrame(() => {\n        this[$defaultProgressMaskElement].style.opacity =\n            `${(1.0 - progress) * PROGRESS_MASK_BASE_OPACITY}`;\n\n        this[$defaultProgressBarElement].style.transform =\n            `scaleX(${progress})`;\n\n        if (progress === 0) {\n          // NOTE(cdata): We remove and re-append the progress bar in this\n          // condition so that the progress bar does not appear to\n          // transition backwards from the right when we reset to 0 (or\n          // otherwise <1) progress after having already reached 1 progress\n          // previously.\n          parentNode.removeChild(this[$defaultProgressBarElement]);\n          parentNode.appendChild(this[$defaultProgressBarElement]);\n        }\n\n        // NOTE(cdata): IE11 does not properly respect the second parameter\n        // of classList.toggle, which this implementation originally used.\n        // @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11865865/\n        if (progress === 1.0) {\n          this[$defaultProgressBarElement].classList.add('hide');\n        } else {\n          this[$defaultProgressBarElement].classList.remove('hide');\n        }\n      });\n    }, PROGRESS_BAR_UPDATE_THRESHOLD);\n\n    constructor(...args: Array<any>) {\n      super(...args);\n\n      const ModelViewerElement: ModelViewerGlobalConfig =\n          (self as any).ModelViewerElement || {};\n      const dracoDecoderLocation = ModelViewerElement.dracoDecoderLocation ||\n          DEFAULT_DRACO_DECODER_LOCATION;\n\n      CachingGLTFLoader.setDRACODecoderLocation(dracoDecoderLocation);\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n\n      // Fired when a user first clicks the model element. Used to\n      // change the visibility of a poster image, or start loading\n      // a model.\n      this[$posterContainerElement].addEventListener(\n          'click', this[$clickHandler]);\n      this[$posterContainerElement].addEventListener(\n          'keydown', this[$keydownHandler]);\n      this[$progressTracker].addEventListener(\n          'progress', this[$progressHandler]);\n\n      loadingStatusAnnouncer.registerInstance(this);\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      this[$posterContainerElement].removeEventListener(\n          'click', this[$clickHandler]);\n      this[$posterContainerElement].removeEventListener(\n          'keydown', this[$keydownHandler]);\n      this[$progressTracker].removeEventListener(\n          'progress', this[$progressHandler]);\n\n      loadingStatusAnnouncer.unregisterInstance(this)\n    }\n\n    async updated(changedProperties: Map<string, any>) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('poster') && this.poster != null) {\n        this[$defaultPosterElement].style.backgroundImage =\n            `url(${this.poster})`;\n      }\n\n      if (changedProperties.has('src')) {\n        if (!this[$modelIsReadyForReveal]) {\n          this[$lastReportedProgress] = 0;\n        }\n\n        this[$posterDismissalSource] = null;\n        this[$preloadAttempted] = false;\n        this[$sourceUpdated] = false;\n      }\n\n      if (changedProperties.has('alt')) {\n        this[$defaultPosterElement].setAttribute(\n            'aria-label',\n            `${this[$ariaLabel]}. ${this[$ariaLabelCallToAction]}`);\n      }\n\n      this[$updateLoadingAndVisibility]()\n    }\n\n    [$onClick]() {\n      this[$posterDismissalSource] = PosterDismissalSource.INTERACTION;\n      this.requestUpdate();\n    }\n\n    [$onKeydown](event: KeyboardEvent) {\n      switch (event.keyCode) {\n        // NOTE(cdata): Links and buttons can typically be activated with\n        // both spacebar and enter to produce a synthetic click action\n        case SPACE_KEY:\n        case ENTER_KEY:\n          this[$posterDismissalSource] = PosterDismissalSource.INTERACTION;\n          break;\n        default:\n          break;\n      }\n\n      this.requestUpdate();\n    }\n\n    [$onProgress](event: Event) {\n      const progress = (event as any).detail.totalProgress;\n\n      this.requestUpdate();\n\n      if (progress === 1.0) {\n        this[$updateProgressBar].flush();\n      }\n\n      this[$updateProgressBar](progress);\n\n      this.dispatchEvent(\n          new CustomEvent('progress', {detail: {totalProgress: progress}}));\n\n      this[$lastReportedProgress] =\n          Math.max(progress, this[$lastReportedProgress]);\n    }\n\n    get[$modelIsReadyForReveal](): boolean {\n      const {src} = this;\n\n      return !!src && CachingGLTFLoader.hasFinishedLoading(src) &&\n          this[$lastReportedProgress] === 1.0 && this[$shouldRevealModel]\n    }\n\n    get[$shouldRevealModel](): boolean {\n      return this.reveal === RevealStrategy.AUTO ||\n          !!this[$posterDismissalSource];\n    }\n\n    get[$shouldAttemptPreload](): boolean {\n      const {src} = this;\n\n      return !!src && (this.preload || this[$shouldRevealModel]) &&\n          this[$isElementInViewport];\n    }\n\n    async[$updateLoadingAndVisibility]() {\n      if (this[$shouldAttemptPreload] && !this[$preloadAttempted]) {\n        this[$preloadAttempted] = true;\n\n        const updatePreloadProgress = this[$progressTracker].beginActivity();\n\n        try {\n          const src = this.src!;\n          const detail = {url: src};\n\n          await loader.preload(src, updatePreloadProgress);\n          this.dispatchEvent(new CustomEvent('preload', {detail}));\n        } catch (error) {\n          this.dispatchEvent(new CustomEvent(\n              'error', {detail: {type: 'loadfailure', sourceError: error}}));\n        } finally {\n          updatePreloadProgress(1.0);\n          this.requestUpdate();\n        }\n      }\n\n      if (this[$modelIsReadyForReveal]) {\n        await this[$updateSource]();\n      } else {\n        this[$showPoster]();\n      }\n    }\n\n    [$showPoster]() {\n      const posterContainerElement = this[$posterContainerElement];\n      const defaultPosterElement = this[$defaultPosterElement];\n      const posterContainerOpacity =\n          parseFloat(self.getComputedStyle(posterContainerElement).opacity!);\n\n      defaultPosterElement.removeAttribute('tabindex');\n      defaultPosterElement.removeAttribute('aria-hidden');\n      posterContainerElement.classList.add('show');\n\n      if (posterContainerOpacity < 1.0) {\n        posterContainerElement.addEventListener('transitionend', () => {\n          const oldVisibility = this.modelIsVisible;\n          this[$modelIsRevealed] = false;\n          this[$announceModelVisibility](oldVisibility);\n        }, {once: true});\n      }\n    }\n\n    [$hidePoster]() {\n      const posterContainerElement = this[$posterContainerElement];\n      const defaultPosterElement = this[$defaultPosterElement];\n\n      if (posterContainerElement.classList.contains('show')) {\n        posterContainerElement.classList.remove('show');\n\n        // We might need to forward focus to our internal canvas, but that\n        // cannot happen until the poster has completely transitioned away\n        posterContainerElement.addEventListener('transitionend', () => {\n          const oldVisibility = this.modelIsVisible;\n          requestAnimationFrame(() => {\n            this[$modelIsRevealed] = true;\n            this[$announceModelVisibility](oldVisibility);\n\n            const root = this.getRootNode();\n\n            // If the <model-viewer> is still focused, forward the focus to\n            // the canvas that has just been revealed\n            if (root &&\n                (root as Document | ShadowRoot).activeElement === this) {\n              this[$userInputElement].focus();\n            }\n\n            // Ensure that the poster is no longer focusable or visible to\n            // screen readers\n            defaultPosterElement.setAttribute('aria-hidden', 'true');\n            defaultPosterElement.tabIndex = -1;\n          });\n        }, {once: true});\n      }\n    }\n\n    [$getModelIsVisible]() {\n      return super[$getModelIsVisible]() && this[$modelIsRevealed];\n    }\n\n    [$getLoaded]() {\n      const src = this.src;\n      return super[$getLoaded]() ||\n          !!(src && CachingGLTFLoader.hasFinishedLoading(src));\n    }\n\n    async[$updateSource]() {\n      if (this[$modelIsReadyForReveal] && !this[$sourceUpdated]) {\n        this[$sourceUpdated] = true;\n        await super[$updateSource]();\n        this[$hidePoster]();\n      }\n    }\n  }\n\n  return LoadingModelViewerElement;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}