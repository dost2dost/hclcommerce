{"ast":null,"code":"var registerComponent = require('../core/component').registerComponent;\n\nvar debug = require('../utils/debug');\n\nvar THREE = require('../lib/three');\n\nvar warn = debug('components:sound:warn');\n/**\n * Sound component.\n */\n\nmodule.exports.Component = registerComponent('sound', {\n  schema: {\n    autoplay: {\n      default: false\n    },\n    distanceModel: {\n      default: 'inverse',\n      oneOf: ['linear', 'inverse', 'exponential']\n    },\n    loop: {\n      default: false\n    },\n    maxDistance: {\n      default: 10000\n    },\n    on: {\n      default: ''\n    },\n    poolSize: {\n      default: 1\n    },\n    positional: {\n      default: true\n    },\n    refDistance: {\n      default: 1\n    },\n    rolloffFactor: {\n      default: 1\n    },\n    src: {\n      type: 'audio'\n    },\n    volume: {\n      default: 1\n    }\n  },\n  multiple: true,\n  init: function () {\n    var self = this;\n    this.listener = null;\n    this.audioLoader = new THREE.AudioLoader();\n    this.pool = new THREE.Group();\n    this.loaded = false;\n    this.mustPlay = false; // Don't pass evt because playSound takes a function as parameter.\n\n    this.playSoundBound = function () {\n      self.playSound();\n    };\n  },\n  update: function (oldData) {\n    var data = this.data;\n    var i;\n    var sound;\n    var srcChanged = data.src !== oldData.src; // Create new sound if not yet created or changing `src`.\n\n    if (srcChanged) {\n      if (!data.src) {\n        return;\n      }\n\n      this.setupSound();\n    }\n\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n\n      if (data.positional) {\n        sound.setDistanceModel(data.distanceModel);\n        sound.setMaxDistance(data.maxDistance);\n        sound.setRefDistance(data.refDistance);\n        sound.setRolloffFactor(data.rolloffFactor);\n      }\n\n      sound.setLoop(data.loop);\n      sound.setVolume(data.volume);\n      sound.isPaused = false;\n    }\n\n    if (data.on !== oldData.on) {\n      this.updateEventListener(oldData.on);\n    } // All sound values set. Load in `src`.\n\n\n    if (srcChanged) {\n      var self = this;\n      this.loaded = false;\n      this.audioLoader.load(data.src, function (buffer) {\n        for (i = 0; i < self.pool.children.length; i++) {\n          sound = self.pool.children[i];\n          sound.setBuffer(buffer);\n        }\n\n        self.loaded = true; // Remove this key from cache, otherwise we can't play it again\n\n        THREE.Cache.remove(data.src);\n\n        if (self.data.autoplay || self.mustPlay) {\n          self.playSound();\n        }\n\n        self.el.emit('sound-loaded', self.evtDetail, false);\n      });\n    }\n  },\n  pause: function () {\n    this.stopSound();\n    this.removeEventListener();\n  },\n  play: function () {\n    if (this.data.autoplay) {\n      this.playSound();\n    }\n\n    this.updateEventListener();\n  },\n  remove: function () {\n    var i;\n    var sound;\n    this.removeEventListener();\n\n    if (this.el.getObject3D(this.attrName)) {\n      this.el.removeObject3D(this.attrName);\n    }\n\n    try {\n      for (i = 0; i < this.pool.children.length; i++) {\n        sound = this.pool.children[i];\n        sound.disconnect();\n      }\n    } catch (e) {\n      // disconnect() will throw if it was never connected initially.\n      warn('Audio source not properly disconnected');\n    }\n  },\n\n  /**\n  *  Update listener attached to the user defined on event.\n  */\n  updateEventListener: function (oldEvt) {\n    var el = this.el;\n\n    if (oldEvt) {\n      el.removeEventListener(oldEvt, this.playSoundBound);\n    }\n\n    el.addEventListener(this.data.on, this.playSoundBound);\n  },\n  removeEventListener: function () {\n    this.el.removeEventListener(this.data.on, this.playSoundBound);\n  },\n\n  /**\n   * Removes current sound object, creates new sound object, adds to entity.\n   *\n   * @returns {object} sound\n   */\n  setupSound: function () {\n    var el = this.el;\n    var i;\n    var sceneEl = el.sceneEl;\n    var self = this;\n    var sound;\n\n    if (this.pool.children.length > 0) {\n      this.stopSound();\n      el.removeObject3D('sound');\n    } // Only want one AudioListener. Cache it on the scene.\n\n\n    var listener = this.listener = sceneEl.audioListener || new THREE.AudioListener();\n    sceneEl.audioListener = listener;\n\n    if (sceneEl.camera) {\n      sceneEl.camera.add(listener);\n    } // Wait for camera if necessary.\n\n\n    sceneEl.addEventListener('camera-set-active', function (evt) {\n      evt.detail.cameraEl.getObject3D('camera').add(listener);\n    }); // Create [poolSize] audio instances and attach them to pool\n\n    this.pool = new THREE.Group();\n\n    for (i = 0; i < this.data.poolSize; i++) {\n      sound = this.data.positional ? new THREE.PositionalAudio(listener) : new THREE.Audio(listener);\n      this.pool.add(sound);\n    }\n\n    el.setObject3D(this.attrName, this.pool);\n\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n\n      sound.onEnded = function () {\n        this.isPlaying = false;\n        self.el.emit('sound-ended', self.evtDetail, false);\n      };\n    }\n  },\n\n  /**\n   * Pause all the sounds in the pool.\n   */\n  pauseSound: function () {\n    var i;\n    var sound;\n    this.isPlaying = false;\n\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n\n      if (!sound.source || !sound.source.buffer || !sound.isPlaying || sound.isPaused) {\n        continue;\n      }\n\n      sound.isPaused = true;\n      sound.pause();\n    }\n  },\n\n  /**\n   * Look for an unused sound in the pool and play it if found.\n   */\n  playSound: function (processSound) {\n    var found;\n    var i;\n    var sound;\n\n    if (!this.loaded) {\n      warn('Sound not loaded yet. It will be played once it finished loading');\n      this.mustPlay = true;\n      return;\n    }\n\n    found = false;\n    this.isPlaying = true;\n\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n\n      if (!sound.isPlaying && sound.buffer && !found) {\n        if (processSound) {\n          processSound(sound);\n        }\n\n        sound.play();\n        sound.isPaused = false;\n        found = true;\n        continue;\n      }\n    }\n\n    if (!found) {\n      warn('All the sounds are playing. If you need to play more sounds simultaneously ' + 'consider increasing the size of pool with the `poolSize` attribute.', this.el);\n      return;\n    }\n\n    this.mustPlay = false;\n  },\n\n  /**\n   * Stop all the sounds in the pool.\n   */\n  stopSound: function () {\n    var i;\n    var sound;\n    this.isPlaying = false;\n\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n\n      if (!sound.source || !sound.source.buffer) {\n        return;\n      }\n\n      sound.stop();\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/sound.js"],"names":["registerComponent","require","debug","THREE","warn","module","exports","Component","schema","autoplay","default","distanceModel","oneOf","loop","maxDistance","on","poolSize","positional","refDistance","rolloffFactor","src","type","volume","multiple","init","self","listener","audioLoader","AudioLoader","pool","Group","loaded","mustPlay","playSoundBound","playSound","update","oldData","data","i","sound","srcChanged","setupSound","children","length","setDistanceModel","setMaxDistance","setRefDistance","setRolloffFactor","setLoop","setVolume","isPaused","updateEventListener","load","buffer","setBuffer","Cache","remove","el","emit","evtDetail","pause","stopSound","removeEventListener","play","getObject3D","attrName","removeObject3D","disconnect","e","oldEvt","addEventListener","sceneEl","audioListener","AudioListener","camera","add","evt","detail","cameraEl","PositionalAudio","Audio","setObject3D","onEnded","isPlaying","pauseSound","source","processSound","found","stop"],"mappings":"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","sourcesContent":["var registerComponent = require('../core/component').registerComponent;\nvar debug = require('../utils/debug');\nvar THREE = require('../lib/three');\n\nvar warn = debug('components:sound:warn');\n\n/**\n * Sound component.\n */\nmodule.exports.Component = registerComponent('sound', {\n  schema: {\n    autoplay: {default: false},\n    distanceModel: {default: 'inverse', oneOf: ['linear', 'inverse', 'exponential']},\n    loop: {default: false},\n    maxDistance: {default: 10000},\n    on: {default: ''},\n    poolSize: {default: 1},\n    positional: {default: true},\n    refDistance: {default: 1},\n    rolloffFactor: {default: 1},\n    src: {type: 'audio'},\n    volume: {default: 1}\n  },\n\n  multiple: true,\n\n  init: function () {\n    var self = this;\n\n    this.listener = null;\n    this.audioLoader = new THREE.AudioLoader();\n    this.pool = new THREE.Group();\n    this.loaded = false;\n    this.mustPlay = false;\n\n    // Don't pass evt because playSound takes a function as parameter.\n    this.playSoundBound = function () { self.playSound(); };\n  },\n\n  update: function (oldData) {\n    var data = this.data;\n    var i;\n    var sound;\n    var srcChanged = data.src !== oldData.src;\n\n    // Create new sound if not yet created or changing `src`.\n    if (srcChanged) {\n      if (!data.src) { return; }\n      this.setupSound();\n    }\n\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n      if (data.positional) {\n        sound.setDistanceModel(data.distanceModel);\n        sound.setMaxDistance(data.maxDistance);\n        sound.setRefDistance(data.refDistance);\n        sound.setRolloffFactor(data.rolloffFactor);\n      }\n      sound.setLoop(data.loop);\n      sound.setVolume(data.volume);\n      sound.isPaused = false;\n    }\n\n    if (data.on !== oldData.on) {\n      this.updateEventListener(oldData.on);\n    }\n\n    // All sound values set. Load in `src`.\n    if (srcChanged) {\n      var self = this;\n\n      this.loaded = false;\n      this.audioLoader.load(data.src, function (buffer) {\n        for (i = 0; i < self.pool.children.length; i++) {\n          sound = self.pool.children[i];\n          sound.setBuffer(buffer);\n        }\n        self.loaded = true;\n\n        // Remove this key from cache, otherwise we can't play it again\n        THREE.Cache.remove(data.src);\n        if (self.data.autoplay || self.mustPlay) { self.playSound(); }\n        self.el.emit('sound-loaded', self.evtDetail, false);\n      });\n    }\n  },\n\n  pause: function () {\n    this.stopSound();\n    this.removeEventListener();\n  },\n\n  play: function () {\n    if (this.data.autoplay) { this.playSound(); }\n    this.updateEventListener();\n  },\n\n  remove: function () {\n    var i;\n    var sound;\n\n    this.removeEventListener();\n\n    if (this.el.getObject3D(this.attrName)) {\n      this.el.removeObject3D(this.attrName);\n    }\n\n    try {\n      for (i = 0; i < this.pool.children.length; i++) {\n        sound = this.pool.children[i];\n        sound.disconnect();\n      }\n    } catch (e) {\n      // disconnect() will throw if it was never connected initially.\n      warn('Audio source not properly disconnected');\n    }\n  },\n\n  /**\n  *  Update listener attached to the user defined on event.\n  */\n  updateEventListener: function (oldEvt) {\n    var el = this.el;\n    if (oldEvt) { el.removeEventListener(oldEvt, this.playSoundBound); }\n    el.addEventListener(this.data.on, this.playSoundBound);\n  },\n\n  removeEventListener: function () {\n    this.el.removeEventListener(this.data.on, this.playSoundBound);\n  },\n\n  /**\n   * Removes current sound object, creates new sound object, adds to entity.\n   *\n   * @returns {object} sound\n   */\n  setupSound: function () {\n    var el = this.el;\n    var i;\n    var sceneEl = el.sceneEl;\n    var self = this;\n    var sound;\n\n    if (this.pool.children.length > 0) {\n      this.stopSound();\n      el.removeObject3D('sound');\n    }\n\n    // Only want one AudioListener. Cache it on the scene.\n    var listener = this.listener = sceneEl.audioListener || new THREE.AudioListener();\n    sceneEl.audioListener = listener;\n\n    if (sceneEl.camera) {\n      sceneEl.camera.add(listener);\n    }\n\n    // Wait for camera if necessary.\n    sceneEl.addEventListener('camera-set-active', function (evt) {\n      evt.detail.cameraEl.getObject3D('camera').add(listener);\n    });\n\n    // Create [poolSize] audio instances and attach them to pool\n    this.pool = new THREE.Group();\n    for (i = 0; i < this.data.poolSize; i++) {\n      sound = this.data.positional\n        ? new THREE.PositionalAudio(listener)\n        : new THREE.Audio(listener);\n      this.pool.add(sound);\n    }\n    el.setObject3D(this.attrName, this.pool);\n\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n      sound.onEnded = function () {\n        this.isPlaying = false;\n        self.el.emit('sound-ended', self.evtDetail, false);\n      };\n    }\n  },\n\n  /**\n   * Pause all the sounds in the pool.\n   */\n  pauseSound: function () {\n    var i;\n    var sound;\n\n    this.isPlaying = false;\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n      if (!sound.source || !sound.source.buffer || !sound.isPlaying || sound.isPaused) {\n        continue;\n      }\n      sound.isPaused = true;\n      sound.pause();\n    }\n  },\n\n  /**\n   * Look for an unused sound in the pool and play it if found.\n   */\n  playSound: function (processSound) {\n    var found;\n    var i;\n    var sound;\n\n    if (!this.loaded) {\n      warn('Sound not loaded yet. It will be played once it finished loading');\n      this.mustPlay = true;\n      return;\n    }\n\n    found = false;\n    this.isPlaying = true;\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n      if (!sound.isPlaying && sound.buffer && !found) {\n        if (processSound) { processSound(sound); }\n        sound.play();\n        sound.isPaused = false;\n        found = true;\n        continue;\n      }\n    }\n\n    if (!found) {\n      warn('All the sounds are playing. If you need to play more sounds simultaneously ' +\n           'consider increasing the size of pool with the `poolSize` attribute.', this.el);\n      return;\n    }\n\n    this.mustPlay = false;\n  },\n\n  /**\n   * Stop all the sounds in the pool.\n   */\n  stopSound: function () {\n    var i;\n    var sound;\n    this.isPlaying = false;\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n      if (!sound.source || !sound.source.buffer) { return; }\n      sound.stop();\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}