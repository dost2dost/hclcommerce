{"ast":null,"code":"var controllerUtils = require('../utils/tracked-controls');\n\nvar registerComponent = require('../core/component').registerComponent;\n\nvar EVENTS = {\n  AXISMOVE: 'axismove',\n  BUTTONCHANGED: 'buttonchanged',\n  BUTTONDOWN: 'buttondown',\n  BUTTONUP: 'buttonup',\n  TOUCHSTART: 'touchstart',\n  TOUCHEND: 'touchend'\n};\nmodule.exports.Component = registerComponent('tracked-controls-webxr', {\n  schema: {\n    id: {\n      type: 'string',\n      default: ''\n    },\n    hand: {\n      type: 'string',\n      default: ''\n    },\n    index: {\n      type: 'int',\n      default: -1\n    },\n    iterateControllerProfiles: {\n      default: false\n    }\n  },\n  init: function () {\n    this.addSessionEventListeners = this.addSessionEventListeners.bind(this);\n    this.updateController = this.updateController.bind(this);\n    this.emitButtonUpEvent = this.emitButtonUpEvent.bind(this);\n    this.emitButtonDownEvent = this.emitButtonDownEvent.bind(this);\n    this.selectEventDetails = {\n      id: 'trigger',\n      state: {\n        pressed: false\n      }\n    };\n    this.buttonEventDetails = {};\n    this.buttonStates = this.el.components['tracked-controls'].buttonStates = {};\n    this.axis = this.el.components['tracked-controls'].axis = [0, 0, 0];\n    this.changedAxes = [];\n    this.axisMoveEventDetail = {\n      axis: this.axis,\n      changed: this.changedAxes\n    };\n  },\n  play: function () {\n    var sceneEl = this.el.sceneEl;\n    this.updateController();\n    this.addSessionEventListeners();\n    sceneEl.addEventListener('enter-vr', this.addSessionEventListeners);\n    sceneEl.addEventListener('controllersupdated', this.updateController);\n  },\n  pause: function () {\n    var sceneEl = this.el.sceneEl;\n    this.removeSessionEventListeners();\n    sceneEl.removeEventListener('enter-vr', this.addSessionEventListeners);\n    sceneEl.removeEventListener('controllersupdated', this.updateController);\n  },\n  addSessionEventListeners: function () {\n    var sceneEl = this.el.sceneEl;\n\n    if (!sceneEl.xrSession) {\n      return;\n    }\n\n    sceneEl.xrSession.addEventListener('selectstart', this.emitButtonDownEvent);\n    sceneEl.xrSession.addEventListener('selectend', this.emitButtonUpEvent);\n  },\n  removeSessionEventListeners: function () {\n    var sceneEl = this.el.sceneEl;\n\n    if (!sceneEl.xrSession) {\n      return;\n    }\n\n    sceneEl.xrSession.addEventListener('selectstart', this.emitButtonDownEvent);\n    sceneEl.xrSession.addEventListener('selectend', this.emitButtonUpEvent);\n  },\n  emitButtonDownEvent: function (evt) {\n    if (!this.controller || evt.inputSource.handedness !== this.data.hand) {\n      return;\n    }\n\n    if (this.controller.gamepad) {\n      return;\n    }\n\n    this.selectEventDetails.state.pressed = true;\n    this.el.emit('buttondown', this.selectEventDetails);\n    this.el.emit('buttonchanged', this.selectEventDetails);\n    this.el.emit('triggerdown');\n  },\n  emitButtonUpEvent: function (evt) {\n    if (!this.controller || evt.inputSource.handedness !== this.data.hand) {\n      return;\n    }\n\n    if (this.controller.gamepad) {\n      return;\n    }\n\n    this.selectEventDetails.state.pressed = false;\n    this.el.emit('buttonup', this.selectEventDetails);\n    this.el.emit('buttonchanged', this.selectEventDetails);\n    this.el.emit('triggerup');\n  },\n\n  /**\n   * Handle update controller match criteria (such as `id`, `idPrefix`, `hand`, `controller`)\n   */\n  updateController: function () {\n    this.controller = controllerUtils.findMatchingControllerWebXR(this.system.controllers, this.data.id, this.data.hand, this.data.index, this.data.iterateControllerProfiles); // Legacy handle to the controller for old components.\n\n    this.el.components['tracked-controls'].controller = this.controller;\n\n    if (this.data.autoHide) {\n      this.el.object3D.visible = !!this.controller;\n    }\n  },\n  tick: function () {\n    var sceneEl = this.el.sceneEl;\n\n    if (!this.controller || !sceneEl.frame) {\n      return;\n    }\n\n    this.pose = sceneEl.frame.getPose(this.controller.targetRaySpace, this.system.referenceSpace);\n    this.updatePose();\n    this.updateButtons();\n  },\n  updatePose: function () {\n    var object3D = this.el.object3D;\n    var pose = this.pose;\n\n    if (!pose) {\n      return;\n    }\n\n    object3D.matrix.elements = pose.transform.matrix;\n    object3D.matrix.decompose(object3D.position, object3D.rotation, object3D.scale);\n  },\n\n  /**\n   * Handle button changes including axes, presses, touches, values.\n   */\n  updateButtons: function () {\n    var buttonState;\n    var id;\n    var controller = this.controller;\n    var gamepad;\n\n    if (!controller || !controller.gamepad) {\n      return;\n    }\n\n    gamepad = controller.gamepad; // Check every button.\n\n    for (id = 0; id < gamepad.buttons.length; ++id) {\n      // Initialize button state.\n      if (!this.buttonStates[id]) {\n        this.buttonStates[id] = {\n          pressed: false,\n          touched: false,\n          value: 0\n        };\n      }\n\n      if (!this.buttonEventDetails[id]) {\n        this.buttonEventDetails[id] = {\n          id: id,\n          state: this.buttonStates[id]\n        };\n      }\n\n      buttonState = gamepad.buttons[id];\n      this.handleButton(id, buttonState);\n    } // Check axes.\n\n\n    this.handleAxes();\n  },\n\n  /**\n   * Handle presses and touches for a single button.\n   *\n   * @param {number} id - Index of button in Gamepad button array.\n   * @param {number} buttonState - Value of button state from 0 to 1.\n   * @returns {boolean} Whether button has changed in any way.\n   */\n  handleButton: function (id, buttonState) {\n    var changed;\n    changed = this.handlePress(id, buttonState) | this.handleTouch(id, buttonState) | this.handleValue(id, buttonState);\n\n    if (!changed) {\n      return false;\n    }\n\n    this.el.emit(EVENTS.BUTTONCHANGED, this.buttonEventDetails[id], false);\n    return true;\n  },\n\n  /**\n   * An axis is an array of values from -1 (up, left) to 1 (down, right).\n   * Compare each component of the axis to the previous value to determine change.\n   *\n   * @returns {boolean} Whether axes changed.\n   */\n  handleAxes: function () {\n    var changed = false;\n    var controllerAxes = this.controller.gamepad.axes;\n    var i;\n    var previousAxis = this.axis;\n    var changedAxes = this.changedAxes; // Check if axis changed.\n\n    this.changedAxes.length = 0;\n\n    for (i = 0; i < controllerAxes.length; ++i) {\n      changedAxes.push(previousAxis[i] !== controllerAxes[i]);\n\n      if (changedAxes[i]) {\n        changed = true;\n      }\n    }\n\n    if (!changed) {\n      return false;\n    }\n\n    this.axis.length = 0;\n\n    for (i = 0; i < controllerAxes.length; i++) {\n      this.axis.push(controllerAxes[i]);\n    }\n\n    this.el.emit(EVENTS.AXISMOVE, this.axisMoveEventDetail, false);\n    return true;\n  },\n\n  /**\n   * Determine whether a button press has occured and emit events as appropriate.\n   *\n   * @param {string} id - ID of the button to check.\n   * @param {object} buttonState - State of the button to check.\n   * @returns {boolean} Whether button press state changed.\n   */\n  handlePress: function (id, buttonState) {\n    var evtName;\n    var previousButtonState = this.buttonStates[id]; // Not changed.\n\n    if (buttonState.pressed === previousButtonState.pressed) {\n      return false;\n    }\n\n    evtName = buttonState.pressed ? EVENTS.BUTTONDOWN : EVENTS.BUTTONUP;\n    this.el.emit(evtName, this.buttonEventDetails[id], false);\n    previousButtonState.pressed = buttonState.pressed;\n    return true;\n  },\n\n  /**\n   * Determine whether a button touch has occured and emit events as appropriate.\n   *\n   * @param {string} id - ID of the button to check.\n   * @param {object} buttonState - State of the button to check.\n   * @returns {boolean} Whether button touch state changed.\n   */\n  handleTouch: function (id, buttonState) {\n    var evtName;\n    var previousButtonState = this.buttonStates[id]; // Not changed.\n\n    if (buttonState.touched === previousButtonState.touched) {\n      return false;\n    }\n\n    evtName = buttonState.touched ? EVENTS.TOUCHSTART : EVENTS.TOUCHEND;\n    this.el.emit(evtName, this.buttonEventDetails[id], false);\n    previousButtonState.touched = buttonState.touched;\n    return true;\n  },\n\n  /**\n   * Determine whether a button value has changed.\n   *\n   * @param {string} id - Id of the button to check.\n   * @param {object} buttonState - State of the button to check.\n   * @returns {boolean} Whether button value changed.\n   */\n  handleValue: function (id, buttonState) {\n    var previousButtonState = this.buttonStates[id]; // Not changed.\n\n    if (buttonState.value === previousButtonState.value) {\n      return false;\n    }\n\n    previousButtonState.value = buttonState.value;\n    return true;\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/tracked-controls-webxr.js"],"names":["controllerUtils","require","registerComponent","EVENTS","AXISMOVE","BUTTONCHANGED","BUTTONDOWN","BUTTONUP","TOUCHSTART","TOUCHEND","module","exports","Component","schema","id","type","default","hand","index","iterateControllerProfiles","init","addSessionEventListeners","bind","updateController","emitButtonUpEvent","emitButtonDownEvent","selectEventDetails","state","pressed","buttonEventDetails","buttonStates","el","components","axis","changedAxes","axisMoveEventDetail","changed","play","sceneEl","addEventListener","pause","removeSessionEventListeners","removeEventListener","xrSession","evt","controller","inputSource","handedness","data","gamepad","emit","findMatchingControllerWebXR","system","controllers","autoHide","object3D","visible","tick","frame","pose","getPose","targetRaySpace","referenceSpace","updatePose","updateButtons","matrix","elements","transform","decompose","position","rotation","scale","buttonState","buttons","length","touched","value","handleButton","handleAxes","handlePress","handleTouch","handleValue","controllerAxes","axes","i","previousAxis","push","evtName","previousButtonState"],"mappings":"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","sourcesContent":["var controllerUtils = require('../utils/tracked-controls');\nvar registerComponent = require('../core/component').registerComponent;\n\nvar EVENTS = {\n  AXISMOVE: 'axismove',\n  BUTTONCHANGED: 'buttonchanged',\n  BUTTONDOWN: 'buttondown',\n  BUTTONUP: 'buttonup',\n  TOUCHSTART: 'touchstart',\n  TOUCHEND: 'touchend'\n};\n\nmodule.exports.Component = registerComponent('tracked-controls-webxr', {\n  schema: {\n    id: {type: 'string', default: ''},\n    hand: {type: 'string', default: ''},\n    index: {type: 'int', default: -1},\n    iterateControllerProfiles: {default: false}\n  },\n\n  init: function () {\n    this.addSessionEventListeners = this.addSessionEventListeners.bind(this);\n    this.updateController = this.updateController.bind(this);\n    this.emitButtonUpEvent = this.emitButtonUpEvent.bind(this);\n    this.emitButtonDownEvent = this.emitButtonDownEvent.bind(this);\n\n    this.selectEventDetails = {id: 'trigger', state: {pressed: false}};\n    this.buttonEventDetails = {};\n    this.buttonStates = this.el.components['tracked-controls'].buttonStates = {};\n    this.axis = this.el.components['tracked-controls'].axis = [0, 0, 0];\n    this.changedAxes = [];\n    this.axisMoveEventDetail = {axis: this.axis, changed: this.changedAxes};\n  },\n\n  play: function () {\n    var sceneEl = this.el.sceneEl;\n    this.updateController();\n    this.addSessionEventListeners();\n    sceneEl.addEventListener('enter-vr', this.addSessionEventListeners);\n    sceneEl.addEventListener('controllersupdated', this.updateController);\n  },\n\n  pause: function () {\n    var sceneEl = this.el.sceneEl;\n    this.removeSessionEventListeners();\n    sceneEl.removeEventListener('enter-vr', this.addSessionEventListeners);\n    sceneEl.removeEventListener('controllersupdated', this.updateController);\n  },\n\n  addSessionEventListeners: function () {\n    var sceneEl = this.el.sceneEl;\n    if (!sceneEl.xrSession) { return; }\n    sceneEl.xrSession.addEventListener('selectstart', this.emitButtonDownEvent);\n    sceneEl.xrSession.addEventListener('selectend', this.emitButtonUpEvent);\n  },\n\n  removeSessionEventListeners: function () {\n    var sceneEl = this.el.sceneEl;\n    if (!sceneEl.xrSession) { return; }\n    sceneEl.xrSession.addEventListener('selectstart', this.emitButtonDownEvent);\n    sceneEl.xrSession.addEventListener('selectend', this.emitButtonUpEvent);\n  },\n\n  emitButtonDownEvent: function (evt) {\n    if (!this.controller || evt.inputSource.handedness !== this.data.hand) { return; }\n    if (this.controller.gamepad) { return; }\n    this.selectEventDetails.state.pressed = true;\n    this.el.emit('buttondown', this.selectEventDetails);\n    this.el.emit('buttonchanged', this.selectEventDetails);\n    this.el.emit('triggerdown');\n  },\n\n  emitButtonUpEvent: function (evt) {\n    if (!this.controller || evt.inputSource.handedness !== this.data.hand) { return; }\n    if (this.controller.gamepad) { return; }\n    this.selectEventDetails.state.pressed = false;\n    this.el.emit('buttonup', this.selectEventDetails);\n    this.el.emit('buttonchanged', this.selectEventDetails);\n    this.el.emit('triggerup');\n  },\n\n  /**\n   * Handle update controller match criteria (such as `id`, `idPrefix`, `hand`, `controller`)\n   */\n  updateController: function () {\n    this.controller = controllerUtils.findMatchingControllerWebXR(\n      this.system.controllers,\n      this.data.id,\n      this.data.hand,\n      this.data.index,\n      this.data.iterateControllerProfiles\n    );\n    // Legacy handle to the controller for old components.\n    this.el.components['tracked-controls'].controller = this.controller;\n\n    if (this.data.autoHide) { this.el.object3D.visible = !!this.controller; }\n  },\n\n  tick: function () {\n    var sceneEl = this.el.sceneEl;\n    if (!this.controller || !sceneEl.frame) { return; }\n    this.pose = sceneEl.frame.getPose(this.controller.targetRaySpace, this.system.referenceSpace);\n    this.updatePose();\n    this.updateButtons();\n  },\n\n  updatePose: function () {\n    var object3D = this.el.object3D;\n    var pose = this.pose;\n    if (!pose) { return; }\n    object3D.matrix.elements = pose.transform.matrix;\n    object3D.matrix.decompose(object3D.position, object3D.rotation, object3D.scale);\n  },\n\n  /**\n   * Handle button changes including axes, presses, touches, values.\n   */\n  updateButtons: function () {\n    var buttonState;\n    var id;\n    var controller = this.controller;\n    var gamepad;\n    if (!controller || !controller.gamepad) { return; }\n\n    gamepad = controller.gamepad;\n    // Check every button.\n    for (id = 0; id < gamepad.buttons.length; ++id) {\n      // Initialize button state.\n      if (!this.buttonStates[id]) {\n        this.buttonStates[id] = {pressed: false, touched: false, value: 0};\n      }\n      if (!this.buttonEventDetails[id]) {\n        this.buttonEventDetails[id] = {id: id, state: this.buttonStates[id]};\n      }\n\n      buttonState = gamepad.buttons[id];\n      this.handleButton(id, buttonState);\n    }\n    // Check axes.\n    this.handleAxes();\n  },\n\n  /**\n   * Handle presses and touches for a single button.\n   *\n   * @param {number} id - Index of button in Gamepad button array.\n   * @param {number} buttonState - Value of button state from 0 to 1.\n   * @returns {boolean} Whether button has changed in any way.\n   */\n  handleButton: function (id, buttonState) {\n    var changed;\n    changed = this.handlePress(id, buttonState) |\n              this.handleTouch(id, buttonState) |\n              this.handleValue(id, buttonState);\n    if (!changed) { return false; }\n    this.el.emit(EVENTS.BUTTONCHANGED, this.buttonEventDetails[id], false);\n    return true;\n  },\n\n  /**\n   * An axis is an array of values from -1 (up, left) to 1 (down, right).\n   * Compare each component of the axis to the previous value to determine change.\n   *\n   * @returns {boolean} Whether axes changed.\n   */\n  handleAxes: function () {\n    var changed = false;\n    var controllerAxes = this.controller.gamepad.axes;\n    var i;\n    var previousAxis = this.axis;\n    var changedAxes = this.changedAxes;\n\n    // Check if axis changed.\n    this.changedAxes.length = 0;\n    for (i = 0; i < controllerAxes.length; ++i) {\n      changedAxes.push(previousAxis[i] !== controllerAxes[i]);\n      if (changedAxes[i]) { changed = true; }\n    }\n    if (!changed) { return false; }\n\n    this.axis.length = 0;\n    for (i = 0; i < controllerAxes.length; i++) {\n      this.axis.push(controllerAxes[i]);\n    }\n    this.el.emit(EVENTS.AXISMOVE, this.axisMoveEventDetail, false);\n    return true;\n  },\n\n  /**\n   * Determine whether a button press has occured and emit events as appropriate.\n   *\n   * @param {string} id - ID of the button to check.\n   * @param {object} buttonState - State of the button to check.\n   * @returns {boolean} Whether button press state changed.\n   */\n  handlePress: function (id, buttonState) {\n    var evtName;\n    var previousButtonState = this.buttonStates[id];\n\n    // Not changed.\n    if (buttonState.pressed === previousButtonState.pressed) { return false; }\n\n    evtName = buttonState.pressed ? EVENTS.BUTTONDOWN : EVENTS.BUTTONUP;\n    this.el.emit(evtName, this.buttonEventDetails[id], false);\n    previousButtonState.pressed = buttonState.pressed;\n    return true;\n  },\n\n  /**\n   * Determine whether a button touch has occured and emit events as appropriate.\n   *\n   * @param {string} id - ID of the button to check.\n   * @param {object} buttonState - State of the button to check.\n   * @returns {boolean} Whether button touch state changed.\n   */\n  handleTouch: function (id, buttonState) {\n    var evtName;\n    var previousButtonState = this.buttonStates[id];\n\n    // Not changed.\n    if (buttonState.touched === previousButtonState.touched) { return false; }\n\n    evtName = buttonState.touched ? EVENTS.TOUCHSTART : EVENTS.TOUCHEND;\n    this.el.emit(evtName, this.buttonEventDetails[id], false);\n    previousButtonState.touched = buttonState.touched;\n    return true;\n  },\n\n  /**\n   * Determine whether a button value has changed.\n   *\n   * @param {string} id - Id of the button to check.\n   * @param {object} buttonState - State of the button to check.\n   * @returns {boolean} Whether button value changed.\n   */\n  handleValue: function (id, buttonState) {\n    var previousButtonState = this.buttonStates[id];\n\n    // Not changed.\n    if (buttonState.value === previousButtonState.value) { return false; }\n\n    previousButtonState.value = buttonState.value;\n    return true;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}