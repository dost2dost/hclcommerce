{"ast":null,"code":"var registerComponent = require('../../core/component').registerComponent;\n\nvar constants = require('../../constants/');\n\nvar utils = require('../../utils/');\n\nvar bind = utils.bind;\nvar ENTER_VR_CLASS = 'a-enter-vr';\nvar ENTER_AR_CLASS = 'a-enter-ar';\nvar ENTER_VR_BTN_CLASS = 'a-enter-vr-button';\nvar ENTER_AR_BTN_CLASS = 'a-enter-ar-button';\nvar HIDDEN_CLASS = 'a-hidden';\nvar ORIENTATION_MODAL_CLASS = 'a-orientation-modal';\n/**\n * UI for entering VR mode.\n */\n\nmodule.exports.Component = registerComponent('vr-mode-ui', {\n  dependencies: ['canvas'],\n  schema: {\n    enabled: {\n      default: true\n    },\n    enterVRButton: {\n      default: ''\n    },\n    enterARButton: {\n      default: ''\n    }\n  },\n  init: function () {\n    var self = this;\n    var sceneEl = this.el;\n\n    if (utils.getUrlParameter('ui') === 'false') {\n      return;\n    }\n\n    this.insideLoader = false;\n    this.enterVREl = null;\n    this.enterAREl = null;\n    this.orientationModalEl = null;\n    this.bindMethods(); // Hide/show VR UI when entering/exiting VR mode.\n\n    sceneEl.addEventListener('enter-vr', this.updateEnterInterfaces);\n    sceneEl.addEventListener('exit-vr', this.updateEnterInterfaces);\n    sceneEl.addEventListener('update-vr-devices', this.updateEnterInterfaces);\n    window.addEventListener('message', function (event) {\n      if (event.data.type === 'loaderReady') {\n        self.insideLoader = true;\n        self.remove();\n      }\n    }); // Modal that tells the user to change orientation if in portrait.\n\n    window.addEventListener('orientationchange', this.toggleOrientationModalIfNeeded);\n  },\n  bindMethods: function () {\n    this.onEnterVRButtonClick = bind(this.onEnterVRButtonClick, this);\n    this.onEnterARButtonClick = bind(this.onEnterARButtonClick, this);\n    this.onModalClick = bind(this.onModalClick, this);\n    this.toggleOrientationModalIfNeeded = bind(this.toggleOrientationModalIfNeeded, this);\n    this.updateEnterInterfaces = bind(this.updateEnterInterfaces, this);\n  },\n\n  /**\n   * Exit VR when modal clicked.\n   */\n  onModalClick: function () {\n    this.el.exitVR();\n  },\n\n  /**\n   * Enter VR when clicked.\n   */\n  onEnterVRButtonClick: function () {\n    this.el.enterVR();\n  },\n\n  /**\n   * Enter AR when clicked.\n   */\n  onEnterARButtonClick: function () {\n    this.el.enterAR();\n  },\n  update: function () {\n    var data = this.data;\n    var sceneEl = this.el;\n\n    if (!data.enabled || this.insideLoader || utils.getUrlParameter('ui') === 'false') {\n      return this.remove();\n    }\n\n    if (this.enterVREl || this.enterAREl || this.orientationModalEl) {\n      return;\n    } // Add UI if enabled and not already present.\n\n\n    if (data.enterVRButton) {\n      // Custom button.\n      this.enterVREl = document.querySelector(data.enterVRButton);\n      this.enterVREl.addEventListener('click', this.onEnterVRButtonClick);\n    } else {\n      this.enterVREl = createEnterVRButton(this.onEnterVRButtonClick);\n      sceneEl.appendChild(this.enterVREl);\n    }\n\n    if (data.enterARButton) {\n      // Custom button.\n      this.enterAREl = document.querySelector(data.enterARButton);\n      this.enterAREl.addEventListener('click', this.onEnterARButtonClick);\n    } else {\n      this.enterAREl = createEnterARButton(this.onEnterARButtonClick);\n      sceneEl.appendChild(this.enterAREl);\n    }\n\n    this.orientationModalEl = createOrientationModal(this.onModalClick);\n    sceneEl.appendChild(this.orientationModalEl);\n    this.updateEnterInterfaces();\n  },\n  remove: function () {\n    [this.enterVREl, this.enterAREl, this.orientationModalEl].forEach(function (uiElement) {\n      if (uiElement && uiElement.parentNode) {\n        uiElement.parentNode.removeChild(uiElement);\n      }\n    });\n  },\n  updateEnterInterfaces: function () {\n    this.toggleEnterVRButtonIfNeeded();\n    this.toggleEnterARButtonIfNeeded();\n    this.toggleOrientationModalIfNeeded();\n  },\n  toggleEnterVRButtonIfNeeded: function () {\n    var sceneEl = this.el;\n\n    if (!this.enterVREl) {\n      return;\n    }\n\n    if (sceneEl.is('vr-mode')) {\n      this.enterVREl.classList.add(HIDDEN_CLASS);\n    } else {\n      this.enterVREl.classList.remove(HIDDEN_CLASS);\n    }\n  },\n  toggleEnterARButtonIfNeeded: function () {\n    var sceneEl = this.el;\n\n    if (!this.enterAREl) {\n      return;\n    } // Hide the button while in a session, or if AR is not supported.\n\n\n    if (sceneEl.is('vr-mode') || !utils.device.checkARSupport()) {\n      this.enterAREl.classList.add(HIDDEN_CLASS);\n    } else {\n      this.enterAREl.classList.remove(HIDDEN_CLASS);\n    }\n  },\n  toggleOrientationModalIfNeeded: function () {\n    var sceneEl = this.el;\n    var orientationModalEl = this.orientationModalEl;\n\n    if (!orientationModalEl || !sceneEl.isMobile) {\n      return;\n    }\n\n    if (!utils.device.isLandscape() && sceneEl.is('vr-mode')) {\n      // Show if in VR mode on portrait.\n      orientationModalEl.classList.remove(HIDDEN_CLASS);\n    } else {\n      orientationModalEl.classList.add(HIDDEN_CLASS);\n    }\n  }\n});\n/**\n * Create a button that when clicked will enter into stereo-rendering mode for VR.\n *\n * Structure: <div><button></div>\n *\n * @param {function} onClick - click event handler\n * @returns {Element} Wrapper <div>.\n */\n\nfunction createEnterVRButton(onClick) {\n  var vrButton;\n  var wrapper; // Create elements.\n\n  wrapper = document.createElement('div');\n  wrapper.classList.add(ENTER_VR_CLASS);\n  wrapper.setAttribute(constants.AFRAME_INJECTED, '');\n  vrButton = document.createElement('button');\n  vrButton.className = ENTER_VR_BTN_CLASS;\n  vrButton.setAttribute('title', 'Enter VR mode with a headset or fullscreen mode on a desktop. ' + 'Visit https://webvr.rocks or https://webvr.info for more information.');\n  vrButton.setAttribute(constants.AFRAME_INJECTED, '');\n\n  if (utils.device.isMobile()) {\n    applyStickyHoverFix(vrButton);\n  } // Insert elements.\n\n\n  wrapper.appendChild(vrButton);\n  vrButton.addEventListener('click', function (evt) {\n    onClick();\n    evt.stopPropagation();\n  });\n  return wrapper;\n}\n/**\n * Create a button that when clicked will enter into AR mode\n *\n * Structure: <div><button></div>\n *\n * @param {function} onClick - click event handler\n * @returns {Element} Wrapper <div>.\n */\n\n\nfunction createEnterARButton(onClick) {\n  var arButton;\n  var wrapper; // Create elements.\n\n  wrapper = document.createElement('div');\n  wrapper.classList.add(ENTER_AR_CLASS);\n  wrapper.setAttribute(constants.AFRAME_INJECTED, '');\n  arButton = document.createElement('button');\n  arButton.className = ENTER_AR_BTN_CLASS;\n  arButton.setAttribute('title', 'Enter AR mode with a headset or handheld device. ' + 'Visit https://webvr.rocks or https://webvr.info for more information.');\n  arButton.setAttribute(constants.AFRAME_INJECTED, '');\n\n  if (utils.device.isMobile()) {\n    applyStickyHoverFix(arButton);\n  } // Insert elements.\n\n\n  wrapper.appendChild(arButton);\n  arButton.addEventListener('click', function (evt) {\n    onClick();\n    evt.stopPropagation();\n  });\n  return wrapper;\n}\n/**\n * Creates a modal dialog to request the user to switch to landscape orientation.\n *\n * @param {function} onClick - click event handler\n * @returns {Element} Wrapper <div>.\n */\n\n\nfunction createOrientationModal(onClick) {\n  var modal = document.createElement('div');\n  modal.className = ORIENTATION_MODAL_CLASS;\n  modal.classList.add(HIDDEN_CLASS);\n  modal.setAttribute(constants.AFRAME_INJECTED, '');\n  var exit = document.createElement('button');\n  exit.setAttribute(constants.AFRAME_INJECTED, '');\n  exit.innerHTML = 'Exit VR'; // Exit VR on close.\n\n  exit.addEventListener('click', onClick);\n  modal.appendChild(exit);\n  return modal;\n}\n/**\n * CSS hover state is sticky in iOS (as in 12/18/2019)\n * They are not removed on mouseleave and this function applies a class\n * to resets the style.\n *\n * @param {function} buttonEl - Button element\n */\n\n\nfunction applyStickyHoverFix(buttonEl) {\n  buttonEl.addEventListener('touchstart', function () {\n    buttonEl.classList.remove('resethover');\n  });\n  buttonEl.addEventListener('touchend', function () {\n    buttonEl.classList.add('resethover');\n  });\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/scene/vr-mode-ui.js"],"names":["registerComponent","require","constants","utils","bind","ENTER_VR_CLASS","ENTER_AR_CLASS","ENTER_VR_BTN_CLASS","ENTER_AR_BTN_CLASS","HIDDEN_CLASS","ORIENTATION_MODAL_CLASS","module","exports","Component","dependencies","schema","enabled","default","enterVRButton","enterARButton","init","self","sceneEl","el","getUrlParameter","insideLoader","enterVREl","enterAREl","orientationModalEl","bindMethods","addEventListener","updateEnterInterfaces","window","event","data","type","remove","toggleOrientationModalIfNeeded","onEnterVRButtonClick","onEnterARButtonClick","onModalClick","exitVR","enterVR","enterAR","update","document","querySelector","createEnterVRButton","appendChild","createEnterARButton","createOrientationModal","forEach","uiElement","parentNode","removeChild","toggleEnterVRButtonIfNeeded","toggleEnterARButtonIfNeeded","is","classList","add","device","checkARSupport","isMobile","isLandscape","onClick","vrButton","wrapper","createElement","setAttribute","AFRAME_INJECTED","className","applyStickyHoverFix","evt","stopPropagation","arButton","modal","exit","innerHTML","buttonEl"],"mappings":"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","sourcesContent":["var registerComponent = require('../../core/component').registerComponent;\nvar constants = require('../../constants/');\nvar utils = require('../../utils/');\nvar bind = utils.bind;\n\nvar ENTER_VR_CLASS = 'a-enter-vr';\nvar ENTER_AR_CLASS = 'a-enter-ar';\nvar ENTER_VR_BTN_CLASS = 'a-enter-vr-button';\nvar ENTER_AR_BTN_CLASS = 'a-enter-ar-button';\nvar HIDDEN_CLASS = 'a-hidden';\nvar ORIENTATION_MODAL_CLASS = 'a-orientation-modal';\n\n/**\n * UI for entering VR mode.\n */\nmodule.exports.Component = registerComponent('vr-mode-ui', {\n  dependencies: ['canvas'],\n\n  schema: {\n    enabled: {default: true},\n    enterVRButton: {default: ''},\n    enterARButton: {default: ''}\n  },\n\n  init: function () {\n    var self = this;\n    var sceneEl = this.el;\n\n    if (utils.getUrlParameter('ui') === 'false') { return; }\n\n    this.insideLoader = false;\n    this.enterVREl = null;\n    this.enterAREl = null;\n    this.orientationModalEl = null;\n    this.bindMethods();\n\n    // Hide/show VR UI when entering/exiting VR mode.\n    sceneEl.addEventListener('enter-vr', this.updateEnterInterfaces);\n    sceneEl.addEventListener('exit-vr', this.updateEnterInterfaces);\n    sceneEl.addEventListener('update-vr-devices', this.updateEnterInterfaces);\n\n    window.addEventListener('message', function (event) {\n      if (event.data.type === 'loaderReady') {\n        self.insideLoader = true;\n        self.remove();\n      }\n    });\n\n    // Modal that tells the user to change orientation if in portrait.\n    window.addEventListener('orientationchange', this.toggleOrientationModalIfNeeded);\n  },\n\n  bindMethods: function () {\n    this.onEnterVRButtonClick = bind(this.onEnterVRButtonClick, this);\n    this.onEnterARButtonClick = bind(this.onEnterARButtonClick, this);\n    this.onModalClick = bind(this.onModalClick, this);\n    this.toggleOrientationModalIfNeeded = bind(this.toggleOrientationModalIfNeeded, this);\n    this.updateEnterInterfaces = bind(this.updateEnterInterfaces, this);\n  },\n\n  /**\n   * Exit VR when modal clicked.\n   */\n  onModalClick: function () {\n    this.el.exitVR();\n  },\n\n  /**\n   * Enter VR when clicked.\n   */\n  onEnterVRButtonClick: function () {\n    this.el.enterVR();\n  },\n\n  /**\n   * Enter AR when clicked.\n   */\n  onEnterARButtonClick: function () {\n    this.el.enterAR();\n  },\n\n  update: function () {\n    var data = this.data;\n    var sceneEl = this.el;\n\n    if (!data.enabled || this.insideLoader || utils.getUrlParameter('ui') === 'false') {\n      return this.remove();\n    }\n\n    if (this.enterVREl || this.enterAREl || this.orientationModalEl) { return; }\n\n    // Add UI if enabled and not already present.\n    if (data.enterVRButton) {\n      // Custom button.\n      this.enterVREl = document.querySelector(data.enterVRButton);\n      this.enterVREl.addEventListener('click', this.onEnterVRButtonClick);\n    } else {\n      this.enterVREl = createEnterVRButton(this.onEnterVRButtonClick);\n      sceneEl.appendChild(this.enterVREl);\n    }\n    if (data.enterARButton) {\n      // Custom button.\n      this.enterAREl = document.querySelector(data.enterARButton);\n      this.enterAREl.addEventListener('click', this.onEnterARButtonClick);\n    } else {\n      this.enterAREl = createEnterARButton(this.onEnterARButtonClick);\n      sceneEl.appendChild(this.enterAREl);\n    }\n\n    this.orientationModalEl = createOrientationModal(this.onModalClick);\n    sceneEl.appendChild(this.orientationModalEl);\n\n    this.updateEnterInterfaces();\n  },\n\n  remove: function () {\n    [this.enterVREl, this.enterAREl, this.orientationModalEl].forEach(function (uiElement) {\n      if (uiElement && uiElement.parentNode) {\n        uiElement.parentNode.removeChild(uiElement);\n      }\n    });\n  },\n\n  updateEnterInterfaces: function () {\n    this.toggleEnterVRButtonIfNeeded();\n    this.toggleEnterARButtonIfNeeded();\n    this.toggleOrientationModalIfNeeded();\n  },\n\n  toggleEnterVRButtonIfNeeded: function () {\n    var sceneEl = this.el;\n    if (!this.enterVREl) { return; }\n    if (sceneEl.is('vr-mode')) {\n      this.enterVREl.classList.add(HIDDEN_CLASS);\n    } else {\n      this.enterVREl.classList.remove(HIDDEN_CLASS);\n    }\n  },\n\n  toggleEnterARButtonIfNeeded: function () {\n    var sceneEl = this.el;\n    if (!this.enterAREl) { return; }\n    // Hide the button while in a session, or if AR is not supported.\n    if (sceneEl.is('vr-mode') || !utils.device.checkARSupport()) {\n      this.enterAREl.classList.add(HIDDEN_CLASS);\n    } else {\n      this.enterAREl.classList.remove(HIDDEN_CLASS);\n    }\n  },\n\n  toggleOrientationModalIfNeeded: function () {\n    var sceneEl = this.el;\n    var orientationModalEl = this.orientationModalEl;\n    if (!orientationModalEl || !sceneEl.isMobile) { return; }\n    if (!utils.device.isLandscape() && sceneEl.is('vr-mode')) {\n      // Show if in VR mode on portrait.\n      orientationModalEl.classList.remove(HIDDEN_CLASS);\n    } else {\n      orientationModalEl.classList.add(HIDDEN_CLASS);\n    }\n  }\n});\n\n/**\n * Create a button that when clicked will enter into stereo-rendering mode for VR.\n *\n * Structure: <div><button></div>\n *\n * @param {function} onClick - click event handler\n * @returns {Element} Wrapper <div>.\n */\nfunction createEnterVRButton (onClick) {\n  var vrButton;\n  var wrapper;\n\n  // Create elements.\n  wrapper = document.createElement('div');\n  wrapper.classList.add(ENTER_VR_CLASS);\n  wrapper.setAttribute(constants.AFRAME_INJECTED, '');\n  vrButton = document.createElement('button');\n  vrButton.className = ENTER_VR_BTN_CLASS;\n  vrButton.setAttribute('title',\n    'Enter VR mode with a headset or fullscreen mode on a desktop. ' +\n    'Visit https://webvr.rocks or https://webvr.info for more information.');\n  vrButton.setAttribute(constants.AFRAME_INJECTED, '');\n  if (utils.device.isMobile()) { applyStickyHoverFix(vrButton); }\n  // Insert elements.\n  wrapper.appendChild(vrButton);\n  vrButton.addEventListener('click', function (evt) {\n    onClick();\n    evt.stopPropagation();\n  });\n  return wrapper;\n}\n\n/**\n * Create a button that when clicked will enter into AR mode\n *\n * Structure: <div><button></div>\n *\n * @param {function} onClick - click event handler\n * @returns {Element} Wrapper <div>.\n */\nfunction createEnterARButton (onClick) {\n  var arButton;\n  var wrapper;\n\n  // Create elements.\n  wrapper = document.createElement('div');\n  wrapper.classList.add(ENTER_AR_CLASS);\n  wrapper.setAttribute(constants.AFRAME_INJECTED, '');\n  arButton = document.createElement('button');\n  arButton.className = ENTER_AR_BTN_CLASS;\n  arButton.setAttribute('title',\n    'Enter AR mode with a headset or handheld device. ' +\n    'Visit https://webvr.rocks or https://webvr.info for more information.');\n  arButton.setAttribute(constants.AFRAME_INJECTED, '');\n  if (utils.device.isMobile()) { applyStickyHoverFix(arButton); }\n  // Insert elements.\n  wrapper.appendChild(arButton);\n  arButton.addEventListener('click', function (evt) {\n    onClick();\n    evt.stopPropagation();\n  });\n  return wrapper;\n}\n\n/**\n * Creates a modal dialog to request the user to switch to landscape orientation.\n *\n * @param {function} onClick - click event handler\n * @returns {Element} Wrapper <div>.\n */\nfunction createOrientationModal (onClick) {\n  var modal = document.createElement('div');\n  modal.className = ORIENTATION_MODAL_CLASS;\n  modal.classList.add(HIDDEN_CLASS);\n  modal.setAttribute(constants.AFRAME_INJECTED, '');\n\n  var exit = document.createElement('button');\n  exit.setAttribute(constants.AFRAME_INJECTED, '');\n  exit.innerHTML = 'Exit VR';\n\n  // Exit VR on close.\n  exit.addEventListener('click', onClick);\n\n  modal.appendChild(exit);\n\n  return modal;\n}\n\n/**\n * CSS hover state is sticky in iOS (as in 12/18/2019)\n * They are not removed on mouseleave and this function applies a class\n * to resets the style.\n *\n * @param {function} buttonEl - Button element\n */\nfunction applyStickyHoverFix (buttonEl) {\n  buttonEl.addEventListener('touchstart', function () {\n    buttonEl.classList.remove('resethover');\n  });\n  buttonEl.addEventListener('touchend', function () {\n    buttonEl.classList.add('resethover');\n  });\n}\n"]},"metadata":{},"sourceType":"script"}