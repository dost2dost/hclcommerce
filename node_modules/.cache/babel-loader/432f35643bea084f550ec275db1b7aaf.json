{"ast":null,"code":"var flatten = require('flatten-vertex-data');\n\nvar warned = false;\nmodule.exports.attr = setAttribute;\nmodule.exports.index = setIndex;\n\nfunction setIndex(geometry, data, itemSize, dtype) {\n  if (typeof itemSize !== 'number') itemSize = 1;\n  if (typeof dtype !== 'string') dtype = 'uint16';\n  var isR69 = !geometry.index && typeof geometry.setIndex !== 'function';\n  var attrib = isR69 ? geometry.getAttribute('index') : geometry.index;\n  var newAttrib = updateAttribute(attrib, data, itemSize, dtype);\n\n  if (newAttrib) {\n    if (isR69) geometry.addAttribute('index', newAttrib);else geometry.index = newAttrib;\n  }\n}\n\nfunction setAttribute(geometry, key, data, itemSize, dtype) {\n  if (typeof itemSize !== 'number') itemSize = 3;\n  if (typeof dtype !== 'string') dtype = 'float32';\n\n  if (Array.isArray(data) && Array.isArray(data[0]) && data[0].length !== itemSize) {\n    throw new Error('Nested vertex array has unexpected size; expected ' + itemSize + ' but found ' + data[0].length);\n  }\n\n  var attrib = geometry.getAttribute(key);\n  var newAttrib = updateAttribute(attrib, data, itemSize, dtype);\n  geometry.setAttribute(key, newAttrib);\n}\n\nfunction updateAttribute(attrib, data, itemSize, dtype) {\n  data = data || []; // create a new array with desired type\n\n  data = flatten(data, dtype);\n  attrib = new THREE.BufferAttribute(data, itemSize);\n  attrib.itemSize = itemSize;\n  attrib.needsUpdate = true;\n  return attrib;\n} // Test whether the attribute needs to be re-created,\n// returns false if we can re-use it as-is.\n\n\nfunction rebuildAttribute(attrib, data, itemSize) {\n  if (attrib.itemSize !== itemSize) return true;\n  if (!attrib.array) return true;\n  var attribLength = attrib.array.length;\n\n  if (Array.isArray(data) && Array.isArray(data[0])) {\n    // [ [ x, y, z ] ]\n    return attribLength !== data.length * itemSize;\n  } else {\n    // [ x, y, z ]\n    return attribLength !== data.length;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/three-buffer-vertex-data/index.js"],"names":["flatten","require","warned","module","exports","attr","setAttribute","index","setIndex","geometry","data","itemSize","dtype","isR69","attrib","getAttribute","newAttrib","updateAttribute","addAttribute","key","Array","isArray","length","Error","THREE","BufferAttribute","needsUpdate","rebuildAttribute","array","attribLength"],"mappings":"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","sourcesContent":["var flatten = require('flatten-vertex-data')\nvar warned = false;\n\nmodule.exports.attr = setAttribute\nmodule.exports.index = setIndex\n\nfunction setIndex (geometry, data, itemSize, dtype) {\n  if (typeof itemSize !== 'number') itemSize = 1\n  if (typeof dtype !== 'string') dtype = 'uint16'\n\n  var isR69 = !geometry.index && typeof geometry.setIndex !== 'function'\n  var attrib = isR69 ? geometry.getAttribute('index') : geometry.index\n  var newAttrib = updateAttribute(attrib, data, itemSize, dtype)\n  if (newAttrib) {\n    if (isR69) geometry.addAttribute('index', newAttrib)\n    else geometry.index = newAttrib\n  }\n}\n\nfunction setAttribute (geometry, key, data, itemSize, dtype) {\n  if (typeof itemSize !== 'number') itemSize = 3\n  if (typeof dtype !== 'string') dtype = 'float32'\n  if (Array.isArray(data) &&\n    Array.isArray(data[0]) &&\n    data[0].length !== itemSize) {\n    throw new Error('Nested vertex array has unexpected size; expected ' +\n      itemSize + ' but found ' + data[0].length)\n  }\n\n  var attrib = geometry.getAttribute(key)\n  var newAttrib = updateAttribute(attrib, data, itemSize, dtype)\n  geometry.setAttribute(key, newAttrib)\n}\n\nfunction updateAttribute (attrib, data, itemSize, dtype) {\n  data = data || []\n\n  // create a new array with desired type\n  data = flatten(data, dtype)\n\n  attrib = new THREE.BufferAttribute(data, itemSize);\n  attrib.itemSize = itemSize;\n  attrib.needsUpdate = true;\n\n  return attrib\n}\n\n// Test whether the attribute needs to be re-created,\n// returns false if we can re-use it as-is.\nfunction rebuildAttribute (attrib, data, itemSize) {\n  if (attrib.itemSize !== itemSize) return true\n  if (!attrib.array) return true\n  var attribLength = attrib.array.length\n  if (Array.isArray(data) && Array.isArray(data[0])) {\n    // [ [ x, y, z ] ]\n    return attribLength !== data.length * itemSize\n  } else {\n    // [ x, y, z ]\n    return attribLength !== data.length\n  }\n  return false\n}\n"]},"metadata":{},"sourceType":"script"}