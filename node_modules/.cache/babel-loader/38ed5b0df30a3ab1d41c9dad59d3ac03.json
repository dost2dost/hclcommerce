{"ast":null,"code":"/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return 'WebkitAppearance' in document.documentElement.style || // is firebug? http://stackoverflow.com/a/398120/376773\n  window.console && (console.firebug || console.exception && console.table) || // is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31;\n}\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\n\nexports.formatters.j = function (v) {\n  return JSON.stringify(v);\n};\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ');\n  if (!useColors) return args;\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1)); // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function (match) {\n    if ('%%' === match) return;\n    index++;\n\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n  return args;\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch (e) {}\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    r = exports.storage.debug;\n  } catch (e) {}\n\n  return r;\n}\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\n\nexports.enable(load());\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/node_modules/debug/browser.js"],"names":["exports","module","require","log","formatArgs","save","load","useColors","storage","chrome","local","localstorage","colors","document","documentElement","style","window","console","firebug","exception","table","navigator","userAgent","toLowerCase","match","parseInt","RegExp","$1","formatters","j","v","JSON","stringify","args","arguments","namespace","c","color","concat","Array","prototype","slice","call","index","lastC","replace","splice","Function","apply","namespaces","removeItem","debug","e","r","enable","localStorage"],"mappings":"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","sourcesContent":["\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return ('WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  return JSON.stringify(v);\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ');\n\n  if (!useColors) return args;\n\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage(){\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n"]},"metadata":{},"sourceType":"script"}