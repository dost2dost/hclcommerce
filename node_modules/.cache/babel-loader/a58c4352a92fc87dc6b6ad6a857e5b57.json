{"ast":null,"code":"var ANode = require('./a-node');\n\nvar registerElement = require('./a-register-element').registerElement;\n\nvar components = require('./component').components;\n\nvar utils = require('../utils');\n\nvar MULTIPLE_COMPONENT_DELIMITER = '__';\n/**\n * @member {object} componentCache - Cache of pre-parsed values. An object where the keys\n *         are component names and the values are already parsed by the component.\n */\n\nmodule.exports = registerElement('a-mixin', {\n  prototype: Object.create(ANode.prototype, {\n    createdCallback: {\n      value: function () {\n        this.componentCache = {};\n        this.id = this.getAttribute('id');\n        this.isMixin = true;\n      }\n    },\n    attributeChangedCallback: {\n      value: function (attr, oldVal, newVal) {\n        this.cacheAttribute(attr, newVal);\n        this.updateEntities();\n      }\n    },\n    attachedCallback: {\n      value: function () {\n        this.sceneEl = this.closestScene();\n        this.cacheAttributes();\n        this.updateEntities();\n        this.load();\n      }\n    },\n\n    /**\n     * setAttribute that parses and caches component values.\n     */\n    setAttribute: {\n      value: function (attr, value) {\n        window.HTMLElement.prototype.setAttribute.call(this, attr, value);\n        this.cacheAttribute(attr, value);\n      }\n    },\n\n    /**\n     * If `attr` is a component, then parse the value using the schema and store it.\n     */\n    cacheAttribute: {\n      value: function (attr, value) {\n        var component;\n        var componentName; // Get component data.\n\n        componentName = utils.split(attr, MULTIPLE_COMPONENT_DELIMITER)[0];\n        component = components[componentName];\n\n        if (!component) {\n          return;\n        }\n\n        if (value === undefined) {\n          value = window.HTMLElement.prototype.getAttribute.call(this, attr);\n        }\n\n        this.componentCache[attr] = component.parseAttrValueForCache(value);\n      }\n    },\n\n    /**\n     * If `attr` is a component, then grab pre-parsed value from the cache.\n     * Else do a normal getAttribute.\n     */\n    getAttribute: {\n      value: function (attr) {\n        return this.componentCache[attr] || window.HTMLElement.prototype.getAttribute.call(this, attr);\n      }\n    },\n\n    /**\n     * Parse and cache every component defined on the mixin.\n     */\n    cacheAttributes: {\n      value: function () {\n        var attributes = this.attributes;\n        var attrName;\n        var i;\n\n        for (i = 0; i < attributes.length; i++) {\n          attrName = attributes[i].name;\n          this.cacheAttribute(attrName);\n        }\n      }\n    },\n\n    /**\n     * For entities that already have been loaded by the time the mixin was attached, tell\n     * those entities to register the mixin and refresh their component data.\n     */\n    updateEntities: {\n      value: function () {\n        var entity;\n        var entities;\n        var i;\n\n        if (!this.sceneEl) {\n          return;\n        }\n\n        entities = this.sceneEl.querySelectorAll('[mixin~=' + this.id + ']');\n\n        for (i = 0; i < entities.length; i++) {\n          entity = entities[i];\n\n          if (!entity.hasLoaded || entity.isMixin) {\n            continue;\n          }\n\n          entity.mixinUpdate(this.id);\n        }\n      }\n    }\n  })\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/core/a-mixin.js"],"names":["ANode","require","registerElement","components","utils","MULTIPLE_COMPONENT_DELIMITER","module","exports","prototype","Object","create","createdCallback","value","componentCache","id","getAttribute","isMixin","attributeChangedCallback","attr","oldVal","newVal","cacheAttribute","updateEntities","attachedCallback","sceneEl","closestScene","cacheAttributes","load","setAttribute","window","HTMLElement","call","component","componentName","split","undefined","parseAttrValueForCache","attributes","attrName","i","length","name","entity","entities","querySelectorAll","hasLoaded","mixinUpdate"],"mappings":"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","sourcesContent":["var ANode = require('./a-node');\nvar registerElement = require('./a-register-element').registerElement;\nvar components = require('./component').components;\nvar utils = require('../utils');\n\nvar MULTIPLE_COMPONENT_DELIMITER = '__';\n\n/**\n * @member {object} componentCache - Cache of pre-parsed values. An object where the keys\n *         are component names and the values are already parsed by the component.\n */\nmodule.exports = registerElement('a-mixin', {\n  prototype: Object.create(ANode.prototype, {\n    createdCallback: {\n      value: function () {\n        this.componentCache = {};\n        this.id = this.getAttribute('id');\n        this.isMixin = true;\n      }\n    },\n\n    attributeChangedCallback: {\n      value: function (attr, oldVal, newVal) {\n        this.cacheAttribute(attr, newVal);\n        this.updateEntities();\n      }\n    },\n\n    attachedCallback: {\n      value: function () {\n        this.sceneEl = this.closestScene();\n        this.cacheAttributes();\n        this.updateEntities();\n        this.load();\n      }\n    },\n\n    /**\n     * setAttribute that parses and caches component values.\n     */\n    setAttribute: {\n      value: function (attr, value) {\n        window.HTMLElement.prototype.setAttribute.call(this, attr, value);\n        this.cacheAttribute(attr, value);\n      }\n    },\n\n    /**\n     * If `attr` is a component, then parse the value using the schema and store it.\n     */\n    cacheAttribute: {\n      value: function (attr, value) {\n        var component;\n        var componentName;\n\n        // Get component data.\n        componentName = utils.split(attr, MULTIPLE_COMPONENT_DELIMITER)[0];\n        component = components[componentName];\n        if (!component) { return; }\n        if (value === undefined) {\n          value = window.HTMLElement.prototype.getAttribute.call(this, attr);\n        }\n        this.componentCache[attr] = component.parseAttrValueForCache(value);\n      }\n    },\n\n    /**\n     * If `attr` is a component, then grab pre-parsed value from the cache.\n     * Else do a normal getAttribute.\n     */\n    getAttribute: {\n      value: function (attr) {\n        return this.componentCache[attr] ||\n               window.HTMLElement.prototype.getAttribute.call(this, attr);\n      }\n    },\n\n    /**\n     * Parse and cache every component defined on the mixin.\n     */\n    cacheAttributes: {\n      value: function () {\n        var attributes = this.attributes;\n        var attrName;\n        var i;\n        for (i = 0; i < attributes.length; i++) {\n          attrName = attributes[i].name;\n          this.cacheAttribute(attrName);\n        }\n      }\n    },\n\n    /**\n     * For entities that already have been loaded by the time the mixin was attached, tell\n     * those entities to register the mixin and refresh their component data.\n     */\n    updateEntities: {\n      value: function () {\n        var entity;\n        var entities;\n        var i;\n\n        if (!this.sceneEl) { return; }\n\n        entities = this.sceneEl.querySelectorAll('[mixin~=' + this.id + ']');\n        for (i = 0; i < entities.length; i++) {\n          entity = entities[i];\n          if (!entity.hasLoaded || entity.isMixin) { continue; }\n          entity.mixinUpdate(this.id);\n        }\n      }\n    }\n  })\n});\n"]},"metadata":{},"sourceType":"script"}