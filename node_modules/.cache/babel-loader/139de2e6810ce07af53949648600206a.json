{"ast":null,"code":"var registerComponent = require('../core/component').registerComponent;\n\nvar bind = require('../utils/bind');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\n\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\n\nvar isWebXRAvailable = require('../utils/').device.isWebXRAvailable;\n\nvar GEARVR_CONTROLLER_MODEL_BASE_URL = 'https://cdn.aframe.io/controllers/samsung/';\nvar GEARVR_CONTROLLER_MODEL_OBJ_URL = GEARVR_CONTROLLER_MODEL_BASE_URL + 'gear_vr_controller.obj';\nvar GEARVR_CONTROLLER_MODEL_OBJ_MTL = GEARVR_CONTROLLER_MODEL_BASE_URL + 'gear_vr_controller.mtl';\nvar GAMEPAD_ID_WEBXR = 'samsung-gearvr';\nvar GAMEPAD_ID_WEBVR = 'Gear VR'; // Prefix for Gen1 and Gen2 Oculus Touch Controllers.\n\nvar GAMEPAD_ID_PREFIX = isWebXRAvailable ? GAMEPAD_ID_WEBXR : GAMEPAD_ID_WEBVR;\n/**\n * Button indices:\n * 0 - trackpad\n * 1 - trigger\n *\n * Axis:\n * 0 - trackpad x\n * 1 - trackpad y\n */\n\nvar INPUT_MAPPING_WEBVR = {\n  axes: {\n    trackpad: [0, 1]\n  },\n  buttons: ['trackpad', 'trigger']\n};\n/**\n * Button indices:\n * 0 - trigger\n * 1 - none\n * 2 - touchpad\n * 3 - menu\n *\n * Axis:\n * 0 - touchpad x\n * 1 - touchpad y\n * Reference: https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/oculus/oculus-go.json\n */\n\nvar INPUT_MAPPING_WEBXR = {\n  left: {\n    axes: {\n      touchpad: [0, 1]\n    },\n    buttons: ['trigger', 'none', 'touchpad', 'menu']\n  },\n  right: {\n    axes: {\n      touchpad: [0, 1]\n    },\n    buttons: ['trigger', 'none', 'touchpad', 'menu']\n  }\n};\nvar INPUT_MAPPING = isWebXRAvailable ? INPUT_MAPPING_WEBXR : INPUT_MAPPING_WEBVR;\n/**\n * Gear VR controls.\n * Interface with Gear VR controller and map Gamepad events to\n * controller buttons: trackpad, trigger\n * Load a controller model and highlight the pressed buttons.\n */\n\nmodule.exports.Component = registerComponent('gearvr-controls', {\n  schema: {\n    hand: {\n      default: ''\n    },\n    // This informs the degenerate arm model.\n    buttonColor: {\n      type: 'color',\n      default: '#000000'\n    },\n    buttonTouchedColor: {\n      type: 'color',\n      default: '#777777'\n    },\n    buttonHighlightColor: {\n      type: 'color',\n      default: '#FFFFFF'\n    },\n    model: {\n      default: true\n    },\n    orientationOffset: {\n      type: 'vec3'\n    },\n    armModel: {\n      default: true\n    }\n  },\n\n  /**\n   * Button IDs:\n   * 0 - trackpad\n   * 1 - trigger\n   */\n  mapping: INPUT_MAPPING,\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.removeControllersUpdateListener = bind(this.removeControllersUpdateListener, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n  init: function () {\n    var self = this;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n\n    this.onButtonDown = function (evt) {\n      onButtonEvent(evt.detail.id, 'down', self);\n    };\n\n    this.onButtonUp = function (evt) {\n      onButtonEvent(evt.detail.id, 'up', self);\n    };\n\n    this.onButtonTouchStart = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchstart', self);\n    };\n\n    this.onButtonTouchEnd = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchend', self);\n    };\n\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.bindMethods();\n  },\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    el.addEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = true;\n  },\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('model-loaded', this.onModelLoaded);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = false;\n  },\n  checkIfControllerPresent: function () {\n    checkControllerPresentAndSetup(this, GAMEPAD_ID_PREFIX, this.data.hand ? {\n      hand: this.data.hand\n    } : {});\n  },\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n  injectTrackedControls: function () {\n    var el = this.el;\n    var data = this.data;\n    el.setAttribute('tracked-controls', {\n      armModel: data.armModel,\n      hand: data.hand,\n      idPrefix: GAMEPAD_ID_PREFIX,\n      id: GAMEPAD_ID_PREFIX,\n      orientationOffset: data.orientationOffset\n    });\n\n    if (!this.data.model) {\n      return;\n    }\n\n    this.el.setAttribute('obj-model', {\n      obj: GEARVR_CONTROLLER_MODEL_OBJ_URL,\n      mtl: GEARVR_CONTROLLER_MODEL_OBJ_MTL\n    });\n  },\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  onControllersUpdate: function () {\n    this.checkIfControllerPresent();\n  },\n  // No need for onButtonChanged, since Gear VR controller has no analog buttons.\n  onModelLoaded: function (evt) {\n    var controllerObject3D = evt.detail.model;\n    var buttonMeshes;\n\n    if (!this.data.model) {\n      return;\n    }\n\n    buttonMeshes = this.buttonMeshes = {};\n    buttonMeshes.trigger = controllerObject3D.children[2];\n    buttonMeshes.trackpad = controllerObject3D.children[1];\n  },\n  onButtonChanged: function (evt) {\n    var button = this.mapping.buttons[evt.detail.id];\n    if (!button) return; // Pass along changed event with button state, using button mapping for convenience.\n\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping.axes, evt);\n  },\n  updateModel: function (buttonName, evtName) {\n    if (!this.data.model) {\n      return;\n    }\n\n    this.updateButtonModel(buttonName, evtName);\n  },\n  updateButtonModel: function (buttonName, state) {\n    var buttonMeshes = this.buttonMeshes;\n\n    if (!buttonMeshes || !buttonMeshes[buttonName]) {\n      return;\n    }\n\n    var color;\n\n    switch (state) {\n      case 'down':\n        color = this.data.buttonHighlightColor;\n        break;\n\n      case 'touchstart':\n        color = this.data.buttonTouchedColor;\n        break;\n\n      default:\n        color = this.data.buttonColor;\n    }\n\n    buttonMeshes[buttonName].material.color.set(color);\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/gearvr-controls.js"],"names":["registerComponent","require","bind","trackedControlsUtils","checkControllerPresentAndSetup","emitIfAxesChanged","onButtonEvent","isWebXRAvailable","device","GEARVR_CONTROLLER_MODEL_BASE_URL","GEARVR_CONTROLLER_MODEL_OBJ_URL","GEARVR_CONTROLLER_MODEL_OBJ_MTL","GAMEPAD_ID_WEBXR","GAMEPAD_ID_WEBVR","GAMEPAD_ID_PREFIX","INPUT_MAPPING_WEBVR","axes","trackpad","buttons","INPUT_MAPPING_WEBXR","left","touchpad","right","INPUT_MAPPING","module","exports","Component","schema","hand","default","buttonColor","type","buttonTouchedColor","buttonHighlightColor","model","orientationOffset","armModel","mapping","bindMethods","onModelLoaded","onControllersUpdate","checkIfControllerPresent","removeControllersUpdateListener","onAxisMoved","init","self","onButtonChanged","onButtonDown","evt","detail","id","onButtonUp","onButtonTouchStart","onButtonTouchEnd","controllerPresent","lastControllerCheck","addEventListeners","el","addEventListener","controllerEventsActive","removeEventListeners","removeEventListener","data","play","addControllersUpdateListener","pause","injectTrackedControls","setAttribute","idPrefix","obj","mtl","sceneEl","controllerObject3D","buttonMeshes","trigger","children","button","emit","state","updateModel","buttonName","evtName","updateButtonModel","color","material","set"],"mappings":"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","sourcesContent":["var registerComponent = require('../core/component').registerComponent;\nvar bind = require('../utils/bind');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\nvar isWebXRAvailable = require('../utils/').device.isWebXRAvailable;\n\nvar GEARVR_CONTROLLER_MODEL_BASE_URL = 'https://cdn.aframe.io/controllers/samsung/';\nvar GEARVR_CONTROLLER_MODEL_OBJ_URL = GEARVR_CONTROLLER_MODEL_BASE_URL + 'gear_vr_controller.obj';\nvar GEARVR_CONTROLLER_MODEL_OBJ_MTL = GEARVR_CONTROLLER_MODEL_BASE_URL + 'gear_vr_controller.mtl';\n\nvar GAMEPAD_ID_WEBXR = 'samsung-gearvr';\nvar GAMEPAD_ID_WEBVR = 'Gear VR';\n\n// Prefix for Gen1 and Gen2 Oculus Touch Controllers.\nvar GAMEPAD_ID_PREFIX = isWebXRAvailable ? GAMEPAD_ID_WEBXR : GAMEPAD_ID_WEBVR;\n\n/**\n * Button indices:\n * 0 - trackpad\n * 1 - trigger\n *\n * Axis:\n * 0 - trackpad x\n * 1 - trackpad y\n */\nvar INPUT_MAPPING_WEBVR = {\n  axes: {trackpad: [0, 1]},\n  buttons: ['trackpad', 'trigger']\n};\n\n/**\n * Button indices:\n * 0 - trigger\n * 1 - none\n * 2 - touchpad\n * 3 - menu\n *\n * Axis:\n * 0 - touchpad x\n * 1 - touchpad y\n * Reference: https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/oculus/oculus-go.json\n */\nvar INPUT_MAPPING_WEBXR = {\n  left: {\n    axes: {touchpad: [0, 1]},\n    buttons: ['trigger', 'none', 'touchpad', 'menu']\n  },\n  right: {\n    axes: {touchpad: [0, 1]},\n    buttons: ['trigger', 'none', 'touchpad', 'menu']\n  }\n};\n\nvar INPUT_MAPPING = isWebXRAvailable ? INPUT_MAPPING_WEBXR : INPUT_MAPPING_WEBVR;\n\n/**\n * Gear VR controls.\n * Interface with Gear VR controller and map Gamepad events to\n * controller buttons: trackpad, trigger\n * Load a controller model and highlight the pressed buttons.\n */\nmodule.exports.Component = registerComponent('gearvr-controls', {\n  schema: {\n    hand: {default: ''},  // This informs the degenerate arm model.\n    buttonColor: {type: 'color', default: '#000000'},\n    buttonTouchedColor: {type: 'color', default: '#777777'},\n    buttonHighlightColor: {type: 'color', default: '#FFFFFF'},\n    model: {default: true},\n    orientationOffset: {type: 'vec3'},\n    armModel: {default: true}\n  },\n\n  /**\n   * Button IDs:\n   * 0 - trackpad\n   * 1 - trigger\n   */\n  mapping: INPUT_MAPPING,\n\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.removeControllersUpdateListener = bind(this.removeControllersUpdateListener, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n\n  init: function () {\n    var self = this;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n    this.onButtonDown = function (evt) { onButtonEvent(evt.detail.id, 'down', self); };\n    this.onButtonUp = function (evt) { onButtonEvent(evt.detail.id, 'up', self); };\n    this.onButtonTouchStart = function (evt) { onButtonEvent(evt.detail.id, 'touchstart', self); };\n    this.onButtonTouchEnd = function (evt) { onButtonEvent(evt.detail.id, 'touchend', self); };\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.bindMethods();\n  },\n\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    el.addEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = true;\n  },\n\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('model-loaded', this.onModelLoaded);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = false;\n  },\n\n  checkIfControllerPresent: function () {\n    checkControllerPresentAndSetup(this, GAMEPAD_ID_PREFIX,\n      this.data.hand ? {hand: this.data.hand} : {});\n  },\n\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n\n  injectTrackedControls: function () {\n    var el = this.el;\n    var data = this.data;\n    el.setAttribute('tracked-controls', {\n      armModel: data.armModel,\n      hand: data.hand,\n      idPrefix: GAMEPAD_ID_PREFIX,\n      id: GAMEPAD_ID_PREFIX,\n      orientationOffset: data.orientationOffset\n    });\n    if (!this.data.model) { return; }\n    this.el.setAttribute('obj-model', {\n      obj: GEARVR_CONTROLLER_MODEL_OBJ_URL,\n      mtl: GEARVR_CONTROLLER_MODEL_OBJ_MTL\n    });\n  },\n\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  onControllersUpdate: function () {\n    this.checkIfControllerPresent();\n  },\n\n  // No need for onButtonChanged, since Gear VR controller has no analog buttons.\n\n  onModelLoaded: function (evt) {\n    var controllerObject3D = evt.detail.model;\n    var buttonMeshes;\n    if (!this.data.model) { return; }\n    buttonMeshes = this.buttonMeshes = {};\n    buttonMeshes.trigger = controllerObject3D.children[2];\n    buttonMeshes.trackpad = controllerObject3D.children[1];\n  },\n\n  onButtonChanged: function (evt) {\n    var button = this.mapping.buttons[evt.detail.id];\n    if (!button) return;\n    // Pass along changed event with button state, using button mapping for convenience.\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping.axes, evt);\n  },\n\n  updateModel: function (buttonName, evtName) {\n    if (!this.data.model) { return; }\n    this.updateButtonModel(buttonName, evtName);\n  },\n\n  updateButtonModel: function (buttonName, state) {\n    var buttonMeshes = this.buttonMeshes;\n    if (!buttonMeshes || !buttonMeshes[buttonName]) { return; }\n    var color;\n    switch (state) {\n      case 'down':\n        color = this.data.buttonHighlightColor;\n        break;\n      case 'touchstart':\n        color = this.data.buttonTouchedColor;\n        break;\n      default:\n        color = this.data.buttonColor;\n    }\n    buttonMeshes[buttonName].material.color.set(color);\n  }\n});\n"]},"metadata":{},"sourceType":"script"}