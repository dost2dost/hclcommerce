{"ast":null,"code":"var debugLib = require('debug');\n\nvar extend = require('object-assign');\n\nvar settings = {\n  colors: {\n    debug: 'gray',\n    error: 'red',\n    info: 'gray',\n    warn: 'orange'\n  }\n};\n/**\n * Monkeypatches `debug` so we can colorize error/warning messages.\n *\n * (See issue: https://github.com/visionmedia/debug/issues/137)\n */\n\nvar debug = function (namespace) {\n  var d = debugLib(namespace);\n  d.color = getDebugNamespaceColor(namespace);\n  return d;\n};\n\nextend(debug, debugLib);\n/**\n * Returns the type of the namespace (e.g., `error`, `warn`).\n *\n * @param {String} namespace\n *   The debug logger's namespace (e.g., `components:geometry:warn`).\n * @returns {String} The type of the namespace (e.g., `warn`).\n * @api private\n */\n\nfunction getDebugNamespaceType(namespace) {\n  var chunks = namespace.split(':');\n  return chunks[chunks.length - 1]; // Return the last one\n}\n/**\n * Returns the color of the namespace (e.g., `orange`).\n *\n * @param {String} namespace\n *   The debug logger's namespace (e.g., `components:geometry:warn`).\n * @returns {String} The color of the namespace (e.g., `orange`).\n * @api private\n */\n\n\nfunction getDebugNamespaceColor(namespace) {\n  var type = getDebugNamespaceType(namespace);\n  var color = settings.colors && settings.colors[type];\n  return color || null;\n}\n/**\n * Returns `localStorage` if possible.\n *\n * This is necessary because Safari throws when a user disables\n * cookies or `localStorage` and you attempt to access it.\n *\n * @returns {localStorage}\n * @api private\n */\n\n\nfunction storage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n/**\n * To enable console logging, type this in the Console of your Dev Tools:\n *\n *   localStorage.logs = 1\n *\n * To disable console logging:\n *\n *   localStorage.logs = 0\n *\n */\n\n\nvar ls = storage();\n\nif (ls && (parseInt(ls.logs, 10) || ls.logs === 'true')) {\n  debug.enable('*');\n} else {\n  debug.enable('*:error,*:info,*:warn');\n}\n\nif (process.browser) {\n  window.logs = debug;\n}\n\nmodule.exports = debug;","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/utils/debug.js"],"names":["debugLib","require","extend","settings","colors","debug","error","info","warn","namespace","d","color","getDebugNamespaceColor","getDebugNamespaceType","chunks","split","length","type","storage","window","localStorage","e","ls","parseInt","logs","enable","process","browser","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,OAAD,CAAtB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAApB;;AAEA,IAAIE,QAAQ,GAAG;AACbC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE,MADD;AAENC,IAAAA,KAAK,EAAE,KAFD;AAGNC,IAAAA,IAAI,EAAE,MAHA;AAINC,IAAAA,IAAI,EAAE;AAJA;AADK,CAAf;AASA;;;;;;AAKA,IAAIH,KAAK,GAAG,UAAUI,SAAV,EAAqB;AAC/B,MAAIC,CAAC,GAAGV,QAAQ,CAACS,SAAD,CAAhB;AAEAC,EAAAA,CAAC,CAACC,KAAF,GAAUC,sBAAsB,CAACH,SAAD,CAAhC;AAEA,SAAOC,CAAP;AACD,CAND;;AAOAR,MAAM,CAACG,KAAD,EAAQL,QAAR,CAAN;AAEA;;;;;;;;;AAQA,SAASa,qBAAT,CAAgCJ,SAAhC,EAA2C;AACzC,MAAIK,MAAM,GAAGL,SAAS,CAACM,KAAV,CAAgB,GAAhB,CAAb;AAEA,SAAOD,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAb,CAHyC,CAGN;AACpC;AAED;;;;;;;;;;AAQA,SAASJ,sBAAT,CAAiCH,SAAjC,EAA4C;AAC1C,MAAIQ,IAAI,GAAGJ,qBAAqB,CAACJ,SAAD,CAAhC;AAEA,MAAIE,KAAK,GAAGR,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,CAAgBa,IAAhB,CAA/B;AAEA,SAAON,KAAK,IAAI,IAAhB;AACD;AAED;;;;;;;;;;;AASA,SAASO,OAAT,GAAoB;AAClB,MAAI;AACF,WAAOC,MAAM,CAACC,YAAd;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU,CACX;AACF;AAED;;;;;;;;;;;;AAUA,IAAIC,EAAE,GAAGJ,OAAO,EAAhB;;AACA,IAAII,EAAE,KAAKC,QAAQ,CAACD,EAAE,CAACE,IAAJ,EAAU,EAAV,CAAR,IAAyBF,EAAE,CAACE,IAAH,KAAY,MAA1C,CAAN,EAAyD;AACvDnB,EAAAA,KAAK,CAACoB,MAAN,CAAa,GAAb;AACD,CAFD,MAEO;AACLpB,EAAAA,KAAK,CAACoB,MAAN,CAAa,uBAAb;AACD;;AAED,IAAIC,OAAO,CAACC,OAAZ,EAAqB;AAAER,EAAAA,MAAM,CAACK,IAAP,GAAcnB,KAAd;AAAsB;;AAE7CuB,MAAM,CAACC,OAAP,GAAiBxB,KAAjB","sourcesContent":["var debugLib = require('debug');\nvar extend = require('object-assign');\n\nvar settings = {\n  colors: {\n    debug: 'gray',\n    error: 'red',\n    info: 'gray',\n    warn: 'orange'\n  }\n};\n\n/**\n * Monkeypatches `debug` so we can colorize error/warning messages.\n *\n * (See issue: https://github.com/visionmedia/debug/issues/137)\n */\nvar debug = function (namespace) {\n  var d = debugLib(namespace);\n\n  d.color = getDebugNamespaceColor(namespace);\n\n  return d;\n};\nextend(debug, debugLib);\n\n/**\n * Returns the type of the namespace (e.g., `error`, `warn`).\n *\n * @param {String} namespace\n *   The debug logger's namespace (e.g., `components:geometry:warn`).\n * @returns {String} The type of the namespace (e.g., `warn`).\n * @api private\n */\nfunction getDebugNamespaceType (namespace) {\n  var chunks = namespace.split(':');\n\n  return chunks[chunks.length - 1];  // Return the last one\n}\n\n/**\n * Returns the color of the namespace (e.g., `orange`).\n *\n * @param {String} namespace\n *   The debug logger's namespace (e.g., `components:geometry:warn`).\n * @returns {String} The color of the namespace (e.g., `orange`).\n * @api private\n */\nfunction getDebugNamespaceColor (namespace) {\n  var type = getDebugNamespaceType(namespace);\n\n  var color = settings.colors && settings.colors[type];\n\n  return color || null;\n}\n\n/**\n * Returns `localStorage` if possible.\n *\n * This is necessary because Safari throws when a user disables\n * cookies or `localStorage` and you attempt to access it.\n *\n * @returns {localStorage}\n * @api private\n */\nfunction storage () {\n  try {\n    return window.localStorage;\n  } catch (e) {\n  }\n}\n\n/**\n * To enable console logging, type this in the Console of your Dev Tools:\n *\n *   localStorage.logs = 1\n *\n * To disable console logging:\n *\n *   localStorage.logs = 0\n *\n */\nvar ls = storage();\nif (ls && (parseInt(ls.logs, 10) || ls.logs === 'true')) {\n  debug.enable('*');\n} else {\n  debug.enable('*:error,*:info,*:warn');\n}\n\nif (process.browser) { window.logs = debug; }\n\nmodule.exports = debug;\n"]},"metadata":{},"sourceType":"script"}