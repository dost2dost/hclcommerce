{"ast":null,"code":"var registerSystem = require('../core/system').registerSystem;\n\nvar utils = require('../utils');\n\nvar isWebXRAvailable = utils.device.isWebXRAvailable;\n/**\n * Tracked controls system.\n * Maintain list with available tracked controllers.\n */\n\nmodule.exports.System = registerSystem('tracked-controls-webvr', {\n  init: function () {\n    var self = this;\n    this.controllers = [];\n    this.isChrome = navigator.userAgent.indexOf('Chrome') !== -1;\n    this.updateControllerList();\n    this.throttledUpdateControllerList = utils.throttle(this.updateControllerList, 500, this); // Don't use WebVR if WebXR is available?\n\n    if (isWebXRAvailable) {\n      return;\n    }\n\n    if (!navigator.getVRDisplays) {\n      return;\n    }\n\n    this.sceneEl.addEventListener('enter-vr', function () {\n      navigator.getVRDisplays().then(function (displays) {\n        if (displays.length) {\n          self.vrDisplay = displays[0];\n        }\n      });\n    });\n  },\n  tick: function () {\n    if (this.isChrome) {\n      // Retrieve new controller handlers with updated state (pose, buttons...)\n      this.updateControllerList();\n    } else {\n      this.throttledUpdateControllerList();\n    }\n  },\n\n  /**\n   * Update controller list.\n   */\n  updateControllerList: function () {\n    var controllers = this.controllers;\n    var gamepad;\n    var gamepads;\n    var i;\n    var prevCount;\n    gamepads = navigator.getGamepads && navigator.getGamepads();\n\n    if (!gamepads) {\n      return;\n    }\n\n    prevCount = controllers.length;\n    controllers.length = 0;\n\n    for (i = 0; i < gamepads.length; ++i) {\n      gamepad = gamepads[i];\n\n      if (gamepad && gamepad.pose) {\n        controllers.push(gamepad);\n      }\n    }\n\n    if (controllers.length !== prevCount) {\n      this.el.emit('controllersupdated', undefined, false);\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/systems/tracked-controls-webvr.js"],"names":["registerSystem","require","utils","isWebXRAvailable","device","module","exports","System","init","self","controllers","isChrome","navigator","userAgent","indexOf","updateControllerList","throttledUpdateControllerList","throttle","getVRDisplays","sceneEl","addEventListener","then","displays","length","vrDisplay","tick","gamepad","gamepads","i","prevCount","getGamepads","pose","push","el","emit","undefined"],"mappings":"AAAA,IAAIA,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BD,cAA/C;;AACA,IAAIE,KAAK,GAAGD,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIE,gBAAgB,GAAGD,KAAK,CAACE,MAAN,CAAaD,gBAApC;AAEA;;;;;AAIAE,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwBP,cAAc,CAAC,wBAAD,EAA2B;AAC/DQ,EAAAA,IAAI,EAAE,YAAY;AAChB,QAAIC,IAAI,GAAG,IAAX;AAEA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,QAAL,GAAgBC,SAAS,CAACC,SAAV,CAAoBC,OAApB,CAA4B,QAA5B,MAA0C,CAAC,CAA3D;AAEA,SAAKC,oBAAL;AACA,SAAKC,6BAAL,GAAqCd,KAAK,CAACe,QAAN,CAAe,KAAKF,oBAApB,EAA0C,GAA1C,EAA+C,IAA/C,CAArC,CAPgB,CAShB;;AACA,QAAIZ,gBAAJ,EAAsB;AAAE;AAAS;;AAEjC,QAAI,CAACS,SAAS,CAACM,aAAf,EAA8B;AAAE;AAAS;;AAEzC,SAAKC,OAAL,CAAaC,gBAAb,CAA8B,UAA9B,EAA0C,YAAY;AACpDR,MAAAA,SAAS,CAACM,aAAV,GAA0BG,IAA1B,CAA+B,UAAUC,QAAV,EAAoB;AACjD,YAAIA,QAAQ,CAACC,MAAb,EAAqB;AAAEd,UAAAA,IAAI,CAACe,SAAL,GAAiBF,QAAQ,CAAC,CAAD,CAAzB;AAA+B;AACvD,OAFD;AAGD,KAJD;AAKD,GApB8D;AAsB/DG,EAAAA,IAAI,EAAE,YAAY;AAChB,QAAI,KAAKd,QAAT,EAAmB;AACjB;AACA,WAAKI,oBAAL;AACD,KAHD,MAGO;AACL,WAAKC,6BAAL;AACD;AACF,GA7B8D;;AA+B/D;;;AAGAD,EAAAA,oBAAoB,EAAE,YAAY;AAChC,QAAIL,WAAW,GAAG,KAAKA,WAAvB;AACA,QAAIgB,OAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,CAAJ;AACA,QAAIC,SAAJ;AAEAF,IAAAA,QAAQ,GAAGf,SAAS,CAACkB,WAAV,IAAyBlB,SAAS,CAACkB,WAAV,EAApC;;AACA,QAAI,CAACH,QAAL,EAAe;AAAE;AAAS;;AAE1BE,IAAAA,SAAS,GAAGnB,WAAW,CAACa,MAAxB;AACAb,IAAAA,WAAW,CAACa,MAAZ,GAAqB,CAArB;;AACA,SAAKK,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,QAAQ,CAACJ,MAAzB,EAAiC,EAAEK,CAAnC,EAAsC;AACpCF,MAAAA,OAAO,GAAGC,QAAQ,CAACC,CAAD,CAAlB;;AACA,UAAIF,OAAO,IAAIA,OAAO,CAACK,IAAvB,EAA6B;AAC3BrB,QAAAA,WAAW,CAACsB,IAAZ,CAAiBN,OAAjB;AACD;AACF;;AAED,QAAIhB,WAAW,CAACa,MAAZ,KAAuBM,SAA3B,EAAsC;AACpC,WAAKI,EAAL,CAAQC,IAAR,CAAa,oBAAb,EAAmCC,SAAnC,EAA8C,KAA9C;AACD;AACF;AAxD8D,CAA3B,CAAtC","sourcesContent":["var registerSystem = require('../core/system').registerSystem;\nvar utils = require('../utils');\nvar isWebXRAvailable = utils.device.isWebXRAvailable;\n\n/**\n * Tracked controls system.\n * Maintain list with available tracked controllers.\n */\nmodule.exports.System = registerSystem('tracked-controls-webvr', {\n  init: function () {\n    var self = this;\n\n    this.controllers = [];\n    this.isChrome = navigator.userAgent.indexOf('Chrome') !== -1;\n\n    this.updateControllerList();\n    this.throttledUpdateControllerList = utils.throttle(this.updateControllerList, 500, this);\n\n    // Don't use WebVR if WebXR is available?\n    if (isWebXRAvailable) { return; }\n\n    if (!navigator.getVRDisplays) { return; }\n\n    this.sceneEl.addEventListener('enter-vr', function () {\n      navigator.getVRDisplays().then(function (displays) {\n        if (displays.length) { self.vrDisplay = displays[0]; }\n      });\n    });\n  },\n\n  tick: function () {\n    if (this.isChrome) {\n      // Retrieve new controller handlers with updated state (pose, buttons...)\n      this.updateControllerList();\n    } else {\n      this.throttledUpdateControllerList();\n    }\n  },\n\n  /**\n   * Update controller list.\n   */\n  updateControllerList: function () {\n    var controllers = this.controllers;\n    var gamepad;\n    var gamepads;\n    var i;\n    var prevCount;\n\n    gamepads = navigator.getGamepads && navigator.getGamepads();\n    if (!gamepads) { return; }\n\n    prevCount = controllers.length;\n    controllers.length = 0;\n    for (i = 0; i < gamepads.length; ++i) {\n      gamepad = gamepads[i];\n      if (gamepad && gamepad.pose) {\n        controllers.push(gamepad);\n      }\n    }\n\n    if (controllers.length !== prevCount) {\n      this.el.emit('controllersupdated', undefined, false);\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}