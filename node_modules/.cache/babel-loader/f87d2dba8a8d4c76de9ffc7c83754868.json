{"ast":null,"code":"var register = require('../../core/component').registerComponent;\n\nvar THREE = require('../../lib/three');\n\nvar debug = require('../../utils/debug');\n\nvar warn = debug('components:fog:warn');\n/**\n * Fog component.\n * Applies only to the scene entity.\n */\n\nmodule.exports.Component = register('fog', {\n  schema: {\n    color: {\n      type: 'color',\n      default: '#000'\n    },\n    density: {\n      default: 0.00025\n    },\n    far: {\n      default: 1000,\n      min: 0\n    },\n    near: {\n      default: 1,\n      min: 0\n    },\n    type: {\n      default: 'linear',\n      oneOf: ['linear', 'exponential']\n    }\n  },\n  update: function () {\n    var data = this.data;\n    var el = this.el;\n    var fog = this.el.object3D.fog;\n\n    if (!el.isScene) {\n      warn('Fog component can only be applied to <a-scene>');\n      return;\n    } // (Re)create fog if fog doesn't exist or fog type changed.\n\n\n    if (!fog || data.type !== fog.name) {\n      el.object3D.fog = getFog(data);\n      el.systems.material.updateMaterials();\n      return;\n    } // Fog data changed. Update fog.\n\n\n    Object.keys(this.schema).forEach(function (key) {\n      var value = data[key];\n\n      if (key === 'color') {\n        value = new THREE.Color(value);\n      }\n\n      fog[key] = value;\n    });\n  },\n\n  /**\n   * Remove fog on remove (callback).\n   */\n  remove: function () {\n    var fog = this.el.object3D.fog;\n\n    if (!fog) {\n      return;\n    }\n\n    fog.far = 0;\n    fog.near = 0.1;\n  }\n});\n/**\n * Creates a fog object. Sets fog.name to be able to detect fog type changes.\n *\n * @param {object} data - Fog data.\n * @returns {object} fog\n */\n\nfunction getFog(data) {\n  var fog;\n\n  if (data.type === 'exponential') {\n    fog = new THREE.FogExp2(data.color, data.density);\n  } else {\n    fog = new THREE.Fog(data.color, data.near, data.far);\n  }\n\n  fog.name = data.type;\n  return fog;\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/scene/fog.js"],"names":["register","require","registerComponent","THREE","debug","warn","module","exports","Component","schema","color","type","default","density","far","min","near","oneOf","update","data","el","fog","object3D","isScene","name","getFog","systems","material","updateMaterials","Object","keys","forEach","key","value","Color","remove","FogExp2","Fog"],"mappings":"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","sourcesContent":["var register = require('../../core/component').registerComponent;\nvar THREE = require('../../lib/three');\nvar debug = require('../../utils/debug');\n\nvar warn = debug('components:fog:warn');\n\n/**\n * Fog component.\n * Applies only to the scene entity.\n */\nmodule.exports.Component = register('fog', {\n  schema: {\n    color: {type: 'color', default: '#000'},\n    density: {default: 0.00025},\n    far: {default: 1000, min: 0},\n    near: {default: 1, min: 0},\n    type: {default: 'linear', oneOf: ['linear', 'exponential']}\n  },\n\n  update: function () {\n    var data = this.data;\n    var el = this.el;\n    var fog = this.el.object3D.fog;\n\n    if (!el.isScene) {\n      warn('Fog component can only be applied to <a-scene>');\n      return;\n    }\n\n    // (Re)create fog if fog doesn't exist or fog type changed.\n    if (!fog || data.type !== fog.name) {\n      el.object3D.fog = getFog(data);\n      el.systems.material.updateMaterials();\n      return;\n    }\n\n    // Fog data changed. Update fog.\n    Object.keys(this.schema).forEach(function (key) {\n      var value = data[key];\n      if (key === 'color') { value = new THREE.Color(value); }\n      fog[key] = value;\n    });\n  },\n\n  /**\n   * Remove fog on remove (callback).\n   */\n  remove: function () {\n    var fog = this.el.object3D.fog;\n    if (!fog) { return; }\n    fog.far = 0;\n    fog.near = 0.1;\n  }\n});\n\n/**\n * Creates a fog object. Sets fog.name to be able to detect fog type changes.\n *\n * @param {object} data - Fog data.\n * @returns {object} fog\n */\nfunction getFog (data) {\n  var fog;\n  if (data.type === 'exponential') {\n    fog = new THREE.FogExp2(data.color, data.density);\n  } else {\n    fog = new THREE.Fog(data.color, data.near, data.far);\n  }\n  fog.name = data.type;\n  return fog;\n}\n"]},"metadata":{},"sourceType":"script"}