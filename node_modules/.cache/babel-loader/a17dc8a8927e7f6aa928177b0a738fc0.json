{"ast":null,"code":"var bind = require('../../utils/bind');\n\nvar isIframed = require('../../utils/').isIframed;\n/**\n * Provides a post message API for scenes contained\n * in an iframe.\n */\n\n\nmodule.exports = function initPostMessageAPI(scene) {\n  // Handles fullscreen behavior when inside an iframe.\n  if (!isIframed()) {\n    return;\n  } // postMessage API handler\n\n\n  window.addEventListener('message', bind(postMessageAPIHandler, scene));\n};\n\nfunction postMessageAPIHandler(event) {\n  var scene = this;\n\n  if (!event.data) {\n    return;\n  }\n\n  switch (event.data.type) {\n    case 'vr':\n      {\n        switch (event.data.data) {\n          case 'enter':\n            scene.enterVR();\n            break;\n\n          case 'exit':\n            scene.exitVR();\n            break;\n        }\n      }\n  }\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/core/scene/postMessage.js"],"names":["bind","require","isIframed","module","exports","initPostMessageAPI","scene","window","addEventListener","postMessageAPIHandler","event","data","type","enterVR","exitVR"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAAlB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAP,CAAwBC,SAAxC;AAEA;;;;;;AAIAC,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA6BC,KAA7B,EAAoC;AACnD;AACA,MAAI,CAACJ,SAAS,EAAd,EAAkB;AAAE;AAAS,GAFsB,CAGnD;;;AACAK,EAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCR,IAAI,CAACS,qBAAD,EAAwBH,KAAxB,CAAvC;AACD,CALD;;AAOA,SAASG,qBAAT,CAAgCC,KAAhC,EAAuC;AACrC,MAAIJ,KAAK,GAAG,IAAZ;;AACA,MAAI,CAACI,KAAK,CAACC,IAAX,EAAiB;AAAE;AAAS;;AAE5B,UAAQD,KAAK,CAACC,IAAN,CAAWC,IAAnB;AACE,SAAK,IAAL;AAAW;AACT,gBAAQF,KAAK,CAACC,IAAN,CAAWA,IAAnB;AACE,eAAK,OAAL;AACEL,YAAAA,KAAK,CAACO,OAAN;AACA;;AACF,eAAK,MAAL;AACEP,YAAAA,KAAK,CAACQ,MAAN;AACA;AANJ;AAQD;AAVH;AAYD","sourcesContent":["var bind = require('../../utils/bind');\nvar isIframed = require('../../utils/').isIframed;\n\n/**\n * Provides a post message API for scenes contained\n * in an iframe.\n */\nmodule.exports = function initPostMessageAPI (scene) {\n  // Handles fullscreen behavior when inside an iframe.\n  if (!isIframed()) { return; }\n  // postMessage API handler\n  window.addEventListener('message', bind(postMessageAPIHandler, scene));\n};\n\nfunction postMessageAPIHandler (event) {\n  var scene = this;\n  if (!event.data) { return; }\n\n  switch (event.data.type) {\n    case 'vr': {\n      switch (event.data.data) {\n        case 'enter':\n          scene.enterVR();\n          break;\n        case 'exit':\n          scene.exitVR();\n          break;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}