{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const assertContext = context => {\n  if (context == null) {\n    throw new Error('WebGL is not available!');\n  }\n\n  return context;\n};\nexport const getContext = (canvas, options) => assertContext(canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options));\n/**\n * Patch the values reported by WebGLRenderingContext's\n * extension store to fix compatibility issues.\n */\n\nexport const applyExtensionCompatibility = gl => {\n  const testShaders = {\n    // In some Firefox builds (mobile Android on Pixel at least),\n    // EXT_shader_texture_lod is reported as being supported, but\n    // fails in practice.\n    // @see https://bugzilla.mozilla.org/show_bug.cgi?id=1451287\n    'EXT_shader_texture_lod': `\n      #extension GL_EXT_shader_texture_lod : enable\n      precision mediump float;\n      uniform sampler2D tex;\n      void main() {\n        gl_FragColor = texture2DLodEXT(tex, vec2(0.0, 0.0), 0.0);\n      }`\n  };\n\n  function confirmExtension(gl, name) {\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(shader, testShaders[name]);\n    gl.compileShader(shader);\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    gl.deleteShader(shader);\n    return status;\n  }\n\n  const getExtension = gl.getExtension;\n\n  gl.getExtension = name => {\n    let extension;\n\n    if (testShaders[name]) {\n      extension = getExtension.call(gl, name);\n\n      if (extension && !confirmExtension(gl, name)) {\n        extension = null;\n      }\n    } else {\n      extension = getExtension.call(gl, name);\n    }\n\n    return extension;\n  };\n};","map":{"version":3,"sources":["../../src/three-components/WebGLUtils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAeA,OAAO,MAAM,aAAa,GACrB,OAAD,IAA+D;AAC7D,MAAI,OAAO,IAAI,IAAf,EAAqB;AACnB,UAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,SAAO,OAAP;AACD,CANE;AAQP,OAAO,MAAM,UAAU,GACnB,CAAC,MAAD,EACC,OADD,KAEI,aAAa,CACT,MAAM,CAAC,UAAP,CAAkB,OAAlB,EAA2B,OAA3B,KACA,MAAM,CAAC,UAAP,CAAkB,oBAAlB,EAAwC,OAAxC,CAFS,CAHd;AASP;;;;;AAIA,OAAO,MAAM,2BAA2B,GAAI,EAAD,IAA8B;AACvE,QAAM,WAAW,GAA8B;AAC7C;AACA;AACA;AACA;AACA,8BAA0B;;;;;;;AALmB,GAA/C;;AAcA,WAAS,gBAAT,CAA0B,EAA1B,EAAqD,IAArD,EAAiE;AAC/D,UAAM,MAAM,GAAG,EAAE,CAAC,YAAH,CAAgB,EAAE,CAAC,eAAnB,CAAf;AACA,IAAA,EAAE,CAAC,YAAH,CAAgB,MAAhB,EAAyB,WAAW,CAAC,IAAD,CAApC;AACA,IAAA,EAAE,CAAC,aAAH,CAAiB,MAAjB;AAEA,UAAM,MAAM,GAAG,EAAE,CAAC,kBAAH,CAAsB,MAAtB,EAA+B,EAAE,CAAC,cAAlC,CAAf;AAEA,IAAA,EAAE,CAAC,YAAH,CAAgB,MAAhB;AACA,WAAO,MAAP;AACD;;AAED,QAAM,YAAY,GAAG,EAAE,CAAC,YAAxB;;AACA,EAAA,EAAE,CAAC,YAAH,GAAmB,IAAD,IAAiB;AACjC,QAAI,SAAJ;;AAEA,QAAI,WAAW,CAAC,IAAD,CAAf,EAAuB;AACrB,MAAA,SAAS,GAAG,YAAY,CAAC,IAAb,CAAkB,EAAlB,EAAsB,IAAtB,CAAZ;;AACA,UAAI,SAAS,IAAI,CAAC,gBAAgB,CAAC,EAAD,EAAK,IAAL,CAAlC,EAA8C;AAC5C,QAAA,SAAS,GAAG,IAAZ;AACD;AACF,KALD,MAKO;AACL,MAAA,SAAS,GAAG,YAAY,CAAC,IAAb,CAAkB,EAAlB,EAAsB,IAAtB,CAAZ;AACD;;AAED,WAAO,SAAP;AACD,GAbD;AAcD,CAzCM","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const assertContext =\n    (context: WebGLRenderingContext|null): WebGLRenderingContext => {\n      if (context == null) {\n        throw new Error('WebGL is not available!');\n      }\n      return context;\n    };\n\nexport const getContext =\n    (canvas: HTMLCanvasElement|OffscreenCanvas,\n     options: WebGLContextAttributes): WebGLRenderingContext =>\n        assertContext(\n            canvas.getContext('webgl', options) ||\n            canvas.getContext('experimental-webgl', options) as\n                    WebGLRenderingContext |\n                null);\n\n/**\n * Patch the values reported by WebGLRenderingContext's\n * extension store to fix compatibility issues.\n */\nexport const applyExtensionCompatibility = (gl: WebGLRenderingContext) => {\n  const testShaders: {[index: string]: string} = {\n    // In some Firefox builds (mobile Android on Pixel at least),\n    // EXT_shader_texture_lod is reported as being supported, but\n    // fails in practice.\n    // @see https://bugzilla.mozilla.org/show_bug.cgi?id=1451287\n    'EXT_shader_texture_lod': `\n      #extension GL_EXT_shader_texture_lod : enable\n      precision mediump float;\n      uniform sampler2D tex;\n      void main() {\n        gl_FragColor = texture2DLodEXT(tex, vec2(0.0, 0.0), 0.0);\n      }`,\n  };\n\n  function confirmExtension(gl: WebGLRenderingContext, name: string) {\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(shader!, testShaders[name]);\n    gl.compileShader(shader!);\n\n    const status = gl.getShaderParameter(shader!, gl.COMPILE_STATUS);\n\n    gl.deleteShader(shader);\n    return status;\n  }\n\n  const getExtension = gl.getExtension;\n  gl.getExtension = (name: string) => {\n    let extension;\n\n    if (testShaders[name]) {\n      extension = getExtension.call(gl, name);\n      if (extension && !confirmExtension(gl, name)) {\n        extension = null;\n      }\n    } else {\n      extension = getExtension.call(gl, name);\n    }\n\n    return extension;\n  };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}