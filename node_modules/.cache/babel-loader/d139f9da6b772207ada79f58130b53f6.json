{"ast":null,"code":"var registerComponent = require('../core/component').registerComponent;\n\nvar bind = require('../utils/bind');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\n\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\nvar GAMEPAD_ID_PREFIX = 'generic';\n/**\n * Button indices:\n * 0 - trigger\n * 1 - squeeze\n * 2 - touchpad\n * 3 - thumbstick\n *\n * Axis:\n * 0 - touchpad\n * 1 - thumbstick\n *\n */\n\nvar INPUT_MAPPING = {\n  axes: {\n    touchpad: [0, 1],\n    thumbstick: [2, 3]\n  },\n  buttons: ['trigger', 'squeeze', 'touchpad', 'thumbstick']\n};\n/**\n * Oculus Go controls.\n * Interface with Oculus Go controller and map Gamepad events to\n * controller buttons: trackpad, trigger\n * Load a controller model and highlight the pressed buttons.\n */\n\nmodule.exports.Component = registerComponent('generic-tracked-controller-controls', {\n  schema: {\n    hand: {\n      default: ''\n    },\n    // This informs the degenerate arm model.\n    defaultModel: {\n      default: true\n    },\n    defaultModelColor: {\n      default: 'gray'\n    },\n    orientationOffset: {\n      type: 'vec3'\n    }\n  },\n\n  /**\n   * Button IDs:\n   * 0 - trackpad\n   * 1 - trigger\n   */\n  mapping: INPUT_MAPPING,\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.removeControllersUpdateListener = bind(this.removeControllersUpdateListener, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n  init: function () {\n    var self = this;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n\n    this.onButtonDown = function (evt) {\n      onButtonEvent(evt.detail.id, 'down', self);\n    };\n\n    this.onButtonUp = function (evt) {\n      onButtonEvent(evt.detail.id, 'up', self);\n    };\n\n    this.onButtonTouchStart = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchstart', self);\n    };\n\n    this.onButtonTouchEnd = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchend', self);\n    };\n\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n    this.bindMethods();\n  },\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    el.addEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = true;\n  },\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = false;\n  },\n  checkIfControllerPresent: function () {\n    var data = this.data;\n    var hand = data.hand ? data.hand : undefined;\n    checkControllerPresentAndSetup(this, GAMEPAD_ID_PREFIX, {\n      hand: hand,\n      iterateControllerProfiles: true\n    });\n  },\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n  injectTrackedControls: function () {\n    var el = this.el;\n    var data = this.data; // Do nothing if tracked-controls already set.\n    // Generic controls have the lowest precedence.\n\n    if (this.el.components['tracked-controls']) {\n      return;\n    }\n\n    el.setAttribute('tracked-controls', {\n      hand: data.hand,\n      idPrefix: GAMEPAD_ID_PREFIX,\n      orientationOffset: data.orientationOffset,\n      iterateControllerProfiles: true\n    });\n\n    if (!this.data.defaultModel) {\n      return;\n    }\n\n    this.initDefaultModel();\n  },\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  onControllersUpdate: function () {\n    this.checkIfControllerPresent();\n  },\n  onButtonChanged: function (evt) {\n    var button = this.mapping.buttons[evt.detail.id];\n    if (!button) return; // Pass along changed event with button state, using button mapping for convenience.\n\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping.axes, evt);\n  },\n  initDefaultModel: function () {\n    var modelEl = this.modelEl = document.createElement('a-entity');\n    modelEl.setAttribute('geometry', {\n      primitive: 'sphere',\n      radius: 0.03\n    });\n    modelEl.setAttribute('material', {\n      color: this.data.color\n    });\n    this.el.appendChild(modelEl);\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/generic-tracked-controller-controls.js"],"names":["registerComponent","require","bind","trackedControlsUtils","checkControllerPresentAndSetup","emitIfAxesChanged","onButtonEvent","GAMEPAD_ID_PREFIX","INPUT_MAPPING","axes","touchpad","thumbstick","buttons","module","exports","Component","schema","hand","default","defaultModel","defaultModelColor","orientationOffset","type","mapping","bindMethods","onModelLoaded","onControllersUpdate","checkIfControllerPresent","removeControllersUpdateListener","onAxisMoved","init","self","onButtonChanged","onButtonDown","evt","detail","id","onButtonUp","onButtonTouchStart","onButtonTouchEnd","controllerPresent","lastControllerCheck","rendererSystem","el","sceneEl","systems","renderer","addEventListeners","addEventListener","controllerEventsActive","removeEventListeners","removeEventListener","data","undefined","iterateControllerProfiles","play","addControllersUpdateListener","pause","injectTrackedControls","components","setAttribute","idPrefix","initDefaultModel","button","emit","state","modelEl","document","createElement","primitive","radius","color","appendChild"],"mappings":"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","sourcesContent":["var registerComponent = require('../core/component').registerComponent;\nvar bind = require('../utils/bind');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\n\nvar GAMEPAD_ID_PREFIX = 'generic';\n\n/**\n * Button indices:\n * 0 - trigger\n * 1 - squeeze\n * 2 - touchpad\n * 3 - thumbstick\n *\n * Axis:\n * 0 - touchpad\n * 1 - thumbstick\n *\n */\nvar INPUT_MAPPING = {\n  axes: {\n    touchpad: [0, 1],\n    thumbstick: [2, 3]\n  },\n  buttons: ['trigger', 'squeeze', 'touchpad', 'thumbstick']\n};\n\n/**\n * Oculus Go controls.\n * Interface with Oculus Go controller and map Gamepad events to\n * controller buttons: trackpad, trigger\n * Load a controller model and highlight the pressed buttons.\n */\nmodule.exports.Component = registerComponent('generic-tracked-controller-controls', {\n  schema: {\n    hand: {default: ''},  // This informs the degenerate arm model.\n    defaultModel: {default: true},\n    defaultModelColor: {default: 'gray'},\n    orientationOffset: {type: 'vec3'}\n  },\n\n  /**\n   * Button IDs:\n   * 0 - trackpad\n   * 1 - trigger\n   */\n  mapping: INPUT_MAPPING,\n\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.removeControllersUpdateListener = bind(this.removeControllersUpdateListener, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n\n  init: function () {\n    var self = this;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n    this.onButtonDown = function (evt) { onButtonEvent(evt.detail.id, 'down', self); };\n    this.onButtonUp = function (evt) { onButtonEvent(evt.detail.id, 'up', self); };\n    this.onButtonTouchStart = function (evt) { onButtonEvent(evt.detail.id, 'touchstart', self); };\n    this.onButtonTouchEnd = function (evt) { onButtonEvent(evt.detail.id, 'touchend', self); };\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n    this.bindMethods();\n  },\n\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    el.addEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = true;\n  },\n\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = false;\n  },\n\n  checkIfControllerPresent: function () {\n    var data = this.data;\n    var hand = data.hand ? data.hand : undefined;\n    checkControllerPresentAndSetup(\n      this, GAMEPAD_ID_PREFIX,\n      {hand: hand, iterateControllerProfiles: true});\n  },\n\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n\n  injectTrackedControls: function () {\n    var el = this.el;\n    var data = this.data;\n    // Do nothing if tracked-controls already set.\n    // Generic controls have the lowest precedence.\n    if (this.el.components['tracked-controls']) { return; }\n    el.setAttribute('tracked-controls', {\n      hand: data.hand,\n      idPrefix: GAMEPAD_ID_PREFIX,\n      orientationOffset: data.orientationOffset,\n      iterateControllerProfiles: true\n    });\n    if (!this.data.defaultModel) { return; }\n    this.initDefaultModel();\n  },\n\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  onControllersUpdate: function () {\n    this.checkIfControllerPresent();\n  },\n\n  onButtonChanged: function (evt) {\n    var button = this.mapping.buttons[evt.detail.id];\n    if (!button) return;\n    // Pass along changed event with button state, using button mapping for convenience.\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping.axes, evt);\n  },\n\n  initDefaultModel: function () {\n    var modelEl = this.modelEl = document.createElement('a-entity');\n    modelEl.setAttribute('geometry', {\n      primitive: 'sphere',\n      radius: 0.03\n    });\n    modelEl.setAttribute('material', {color: this.data.color});\n    this.el.appendChild(modelEl);\n  }\n});\n"]},"metadata":{},"sourceType":"script"}