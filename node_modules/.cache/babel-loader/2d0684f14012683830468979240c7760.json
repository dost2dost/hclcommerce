{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { property } from 'lit-element';\nimport { $isElementInViewport, $needsRender, $onModelLoad, $progressTracker, $renderer, $scene } from '../model-viewer-base.js';\nimport { deserializeUrl } from '../utilities.js';\nexport const BASE_OPACITY = 0.1;\nconst DEFAULT_SHADOW_INTENSITY = 0.0;\nconst DEFAULT_SHADOW_SOFTNESS = 1.0;\nconst DEFAULT_EXPOSURE = 1.0;\nconst $currentEnvironmentMap = Symbol('currentEnvironmentMap');\nconst $applyEnvironmentMap = Symbol('applyEnvironmentMap');\nconst $updateEnvironment = Symbol('updateEnvironment');\nconst $cancelEnvironmentUpdate = Symbol('cancelEnvironmentUpdate');\nexport const EnvironmentMixin = ModelViewerElement => {\n  var _a, _b;\n\n  class EnvironmentModelViewerElement extends ModelViewerElement {\n    constructor() {\n      super(...arguments);\n      this.environmentImage = null;\n      this.skyboxImage = null;\n      this.shadowIntensity = DEFAULT_SHADOW_INTENSITY;\n      this.shadowSoftness = DEFAULT_SHADOW_SOFTNESS;\n      this.exposure = DEFAULT_EXPOSURE;\n      this[_a] = null;\n      this[_b] = null;\n    }\n\n    updated(changedProperties) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('shadowIntensity')) {\n        this[$scene].setShadowIntensity(this.shadowIntensity * BASE_OPACITY);\n        this[$needsRender]();\n      }\n\n      if (changedProperties.has('shadowSoftness')) {\n        this[$scene].setShadowSoftness(this.shadowSoftness);\n        this[$needsRender]();\n      }\n\n      if (changedProperties.has('exposure')) {\n        this[$scene].exposure = this.exposure;\n        this[$needsRender]();\n      }\n\n      if (changedProperties.has('environmentImage') || changedProperties.has('skyboxImage') || changedProperties.has($isElementInViewport)) {\n        this[$updateEnvironment]();\n      }\n    }\n\n    [(_a = $currentEnvironmentMap, _b = $cancelEnvironmentUpdate, $onModelLoad)](event) {\n      super[$onModelLoad](event);\n\n      if (this[$currentEnvironmentMap] != null) {\n        this[$applyEnvironmentMap](this[$currentEnvironmentMap]);\n      }\n    }\n\n    async [$updateEnvironment]() {\n      if (!this[$isElementInViewport]) {\n        return;\n      }\n\n      const skyboxImage = this.skyboxImage,\n            environmentImage = this.environmentImage;\n\n      if (this[$cancelEnvironmentUpdate] != null) {\n        this[$cancelEnvironmentUpdate]();\n        this[$cancelEnvironmentUpdate] = null;\n      }\n\n      const textureUtils = this[$renderer].textureUtils;\n\n      if (textureUtils == null) {\n        return;\n      }\n\n      try {\n        const _ref = await new Promise(async (resolve, reject) => {\n          const texturesLoad = textureUtils.generateEnvironmentMapAndSkybox(skyboxImage, environmentImage, {\n            progressTracker: this[$progressTracker]\n          });\n\n          this[$cancelEnvironmentUpdate] = () => reject(texturesLoad);\n\n          resolve((await texturesLoad));\n        }),\n              environmentMap = _ref.environmentMap,\n              skybox = _ref.skybox;\n\n        if (skybox != null) {\n          this[$scene].background = skybox.texture;\n        } else {\n          this[$scene].background = null;\n        }\n\n        this[$applyEnvironmentMap](environmentMap.texture);\n        this[$scene].model.dispatchEvent({\n          type: 'envmap-update'\n        });\n      } catch (errorOrPromise) {\n        if (errorOrPromise instanceof Error) {\n          this[$applyEnvironmentMap](null);\n          throw errorOrPromise;\n        }\n\n        const _ref2 = await errorOrPromise,\n              environmentMap = _ref2.environmentMap,\n              skybox = _ref2.skybox;\n\n        if (environmentMap != null) {\n          environmentMap.dispose();\n        }\n\n        if (skybox != null) {\n          skybox.dispose();\n        }\n      }\n    }\n    /**\n     * Sets the Model to use the provided environment map,\n     * or `null` if the Model should remove its' environment map.\n     */\n\n\n    [$applyEnvironmentMap](environmentMap) {\n      this[$currentEnvironmentMap] = environmentMap;\n      this[$scene].environment = this[$currentEnvironmentMap];\n      this.dispatchEvent(new CustomEvent('environment-change'));\n      this[$needsRender]();\n    }\n\n  }\n\n  __decorate([property({\n    type: String,\n    attribute: 'environment-image',\n    converter: {\n      fromAttribute: deserializeUrl\n    }\n  })], EnvironmentModelViewerElement.prototype, \"environmentImage\", void 0);\n\n  __decorate([property({\n    type: String,\n    attribute: 'skybox-image',\n    converter: {\n      fromAttribute: deserializeUrl\n    }\n  })], EnvironmentModelViewerElement.prototype, \"skyboxImage\", void 0);\n\n  __decorate([property({\n    type: Number,\n    attribute: 'shadow-intensity'\n  })], EnvironmentModelViewerElement.prototype, \"shadowIntensity\", void 0);\n\n  __decorate([property({\n    type: Number,\n    attribute: 'shadow-softness'\n  })], EnvironmentModelViewerElement.prototype, \"shadowSoftness\", void 0);\n\n  __decorate([property({\n    type: Number\n  })], EnvironmentModelViewerElement.prototype, \"exposure\", void 0);\n\n  return EnvironmentModelViewerElement;\n};","map":{"version":3,"sources":["../../src/features/environment.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit-element';\nimport {Texture} from 'three';\n\nimport ModelViewerElementBase, {$isElementInViewport, $needsRender, $onModelLoad, $progressTracker, $renderer, $scene} from '../model-viewer-base.js';\nimport {Constructor, deserializeUrl} from '../utilities.js';\n\nexport const BASE_OPACITY = 0.1;\nconst DEFAULT_SHADOW_INTENSITY = 0.0;\nconst DEFAULT_SHADOW_SOFTNESS = 1.0;\nconst DEFAULT_EXPOSURE = 1.0;\n\nconst $currentEnvironmentMap = Symbol('currentEnvironmentMap');\nconst $applyEnvironmentMap = Symbol('applyEnvironmentMap');\nconst $updateEnvironment = Symbol('updateEnvironment');\nconst $cancelEnvironmentUpdate = Symbol('cancelEnvironmentUpdate');\n\nexport declare interface EnvironmentInterface {\n  environmentImage: string|null;\n  skyboxImage: string|null;\n  shadowIntensity: number;\n  shadowSoftness: number;\n  exposure: number;\n}\n\nexport const EnvironmentMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<EnvironmentInterface>&T => {\n  class EnvironmentModelViewerElement extends ModelViewerElement {\n    @property({\n      type: String,\n      attribute: 'environment-image',\n      converter: {fromAttribute: deserializeUrl}\n    })\n    environmentImage: string|null = null;\n\n    @property({\n      type: String,\n      attribute: 'skybox-image',\n      converter: {fromAttribute: deserializeUrl}\n    })\n    skyboxImage: string|null = null;\n\n    @property({type: Number, attribute: 'shadow-intensity'})\n    shadowIntensity: number = DEFAULT_SHADOW_INTENSITY;\n\n    @property({type: Number, attribute: 'shadow-softness'})\n    shadowSoftness: number = DEFAULT_SHADOW_SOFTNESS;\n\n    @property({\n      type: Number,\n    })\n    exposure: number = DEFAULT_EXPOSURE;\n\n    private[$currentEnvironmentMap]: Texture|null = null;\n\n    private[$cancelEnvironmentUpdate]: ((...args: any[]) => any)|null = null;\n\n    updated(changedProperties: Map<string|number|symbol, unknown>) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('shadowIntensity')) {\n        this[$scene].setShadowIntensity(this.shadowIntensity * BASE_OPACITY);\n        this[$needsRender]();\n      }\n\n      if (changedProperties.has('shadowSoftness')) {\n        this[$scene].setShadowSoftness(this.shadowSoftness);\n        this[$needsRender]();\n      }\n\n      if (changedProperties.has('exposure')) {\n        this[$scene].exposure = this.exposure;\n        this[$needsRender]();\n      }\n\n      if (changedProperties.has('environmentImage') ||\n          changedProperties.has('skyboxImage') ||\n          changedProperties.has($isElementInViewport)) {\n        this[$updateEnvironment]();\n      }\n    }\n\n    [$onModelLoad](event: any) {\n      super[$onModelLoad](event);\n\n      if (this[$currentEnvironmentMap] != null) {\n        this[$applyEnvironmentMap](this[$currentEnvironmentMap]);\n      }\n    }\n\n    async[$updateEnvironment]() {\n      if (!this[$isElementInViewport]) {\n        return;\n      }\n\n      const {skyboxImage, environmentImage} = this;\n\n      if (this[$cancelEnvironmentUpdate] != null) {\n        this[$cancelEnvironmentUpdate]!();\n        this[$cancelEnvironmentUpdate] = null;\n      }\n\n      const {textureUtils} = this[$renderer];\n\n      if (textureUtils == null) {\n        return;\n      }\n\n      try {\n        const {environmentMap, skybox} =\n            await new Promise(async (resolve, reject) => {\n              const texturesLoad = textureUtils.generateEnvironmentMapAndSkybox(\n                  skyboxImage,\n                  environmentImage,\n                  {progressTracker: this[$progressTracker]});\n              this[$cancelEnvironmentUpdate] = () => reject(texturesLoad);\n              resolve(await texturesLoad);\n            });\n\n        if (skybox != null) {\n          this[$scene].background = skybox.texture;\n        } else {\n          this[$scene].background = null;\n        }\n\n        this[$applyEnvironmentMap](environmentMap.texture);\n        this[$scene].model.dispatchEvent({type: 'envmap-update'});\n      } catch (errorOrPromise) {\n        if (errorOrPromise instanceof Error) {\n          this[$applyEnvironmentMap](null);\n          throw errorOrPromise;\n        }\n\n        const {environmentMap, skybox} = await errorOrPromise;\n\n        if (environmentMap != null) {\n          environmentMap.dispose();\n        }\n\n        if (skybox != null) {\n          skybox.dispose();\n        }\n      }\n    }\n\n    /**\n     * Sets the Model to use the provided environment map,\n     * or `null` if the Model should remove its' environment map.\n     */\n    private[$applyEnvironmentMap](environmentMap: Texture|null) {\n      this[$currentEnvironmentMap] = environmentMap;\n      this[$scene].environment = this[$currentEnvironmentMap];\n      this.dispatchEvent(new CustomEvent('environment-change'));\n\n      this[$needsRender]();\n    }\n  }\n\n  return EnvironmentModelViewerElement;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}