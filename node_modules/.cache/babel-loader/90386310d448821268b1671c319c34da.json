{"ast":null,"code":"var registerComponent = require('../core/component').registerComponent;\n\nvar bind = require('../utils/bind');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\n\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\nvar DAYDREAM_CONTROLLER_MODEL_BASE_URL = 'https://cdn.aframe.io/controllers/google/';\nvar DAYDREAM_CONTROLLER_MODEL_OBJ_URL = DAYDREAM_CONTROLLER_MODEL_BASE_URL + 'vr_controller_daydream.obj';\nvar DAYDREAM_CONTROLLER_MODEL_OBJ_MTL = DAYDREAM_CONTROLLER_MODEL_BASE_URL + 'vr_controller_daydream.mtl';\n\nvar isWebXRAvailable = require('../utils/').device.isWebXRAvailable;\n\nvar GAMEPAD_ID_WEBXR = 'google-daydream';\nvar GAMEPAD_ID_WEBVR = 'Daydream Controller';\nvar GAMEPAD_ID_PREFIX = isWebXRAvailable ? GAMEPAD_ID_WEBXR : GAMEPAD_ID_WEBVR;\n/**\n * Daydream controls.\n * Interface with Daydream controller and map Gamepad events to\n * controller buttons: trackpad, menu, system\n * Load a controller model and highlight the pressed buttons.\n */\n\nmodule.exports.Component = registerComponent('daydream-controls', {\n  schema: {\n    hand: {\n      default: ''\n    },\n    // This informs the degenerate arm model.\n    buttonColor: {\n      type: 'color',\n      default: '#000000'\n    },\n    buttonTouchedColor: {\n      type: 'color',\n      default: '#777777'\n    },\n    buttonHighlightColor: {\n      type: 'color',\n      default: '#FFFFFF'\n    },\n    model: {\n      default: true\n    },\n    orientationOffset: {\n      type: 'vec3'\n    },\n    armModel: {\n      default: true\n    }\n  },\n\n  /**\n   * Button IDs:\n   * 0 - trackpad\n   * 1 - menu (never dispatched on this layer)\n   * 2 - system (never dispatched on this layer)\n   */\n  mapping: {\n    axes: {\n      trackpad: [0, 1]\n    },\n    buttons: ['trackpad', 'menu', 'system']\n  },\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.removeControllersUpdateListener = bind(this.removeControllersUpdateListener, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n  init: function () {\n    var self = this;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n\n    this.onButtonDown = function (evt) {\n      onButtonEvent(evt.detail.id, 'down', self);\n    };\n\n    this.onButtonUp = function (evt) {\n      onButtonEvent(evt.detail.id, 'up', self);\n    };\n\n    this.onButtonTouchStart = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchstart', self);\n    };\n\n    this.onButtonTouchEnd = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchend', self);\n    };\n\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.bindMethods();\n  },\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    el.addEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = true;\n  },\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('model-loaded', this.onModelLoaded);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = false;\n  },\n  checkIfControllerPresent: function () {\n    checkControllerPresentAndSetup(this, GAMEPAD_ID_PREFIX, {\n      hand: this.data.hand\n    });\n  },\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n  injectTrackedControls: function () {\n    var el = this.el;\n    var data = this.data;\n    el.setAttribute('tracked-controls', {\n      armModel: data.armModel,\n      hand: data.hand,\n      idPrefix: GAMEPAD_ID_PREFIX,\n      orientationOffset: data.orientationOffset\n    });\n\n    if (!this.data.model) {\n      return;\n    }\n\n    this.el.setAttribute('obj-model', {\n      obj: DAYDREAM_CONTROLLER_MODEL_OBJ_URL,\n      mtl: DAYDREAM_CONTROLLER_MODEL_OBJ_MTL\n    });\n  },\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  onControllersUpdate: function () {\n    this.checkIfControllerPresent();\n  },\n  onModelLoaded: function (evt) {\n    var controllerObject3D = evt.detail.model;\n    var buttonMeshes;\n\n    if (!this.data.model) {\n      return;\n    }\n\n    buttonMeshes = this.buttonMeshes = {};\n    buttonMeshes.menu = controllerObject3D.getObjectByName('AppButton_AppButton_Cylinder.004');\n    buttonMeshes.system = controllerObject3D.getObjectByName('HomeButton_HomeButton_Cylinder.005');\n    buttonMeshes.trackpad = controllerObject3D.getObjectByName('TouchPad_TouchPad_Cylinder.003'); // Offset pivot point.\n\n    controllerObject3D.position.set(0, 0, -0.04);\n  },\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping.axes, evt);\n  },\n  onButtonChanged: function (evt) {\n    var button = this.mapping.buttons[evt.detail.id];\n    if (!button) return; // Pass along changed event with button state, using button mapping for convenience.\n\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n  updateModel: function (buttonName, evtName) {\n    if (!this.data.model) {\n      return;\n    }\n\n    this.updateButtonModel(buttonName, evtName);\n  },\n  updateButtonModel: function (buttonName, state) {\n    var buttonMeshes = this.buttonMeshes;\n\n    if (!buttonMeshes || !buttonMeshes[buttonName]) {\n      return;\n    }\n\n    var color;\n\n    switch (state) {\n      case 'down':\n        color = this.data.buttonHighlightColor;\n        break;\n\n      case 'touchstart':\n        color = this.data.buttonTouchedColor;\n        break;\n\n      default:\n        color = this.data.buttonColor;\n    }\n\n    buttonMeshes[buttonName].material.color.set(color);\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/daydream-controls.js"],"names":["registerComponent","require","bind","trackedControlsUtils","checkControllerPresentAndSetup","emitIfAxesChanged","onButtonEvent","DAYDREAM_CONTROLLER_MODEL_BASE_URL","DAYDREAM_CONTROLLER_MODEL_OBJ_URL","DAYDREAM_CONTROLLER_MODEL_OBJ_MTL","isWebXRAvailable","device","GAMEPAD_ID_WEBXR","GAMEPAD_ID_WEBVR","GAMEPAD_ID_PREFIX","module","exports","Component","schema","hand","default","buttonColor","type","buttonTouchedColor","buttonHighlightColor","model","orientationOffset","armModel","mapping","axes","trackpad","buttons","bindMethods","onModelLoaded","onControllersUpdate","checkIfControllerPresent","removeControllersUpdateListener","onAxisMoved","init","self","onButtonChanged","onButtonDown","evt","detail","id","onButtonUp","onButtonTouchStart","onButtonTouchEnd","controllerPresent","lastControllerCheck","addEventListeners","el","addEventListener","controllerEventsActive","removeEventListeners","removeEventListener","data","play","addControllersUpdateListener","pause","injectTrackedControls","setAttribute","idPrefix","obj","mtl","sceneEl","controllerObject3D","buttonMeshes","menu","getObjectByName","system","position","set","button","emit","state","updateModel","buttonName","evtName","updateButtonModel","color","material"],"mappings":"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","sourcesContent":["var registerComponent = require('../core/component').registerComponent;\nvar bind = require('../utils/bind');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\n\nvar DAYDREAM_CONTROLLER_MODEL_BASE_URL = 'https://cdn.aframe.io/controllers/google/';\nvar DAYDREAM_CONTROLLER_MODEL_OBJ_URL = DAYDREAM_CONTROLLER_MODEL_BASE_URL + 'vr_controller_daydream.obj';\nvar DAYDREAM_CONTROLLER_MODEL_OBJ_MTL = DAYDREAM_CONTROLLER_MODEL_BASE_URL + 'vr_controller_daydream.mtl';\n\nvar isWebXRAvailable = require('../utils/').device.isWebXRAvailable;\n\nvar GAMEPAD_ID_WEBXR = 'google-daydream';\nvar GAMEPAD_ID_WEBVR = 'Daydream Controller';\n\nvar GAMEPAD_ID_PREFIX = isWebXRAvailable ? GAMEPAD_ID_WEBXR : GAMEPAD_ID_WEBVR;\n\n/**\n * Daydream controls.\n * Interface with Daydream controller and map Gamepad events to\n * controller buttons: trackpad, menu, system\n * Load a controller model and highlight the pressed buttons.\n */\nmodule.exports.Component = registerComponent('daydream-controls', {\n  schema: {\n    hand: {default: ''},  // This informs the degenerate arm model.\n    buttonColor: {type: 'color', default: '#000000'},\n    buttonTouchedColor: {type: 'color', default: '#777777'},\n    buttonHighlightColor: {type: 'color', default: '#FFFFFF'},\n    model: {default: true},\n    orientationOffset: {type: 'vec3'},\n    armModel: {default: true}\n  },\n\n  /**\n   * Button IDs:\n   * 0 - trackpad\n   * 1 - menu (never dispatched on this layer)\n   * 2 - system (never dispatched on this layer)\n   */\n  mapping: {\n    axes: {trackpad: [0, 1]},\n    buttons: ['trackpad', 'menu', 'system']\n  },\n\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.removeControllersUpdateListener = bind(this.removeControllersUpdateListener, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n\n  init: function () {\n    var self = this;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n    this.onButtonDown = function (evt) { onButtonEvent(evt.detail.id, 'down', self); };\n    this.onButtonUp = function (evt) { onButtonEvent(evt.detail.id, 'up', self); };\n    this.onButtonTouchStart = function (evt) { onButtonEvent(evt.detail.id, 'touchstart', self); };\n    this.onButtonTouchEnd = function (evt) { onButtonEvent(evt.detail.id, 'touchend', self); };\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.bindMethods();\n  },\n\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    el.addEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = true;\n  },\n\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('model-loaded', this.onModelLoaded);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = false;\n  },\n\n  checkIfControllerPresent: function () {\n    checkControllerPresentAndSetup(this, GAMEPAD_ID_PREFIX, {hand: this.data.hand});\n  },\n\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n\n  injectTrackedControls: function () {\n    var el = this.el;\n    var data = this.data;\n    el.setAttribute('tracked-controls', {\n      armModel: data.armModel,\n      hand: data.hand,\n      idPrefix: GAMEPAD_ID_PREFIX,\n      orientationOffset: data.orientationOffset\n    });\n    if (!this.data.model) { return; }\n    this.el.setAttribute('obj-model', {\n      obj: DAYDREAM_CONTROLLER_MODEL_OBJ_URL,\n      mtl: DAYDREAM_CONTROLLER_MODEL_OBJ_MTL\n    });\n  },\n\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  onControllersUpdate: function () {\n    this.checkIfControllerPresent();\n  },\n\n  onModelLoaded: function (evt) {\n    var controllerObject3D = evt.detail.model;\n    var buttonMeshes;\n    if (!this.data.model) { return; }\n    buttonMeshes = this.buttonMeshes = {};\n    buttonMeshes.menu = controllerObject3D.getObjectByName('AppButton_AppButton_Cylinder.004');\n    buttonMeshes.system = controllerObject3D.getObjectByName('HomeButton_HomeButton_Cylinder.005');\n    buttonMeshes.trackpad = controllerObject3D.getObjectByName('TouchPad_TouchPad_Cylinder.003');\n    // Offset pivot point.\n    controllerObject3D.position.set(0, 0, -0.04);\n  },\n\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping.axes, evt);\n  },\n\n  onButtonChanged: function (evt) {\n    var button = this.mapping.buttons[evt.detail.id];\n    if (!button) return;\n    // Pass along changed event with button state, using button mapping for convenience.\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n\n  updateModel: function (buttonName, evtName) {\n    if (!this.data.model) { return; }\n    this.updateButtonModel(buttonName, evtName);\n  },\n\n  updateButtonModel: function (buttonName, state) {\n    var buttonMeshes = this.buttonMeshes;\n    if (!buttonMeshes || !buttonMeshes[buttonName]) { return; }\n    var color;\n    switch (state) {\n      case 'down':\n        color = this.data.buttonHighlightColor;\n        break;\n      case 'touchstart':\n        color = this.data.buttonTouchedColor;\n        break;\n      default:\n        color = this.data.buttonColor;\n    }\n    buttonMeshes[buttonName].material.color.set(color);\n  }\n});\n"]},"metadata":{},"sourceType":"script"}