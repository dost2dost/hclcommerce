{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { HAS_WEBXR_DEVICE_API, HAS_WEBXR_HIT_TEST_API, IS_WEBXR_AR_CANDIDATE } from './constants.js';\nexport const deserializeUrl = url => url != null && url !== 'null' ? toFullUrl(url) : null;\nexport const assertIsArCandidate = () => {\n  if (IS_WEBXR_AR_CANDIDATE) {\n    return;\n  }\n\n  const missingApis = [];\n\n  if (!HAS_WEBXR_DEVICE_API) {\n    missingApis.push('WebXR Device API');\n  }\n\n  if (!HAS_WEBXR_HIT_TEST_API) {\n    missingApis.push('WebXR Hit Test API');\n  }\n\n  throw new Error(`The following APIs are required for AR, but are missing in this browser: ${missingApis.join(', ')}`);\n};\n/**\n * Converts a partial URL string to a fully qualified URL string.\n *\n * @param {String} url\n * @return {String}\n */\n\nexport const toFullUrl = partialUrl => {\n  const url = new URL(partialUrl, window.location.toString());\n  return url.toString();\n};\n/**\n * Returns a throttled version of a given function that is only invoked at most\n * once within a given threshold of time in milliseconds.\n *\n * The throttled version of the function has a \"flush\" property that resets the\n * threshold for cases when immediate invokation is desired.\n */\n\nexport const throttle = (fn, ms) => {\n  let timer = null;\n\n  const throttled = (...args) => {\n    if (timer != null) {\n      return;\n    }\n\n    fn(...args);\n    timer = self.setTimeout(() => timer = null, ms);\n  };\n\n  throttled.flush = () => {\n    if (timer != null) {\n      self.clearTimeout(timer);\n      timer = null;\n    }\n  };\n\n  return throttled;\n};\nexport const debounce = (fn, ms) => {\n  let timer = null;\n  return (...args) => {\n    if (timer != null) {\n      self.clearTimeout(timer);\n    }\n\n    timer = self.setTimeout(() => {\n      timer = null;\n      fn(...args);\n    }, ms);\n  };\n};\n/**\n * @param {Number} edge\n * @param {Number} value\n * @return {Number} 0 if value is less than edge, otherwise 1\n */\n\nexport const step = (edge, value) => {\n  return value < edge ? 0 : 1;\n};\n/**\n * @param {Number} value\n * @param {Number} lowerLimit\n * @param {Number} upperLimit\n * @return {Number} value clamped within lowerLimit..upperLimit\n */\n\nexport const clamp = (value, lowerLimit, upperLimit) => Math.max(lowerLimit, Math.min(upperLimit, value)); // The DPR we use for a \"capped\" scenario (see resolveDpr below):\n\nexport const CAPPED_DEVICE_PIXEL_RATIO = 1;\n/**\n * This helper analyzes the layout of the current page to decide if we should\n * use the natural device pixel ratio, or a capped value.\n *\n * We cap DPR if there is no meta viewport (suggesting that user is not\n * consciously specifying how to scale the viewport relative to the device\n * screen size).\n *\n * The rationale is that this condition typically leads to a pathological\n * outcome on mobile devices. When the window dimensions are scaled up on a\n * device with a high DPR, we create a canvas that is much larger than\n * appropriate to accomodate for the pixel density if we naively use the\n * reported DPR.\n *\n * This value needs to be measured in real time, as device pixel ratio can\n * change over time (e.g., when a user zooms the page). Also, in some cases\n * (such as Firefox on Android), the window's innerWidth is initially reported\n * as the same as the screen's availWidth but changes later.\n *\n * A user who specifies a meta viewport, thereby consciously creating scaling\n * conditions where <model-viewer> is slow, will be encouraged to live their\n * best life.\n */\n\nexport const resolveDpr = (() => {\n  // If true, implies that the user is conscious of the viewport scaling\n  // relative to the device screen size.\n  const HAS_META_VIEWPORT_TAG = (() => {\n    const metas = document.head != null ? Array.from(document.head.querySelectorAll('meta')) : [];\n\n    for (const meta of metas) {\n      if (meta.name === 'viewport') {\n        return true;\n      }\n    }\n\n    return false;\n  })();\n\n  if (!HAS_META_VIEWPORT_TAG) {\n    console.warn('No <meta name=\"viewport\"> detected; <model-viewer> will cap pixel density at 1.');\n  }\n\n  return () => HAS_META_VIEWPORT_TAG ? window.devicePixelRatio : CAPPED_DEVICE_PIXEL_RATIO;\n})();\n/**\n * Debug mode is enabled when one of the two following conditions is true:\n *\n *  1. A 'model-viewer-debug-mode' query parameter is present in the current\n *     search string\n *  2. There is a global object ModelViewerElement with a debugMode property set\n *     to true\n */\n\nexport const isDebugMode = (() => {\n  const debugQueryParameterName = 'model-viewer-debug-mode';\n  const debugQueryParameter = new RegExp(`[\\?&]${debugQueryParameterName}(&|$)`);\n  return () => self.ModelViewerElement && self.ModelViewerElement.debugMode || self.location && self.location.search && self.location.search.match(debugQueryParameter);\n})();\n/**\n * Returns the first key in a Map in iteration order.\n *\n * NOTE(cdata): This is necessary because IE11 does not implement iterator\n * methods of Map, and polymer-build does not polyfill these methods for\n * compatibility and performance reasons. This helper proposes that it is\n * a reasonable compromise to sacrifice a very small amount of runtime\n * performance in IE11 for the sake of code clarity.\n */\n\nexport const getFirstMapKey = map => {\n  if (map.keys != null) {\n    return map.keys().next().value || null;\n  }\n\n  let firstKey = null;\n\n  try {\n    map.forEach((_value, key, _map) => {\n      firstKey = key; // Stop iterating the Map with forEach:\n\n      throw new Error();\n    });\n  } catch (_error) {}\n\n  return firstKey;\n};","map":{"version":3,"sources":["../src/utilities.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {HAS_WEBXR_DEVICE_API, HAS_WEBXR_HIT_TEST_API, IS_WEBXR_AR_CANDIDATE} from './constants.js';\n\nexport type Constructor<T = object, U = object> = {\n  new (...args: any[]): T,\n  prototype: T\n}&U;\n\nexport const deserializeUrl = (url: string|null): string|null =>\n    (url != null && url !== 'null') ? toFullUrl(url) : null;\n\n\nexport const assertIsArCandidate = () => {\n  if (IS_WEBXR_AR_CANDIDATE) {\n    return;\n  }\n\n  const missingApis = [];\n\n  if (!HAS_WEBXR_DEVICE_API) {\n    missingApis.push('WebXR Device API');\n  }\n\n  if (!HAS_WEBXR_HIT_TEST_API) {\n    missingApis.push('WebXR Hit Test API');\n  }\n\n  throw new Error(\n      `The following APIs are required for AR, but are missing in this browser: ${\n          missingApis.join(', ')}`);\n};\n\n\n/**\n * Converts a partial URL string to a fully qualified URL string.\n *\n * @param {String} url\n * @return {String}\n */\nexport const toFullUrl = (partialUrl: string): string => {\n  const url = new URL(partialUrl, window.location.toString());\n  return url.toString();\n};\n\n\n/**\n * Returns a throttled version of a given function that is only invoked at most\n * once within a given threshold of time in milliseconds.\n *\n * The throttled version of the function has a \"flush\" property that resets the\n * threshold for cases when immediate invokation is desired.\n */\nexport const throttle = (fn: (...args: Array<any>) => any, ms: number) => {\n  let timer: number|null = null;\n\n  const throttled = (...args: Array<any>) => {\n    if (timer != null) {\n      return;\n    }\n\n    fn(...args);\n\n    timer = self.setTimeout(() => timer = null, ms);\n  };\n\n  throttled.flush = () => {\n    if (timer != null) {\n      self.clearTimeout(timer);\n      timer = null;\n    }\n  };\n\n  return throttled;\n};\n\nexport const debounce = (fn: (...args: Array<any>) => any, ms: number) => {\n  let timer: number|null = null;\n\n  return (...args: Array<any>) => {\n    if (timer != null) {\n      self.clearTimeout(timer);\n    }\n\n    timer = self.setTimeout(() => {\n      timer = null;\n      fn(...args);\n    }, ms);\n  };\n};\n\n\n/**\n * @param {Number} edge\n * @param {Number} value\n * @return {Number} 0 if value is less than edge, otherwise 1\n */\nexport const step = (edge: number, value: number): number => {\n  return value < edge ? 0 : 1;\n};\n\n\n/**\n * @param {Number} value\n * @param {Number} lowerLimit\n * @param {Number} upperLimit\n * @return {Number} value clamped within lowerLimit..upperLimit\n */\nexport const clamp =\n    (value: number, lowerLimit: number, upperLimit: number): number =>\n        Math.max(lowerLimit, Math.min(upperLimit, value));\n\n\n// The DPR we use for a \"capped\" scenario (see resolveDpr below):\nexport const CAPPED_DEVICE_PIXEL_RATIO = 1;\n\n\n/**\n * This helper analyzes the layout of the current page to decide if we should\n * use the natural device pixel ratio, or a capped value.\n *\n * We cap DPR if there is no meta viewport (suggesting that user is not\n * consciously specifying how to scale the viewport relative to the device\n * screen size).\n *\n * The rationale is that this condition typically leads to a pathological\n * outcome on mobile devices. When the window dimensions are scaled up on a\n * device with a high DPR, we create a canvas that is much larger than\n * appropriate to accomodate for the pixel density if we naively use the\n * reported DPR.\n *\n * This value needs to be measured in real time, as device pixel ratio can\n * change over time (e.g., when a user zooms the page). Also, in some cases\n * (such as Firefox on Android), the window's innerWidth is initially reported\n * as the same as the screen's availWidth but changes later.\n *\n * A user who specifies a meta viewport, thereby consciously creating scaling\n * conditions where <model-viewer> is slow, will be encouraged to live their\n * best life.\n */\nexport const resolveDpr: () => number = (() => {\n  // If true, implies that the user is conscious of the viewport scaling\n  // relative to the device screen size.\n  const HAS_META_VIEWPORT_TAG = (() => {\n    const metas = document.head != null ?\n        Array.from(document.head.querySelectorAll('meta')) :\n        [];\n\n    for (const meta of metas) {\n      if (meta.name === 'viewport') {\n        return true;\n      }\n    }\n\n    return false;\n  })();\n\n  if (!HAS_META_VIEWPORT_TAG) {\n    console.warn(\n        'No <meta name=\"viewport\"> detected; <model-viewer> will cap pixel density at 1.');\n  }\n\n  return () => HAS_META_VIEWPORT_TAG ? window.devicePixelRatio :\n                                       CAPPED_DEVICE_PIXEL_RATIO;\n})();\n\n\n/**\n * Debug mode is enabled when one of the two following conditions is true:\n *\n *  1. A 'model-viewer-debug-mode' query parameter is present in the current\n *     search string\n *  2. There is a global object ModelViewerElement with a debugMode property set\n *     to true\n */\nexport const isDebugMode = (() => {\n  const debugQueryParameterName = 'model-viewer-debug-mode';\n  const debugQueryParameter =\n      new RegExp(`[\\?&]${debugQueryParameterName}(&|$)`);\n\n  return () => ((self as any).ModelViewerElement &&\n                (self as any).ModelViewerElement.debugMode) ||\n      (self.location && self.location.search &&\n       self.location.search.match(debugQueryParameter));\n})();\n\n\n/**\n * Returns the first key in a Map in iteration order.\n *\n * NOTE(cdata): This is necessary because IE11 does not implement iterator\n * methods of Map, and polymer-build does not polyfill these methods for\n * compatibility and performance reasons. This helper proposes that it is\n * a reasonable compromise to sacrifice a very small amount of runtime\n * performance in IE11 for the sake of code clarity.\n */\nexport const getFirstMapKey = <T = any, U = any>(map: Map<T, U>): T|null => {\n  if (map.keys != null) {\n    return map.keys().next().value || null;\n  }\n\n  let firstKey: T|null = null;\n\n  try {\n    map.forEach((_value: U, key: T, _map: Map<T, U>) => {\n      firstKey = key;\n      // Stop iterating the Map with forEach:\n      throw new Error();\n    });\n  } catch (_error) {\n  }\n\n  return firstKey;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}