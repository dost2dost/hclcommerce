{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\n\nimport { Material } from './material.js';\nimport { ThreeDOMElement } from './three-dom-element.js';\nconst $modelUri = Symbol('modelUri');\nconst $materials = Symbol('materials');\n/**\n * A Model facades the top-level GLTF object returned by Three.js' GLTFLoader.\n * Currently, the model only bothers itself with the materials in the Three.js\n * scene graph.\n */\n\nexport class Model extends ThreeDOMElement {\n  constructor(graft, modelUri, gltf) {\n    super(graft, gltf);\n    this[_a] = '';\n    this[_b] = [];\n    this[$modelUri] = modelUri;\n    const visitedMaterials = new Set();\n    gltf.scene.traverse(object3D => {\n      const maybeMesh = object3D;\n      let meshMaterials = [];\n\n      if (maybeMesh.isMesh && maybeMesh.material != null) {\n        meshMaterials = Array.isArray(maybeMesh.material) ? maybeMesh.material : [maybeMesh.material];\n      }\n\n      for (const material of meshMaterials) {\n        if (visitedMaterials.has(material)) {\n          continue;\n        }\n\n        this[$materials].push(new Material(graft, material));\n        visitedMaterials.add(material);\n      }\n    });\n  }\n  /**\n   * A flat list of all unique materials found in this scene graph. Materials\n   * are listed in the order they appear during pre-order, depth-first traveral\n   * of the scene graph.\n   *\n   * TODO(#1003): How do we handle non-active scenes?\n   * TODO(#1002): Desctibe and enforce traversal order\n   */\n\n\n  get materials() {\n    return this[$materials];\n  }\n\n  toJSON() {\n    const serialized = super.toJSON();\n    serialized.modelUri = this[$modelUri];\n    serialized.materials = this[$materials].map(material => material.toJSON());\n    return serialized;\n  }\n\n}\n_a = $modelUri, _b = $materials;","map":{"version":3,"sources":["../../../src/facade/three-js/model.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAsBA,SAAQ,QAAR,QAAuB,eAAvB;AAEA,SAAQ,eAAR,QAA8B,wBAA9B;AAGA,MAAM,SAAS,GAAG,MAAM,CAAC,UAAD,CAAxB;AACA,MAAM,UAAU,GAAG,MAAM,CAAC,WAAD,CAAzB;AAEA;;;;;;AAKA,OAAM,MAAO,KAAP,SAAqB,eAArB,CAAoC;AAIxC,EAAA,WAAA,CAAY,KAAZ,EAA+B,QAA/B,EAAiD,IAAjD,EAA2D;AACzD,UAAM,KAAN,EAAa,IAAb;AAJK,SAAA,EAAA,IAAc,EAAd;AACA,SAAA,EAAA,IAAgC,EAAhC;AAKL,SAAK,SAAL,IAAkB,QAAlB;AAEA,UAAM,gBAAgB,GAAG,IAAI,GAAJ,EAAzB;AAEA,IAAA,IAAI,CAAC,KAAL,CAAW,QAAX,CAAqB,QAAD,IAAa;AAC/B,YAAM,SAAS,GAAG,QAAlB;AACA,UAAI,aAAa,GAAyB,EAA1C;;AAEA,UAAI,SAAS,CAAC,MAAV,IAAoB,SAAS,CAAC,QAAV,IAAsB,IAA9C,EAAoD;AAClD,QAAA,aAAa,GAAG,KAAK,CAAC,OAAN,CAAc,SAAS,CAAC,QAAxB,IACZ,SAAS,CAAC,QADE,GAEZ,CAAC,SAAS,CAAC,QAAX,CAFJ;AAGD;;AAED,WAAK,MAAM,QAAX,IAAuB,aAAvB,EAAsC;AACpC,YAAI,gBAAgB,CAAC,GAAjB,CAAqB,QAArB,CAAJ,EAAoC;AAClC;AACD;;AAED,aAAK,UAAL,EAAiB,IAAjB,CAAsB,IAAI,QAAJ,CAAa,KAAb,EAAoB,QAApB,CAAtB;AACA,QAAA,gBAAgB,CAAC,GAAjB,CAAqB,QAArB;AACD;AACF,KAlBD;AAmBD;AAED;;;;;;;;;;AAQA,MAAI,SAAJ,GAAa;AACX,WAAO,KAAK,UAAL,CAAP;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,UAAM,UAAU,GAA6B,MAAM,MAAN,EAA7C;AAEA,IAAA,UAAU,CAAC,QAAX,GAAsB,KAAK,SAAL,CAAtB;AACA,IAAA,UAAU,CAAC,SAAX,GACI,KAAK,UAAL,EAAiB,GAAjB,CAAsB,QAAD,IAAc,QAAQ,CAAC,MAAT,EAAnC,CADJ;AAGA,WAAO,UAAP;AACD;;AApDuC;KAChC,S,EAAS,EAAA,GACT,U","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Material as ThreeMaterial} from 'three';\nimport {Mesh as ThreeMesh} from 'three';\nimport {GLTF} from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nimport {SerializedModel} from '../../protocol.js';\nimport {Model as ModelInterface} from '../api.js';\n\nimport {Material} from './material.js';\nimport {ModelGraft} from './model-graft.js';\nimport {ThreeDOMElement} from './three-dom-element.js';\n\n\nconst $modelUri = Symbol('modelUri');\nconst $materials = Symbol('materials');\n\n/**\n * A Model facades the top-level GLTF object returned by Three.js' GLTFLoader.\n * Currently, the model only bothers itself with the materials in the Three.js\n * scene graph.\n */\nexport class Model extends ThreeDOMElement implements ModelInterface {\n  private[$modelUri] = '';\n  private[$materials]: Array<Material> = [];\n\n  constructor(graft: ModelGraft, modelUri: string, gltf: GLTF) {\n    super(graft, gltf);\n\n    this[$modelUri] = modelUri;\n\n    const visitedMaterials = new Set();\n\n    gltf.scene.traverse((object3D) => {\n      const maybeMesh = object3D as ThreeMesh;\n      let meshMaterials: Array<ThreeMaterial> = [];\n\n      if (maybeMesh.isMesh && maybeMesh.material != null) {\n        meshMaterials = Array.isArray(maybeMesh.material) ?\n            maybeMesh.material :\n            [maybeMesh.material];\n      }\n\n      for (const material of meshMaterials) {\n        if (visitedMaterials.has(material)) {\n          continue;\n        }\n\n        this[$materials].push(new Material(graft, material));\n        visitedMaterials.add(material);\n      }\n    });\n  }\n\n  /**\n   * A flat list of all unique materials found in this scene graph. Materials\n   * are listed in the order they appear during pre-order, depth-first traveral\n   * of the scene graph.\n   *\n   * TODO(#1003): How do we handle non-active scenes?\n   * TODO(#1002): Desctibe and enforce traversal order\n   */\n  get materials() {\n    return this[$materials];\n  }\n\n  toJSON(): SerializedModel {\n    const serialized: Partial<SerializedModel> = super.toJSON();\n\n    serialized.modelUri = this[$modelUri];\n    serialized.materials =\n        this[$materials].map((material) => material.toJSON());\n\n    return serialized as SerializedModel;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}