{"ast":null,"code":"var debug = require('../../utils/debug');\n\nvar registerComponent = require('../../core/component').registerComponent;\n\nvar warn = debug('components:pool:warn');\n/**\n * Pool component to reuse entities.\n * Avoids creating and destroying the same kind of entities.\n * Helps reduce GC pauses. For example in a game to reuse enemies entities.\n *\n * @member {array} availableEls - Available entities in the pool.\n * @member {array} usedEls - Entities of the pool in use.\n */\n\nmodule.exports.Component = registerComponent('pool', {\n  schema: {\n    container: {\n      default: ''\n    },\n    mixin: {\n      default: ''\n    },\n    size: {\n      default: 0\n    },\n    dynamic: {\n      default: false\n    }\n  },\n  multiple: true,\n  initPool: function () {\n    var i;\n    this.availableEls = [];\n    this.usedEls = [];\n\n    if (!this.data.mixin) {\n      warn('No mixin provided for pool component.');\n    }\n\n    if (this.data.container) {\n      this.container = document.querySelector(this.data.container);\n\n      if (!this.container) {\n        warn('Container ' + this.data.container + ' not found.');\n      }\n    }\n\n    this.container = this.container || this.el;\n\n    for (i = 0; i < this.data.size; ++i) {\n      this.createEntity();\n    }\n  },\n  update: function (oldData) {\n    var data = this.data;\n\n    if (oldData.mixin !== data.mixin || oldData.size !== data.size) {\n      this.initPool();\n    }\n  },\n\n  /**\n   * Add a new entity to the list of available entities.\n   */\n  createEntity: function () {\n    var el;\n    el = document.createElement('a-entity');\n    el.play = this.wrapPlay(el.play);\n    el.setAttribute('mixin', this.data.mixin);\n    el.object3D.visible = false;\n    el.pause();\n    this.container.appendChild(el);\n    this.availableEls.push(el);\n  },\n\n  /**\n   * Play wrapper for pooled entities. When pausing and playing a scene, don't want to play\n   * entities that are not in use.\n   */\n  wrapPlay: function (playMethod) {\n    var usedEls = this.usedEls;\n    return function () {\n      if (usedEls.indexOf(this) === -1) {\n        return;\n      }\n\n      playMethod.call(this);\n    };\n  },\n\n  /**\n   * Used to request one of the available entities of the pool.\n   */\n  requestEntity: function () {\n    var el;\n\n    if (this.availableEls.length === 0) {\n      if (this.data.dynamic === false) {\n        warn('Requested entity from empty pool: ' + this.attrName);\n        return;\n      } else {\n        warn('Requested entity from empty pool. This pool is dynamic and will resize ' + 'automatically. You might want to increase its initial size: ' + this.attrName);\n      }\n\n      this.createEntity();\n    }\n\n    el = this.availableEls.shift();\n    this.usedEls.push(el);\n    el.object3D.visible = true;\n    return el;\n  },\n\n  /**\n   * Used to return a used entity to the pool.\n   */\n  returnEntity: function (el) {\n    var index = this.usedEls.indexOf(el);\n\n    if (index === -1) {\n      warn('The returned entity was not previously pooled from ' + this.attrName);\n      return;\n    }\n\n    this.usedEls.splice(index, 1);\n    this.availableEls.push(el);\n    el.object3D.visible = false;\n    el.pause();\n    return el;\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/scene/pool.js"],"names":["debug","require","registerComponent","warn","module","exports","Component","schema","container","default","mixin","size","dynamic","multiple","initPool","i","availableEls","usedEls","data","document","querySelector","el","createEntity","update","oldData","createElement","play","wrapPlay","setAttribute","object3D","visible","pause","appendChild","push","playMethod","indexOf","call","requestEntity","length","attrName","shift","returnEntity","index","splice"],"mappings":"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","sourcesContent":["var debug = require('../../utils/debug');\nvar registerComponent = require('../../core/component').registerComponent;\n\nvar warn = debug('components:pool:warn');\n\n/**\n * Pool component to reuse entities.\n * Avoids creating and destroying the same kind of entities.\n * Helps reduce GC pauses. For example in a game to reuse enemies entities.\n *\n * @member {array} availableEls - Available entities in the pool.\n * @member {array} usedEls - Entities of the pool in use.\n */\nmodule.exports.Component = registerComponent('pool', {\n  schema: {\n    container: {default: ''},\n    mixin: {default: ''},\n    size: {default: 0},\n    dynamic: {default: false}\n  },\n\n  multiple: true,\n\n  initPool: function () {\n    var i;\n\n    this.availableEls = [];\n    this.usedEls = [];\n\n    if (!this.data.mixin) {\n      warn('No mixin provided for pool component.');\n    }\n\n    if (this.data.container) {\n      this.container = document.querySelector(this.data.container);\n      if (!this.container) {\n        warn('Container ' + this.data.container + ' not found.');\n      }\n    }\n    this.container = this.container || this.el;\n\n    for (i = 0; i < this.data.size; ++i) {\n      this.createEntity();\n    }\n  },\n\n  update: function (oldData) {\n    var data = this.data;\n    if (oldData.mixin !== data.mixin || oldData.size !== data.size) {\n      this.initPool();\n    }\n  },\n\n  /**\n   * Add a new entity to the list of available entities.\n   */\n  createEntity: function () {\n    var el;\n    el = document.createElement('a-entity');\n    el.play = this.wrapPlay(el.play);\n    el.setAttribute('mixin', this.data.mixin);\n    el.object3D.visible = false;\n    el.pause();\n    this.container.appendChild(el);\n    this.availableEls.push(el);\n  },\n\n  /**\n   * Play wrapper for pooled entities. When pausing and playing a scene, don't want to play\n   * entities that are not in use.\n   */\n  wrapPlay: function (playMethod) {\n    var usedEls = this.usedEls;\n    return function () {\n      if (usedEls.indexOf(this) === -1) { return; }\n      playMethod.call(this);\n    };\n  },\n\n  /**\n   * Used to request one of the available entities of the pool.\n   */\n  requestEntity: function () {\n    var el;\n    if (this.availableEls.length === 0) {\n      if (this.data.dynamic === false) {\n        warn('Requested entity from empty pool: ' + this.attrName);\n        return;\n      } else {\n        warn('Requested entity from empty pool. This pool is dynamic and will resize ' +\n             'automatically. You might want to increase its initial size: ' + this.attrName);\n      }\n      this.createEntity();\n    }\n    el = this.availableEls.shift();\n    this.usedEls.push(el);\n    el.object3D.visible = true;\n    return el;\n  },\n\n  /**\n   * Used to return a used entity to the pool.\n   */\n  returnEntity: function (el) {\n    var index = this.usedEls.indexOf(el);\n    if (index === -1) {\n      warn('The returned entity was not previously pooled from ' + this.attrName);\n      return;\n    }\n    this.usedEls.splice(index, 1);\n    this.availableEls.push(el);\n    el.object3D.visible = false;\n    el.pause();\n    return el;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}