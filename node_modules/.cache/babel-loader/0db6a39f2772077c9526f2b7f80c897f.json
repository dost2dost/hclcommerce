{"ast":null,"code":"window.glStats = function () {\n  var _rS = null;\n  var _totalDrawArraysCalls = 0,\n      _totalDrawElementsCalls = 0,\n      _totalUseProgramCalls = 0,\n      _totalFaces = 0,\n      _totalVertices = 0,\n      _totalPoints = 0,\n      _totalBindTexures = 0;\n\n  function _h(f, c) {\n    return function () {\n      c.apply(this, arguments);\n      f.apply(this, arguments);\n    };\n  }\n\n  WebGLRenderingContext.prototype.drawArrays = _h(WebGLRenderingContext.prototype.drawArrays, function () {\n    _totalDrawArraysCalls++;\n    if (arguments[0] == this.POINTS) _totalPoints += arguments[2];else _totalVertices += arguments[2];\n  });\n  WebGLRenderingContext.prototype.drawElements = _h(WebGLRenderingContext.prototype.drawElements, function () {\n    _totalDrawElementsCalls++;\n    _totalFaces += arguments[1] / 3;\n    _totalVertices += arguments[1];\n  });\n  WebGLRenderingContext.prototype.useProgram = _h(WebGLRenderingContext.prototype.useProgram, function () {\n    _totalUseProgramCalls++;\n  });\n  WebGLRenderingContext.prototype.bindTexture = _h(WebGLRenderingContext.prototype.bindTexture, function () {\n    _totalBindTexures++;\n  });\n  var _values = {\n    allcalls: {\n      over: 3000,\n      caption: 'Calls (hook)'\n    },\n    drawelements: {\n      caption: 'drawElements (hook)'\n    },\n    drawarrays: {\n      caption: 'drawArrays (hook)'\n    }\n  };\n  var _groups = [{\n    caption: 'WebGL',\n    values: ['allcalls', 'drawelements', 'drawarrays', 'useprogram', 'bindtexture', 'glfaces', 'glvertices', 'glpoints']\n  }];\n  var _fractions = [{\n    base: 'allcalls',\n    steps: ['drawelements', 'drawarrays']\n  }];\n\n  function _update() {\n    _rS('allcalls').set(_totalDrawArraysCalls + _totalDrawElementsCalls);\n\n    _rS('drawElements').set(_totalDrawElementsCalls);\n\n    _rS('drawArrays').set(_totalDrawArraysCalls);\n\n    _rS('bindTexture').set(_totalBindTexures);\n\n    _rS('useProgram').set(_totalUseProgramCalls);\n\n    _rS('glfaces').set(_totalFaces);\n\n    _rS('glvertices').set(_totalVertices);\n\n    _rS('glpoints').set(_totalPoints);\n  }\n\n  function _start() {\n    _totalDrawArraysCalls = 0;\n    _totalDrawElementsCalls = 0;\n    _totalUseProgramCalls = 0;\n    _totalFaces = 0;\n    _totalVertices = 0;\n    _totalPoints = 0;\n    _totalBindTexures = 0;\n  }\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions\n  };\n};\n\nwindow.threeStats = function (renderer) {\n  var _rS = null;\n  var _values = {\n    'renderer.info.memory.geometries': {\n      caption: 'Geometries'\n    },\n    'renderer.info.memory.textures': {\n      caption: 'Textures'\n    },\n    'renderer.info.programs': {\n      caption: 'Programs'\n    },\n    'renderer.info.render.calls': {\n      caption: 'Calls'\n    },\n    'renderer.info.render.triangles': {\n      caption: 'Triangles',\n      over: 1000\n    },\n    'renderer.info.render.points': {\n      caption: 'Points'\n    }\n  };\n  var _groups = [{\n    caption: 'Three.js - Memory',\n    values: ['renderer.info.memory.geometries', 'renderer.info.programs', 'renderer.info.memory.textures']\n  }, {\n    caption: 'Three.js - Render',\n    values: ['renderer.info.render.calls', 'renderer.info.render.triangles', 'renderer.info.render.points']\n  }];\n  var _fractions = [];\n\n  function _update() {\n    _rS('renderer.info.memory.geometries').set(renderer.info.memory.geometries);\n\n    _rS('renderer.info.programs').set(renderer.info.programs.length);\n\n    _rS('renderer.info.memory.textures').set(renderer.info.memory.textures);\n\n    _rS('renderer.info.render.calls').set(renderer.info.render.calls);\n\n    _rS('renderer.info.render.triangles').set(renderer.info.render.triangles);\n\n    _rS('renderer.info.render.points').set(renderer.info.render.points);\n  }\n\n  function _start() {}\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions\n  };\n};\n/*\n *   From https://github.com/paulirish/memory-stats.js\n */\n\n\nwindow.BrowserStats = function () {\n  var _rS = null;\n  var _usedJSHeapSize = 0,\n      _totalJSHeapSize = 0;\n\n  if (window.performance && !performance.memory) {\n    performance.memory = {\n      usedJSHeapSize: 0,\n      totalJSHeapSize: 0\n    };\n  }\n\n  if (performance.memory.totalJSHeapSize === 0) {\n    console.warn('totalJSHeapSize === 0... performance.memory is only available in Chrome .');\n  }\n\n  var _values = {\n    memory: {\n      caption: 'Used Memory',\n      average: true,\n      avgMs: 1000,\n      over: 22\n    },\n    total: {\n      caption: 'Total Memory'\n    }\n  };\n  var _groups = [{\n    caption: 'Browser',\n    values: ['memory', 'total']\n  }];\n  var _fractions = [{\n    base: 'total',\n    steps: ['memory']\n  }];\n  var log1024 = Math.log(1024);\n\n  function _size(v) {\n    var precision = 100; //Math.pow(10, 2);\n\n    var i = Math.floor(Math.log(v) / log1024);\n    return Math.round(v * precision / Math.pow(1024, i)) / precision; // + ' ' + sizes[i];\n  }\n\n  function _update() {\n    _usedJSHeapSize = _size(performance.memory.usedJSHeapSize);\n    _totalJSHeapSize = _size(performance.memory.totalJSHeapSize);\n\n    _rS('memory').set(_usedJSHeapSize);\n\n    _rS('total').set(_totalJSHeapSize);\n  }\n\n  function _start() {\n    _usedJSHeapSize = 0;\n  }\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions\n  };\n};\n\nif (typeof module === 'object') {\n  module.exports = {\n    glStats: window.glStats,\n    threeStats: window.threeStats,\n    BrowserStats: window.BrowserStats\n  };\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/vendor/rStats.extras.js"],"names":["window","glStats","_rS","_totalDrawArraysCalls","_totalDrawElementsCalls","_totalUseProgramCalls","_totalFaces","_totalVertices","_totalPoints","_totalBindTexures","_h","f","c","apply","arguments","WebGLRenderingContext","prototype","drawArrays","POINTS","drawElements","useProgram","bindTexture","_values","allcalls","over","caption","drawelements","drawarrays","_groups","values","_fractions","base","steps","_update","set","_start","_end","_attach","r","update","start","end","attach","groups","fractions","threeStats","renderer","info","memory","geometries","programs","length","textures","render","calls","triangles","points","BrowserStats","_usedJSHeapSize","_totalJSHeapSize","performance","usedJSHeapSize","totalJSHeapSize","console","warn","average","avgMs","total","log1024","Math","log","_size","v","precision","i","floor","round","pow","module","exports"],"mappings":"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","sourcesContent":["window.glStats = function () {\n\n    var _rS = null;\n\n    var _totalDrawArraysCalls = 0,\n        _totalDrawElementsCalls = 0,\n        _totalUseProgramCalls = 0,\n        _totalFaces = 0,\n        _totalVertices = 0,\n        _totalPoints = 0,\n        _totalBindTexures = 0;\n\n    function _h ( f, c ) {\n        return function () {\n            c.apply( this, arguments );\n            f.apply( this, arguments );\n        };\n    }\n\n    WebGLRenderingContext.prototype.drawArrays = _h( WebGLRenderingContext.prototype.drawArrays, function () {\n        _totalDrawArraysCalls++;\n        if ( arguments[ 0 ] == this.POINTS ) _totalPoints += arguments[ 2 ];\n        else _totalVertices += arguments[ 2 ];\n    } );\n\n    WebGLRenderingContext.prototype.drawElements = _h( WebGLRenderingContext.prototype.drawElements, function () {\n        _totalDrawElementsCalls++;\n        _totalFaces += arguments[ 1 ] / 3;\n        _totalVertices += arguments[ 1 ];\n    } );\n\n    WebGLRenderingContext.prototype.useProgram = _h( WebGLRenderingContext.prototype.useProgram, function () {\n        _totalUseProgramCalls++;\n    } );\n\n    WebGLRenderingContext.prototype.bindTexture = _h( WebGLRenderingContext.prototype.bindTexture, function () {\n        _totalBindTexures++;\n    } );\n\n    var _values = {\n        allcalls: {\n            over: 3000,\n            caption: 'Calls (hook)'\n        },\n        drawelements: {\n            caption: 'drawElements (hook)'\n        },\n        drawarrays: {\n            caption: 'drawArrays (hook)'\n        }\n    };\n\n    var _groups = [ {\n        caption: 'WebGL',\n        values: [ 'allcalls', 'drawelements', 'drawarrays', 'useprogram', 'bindtexture', 'glfaces', 'glvertices', 'glpoints' ]\n    } ];\n\n    var _fractions = [ {\n        base: 'allcalls',\n        steps: [ 'drawelements', 'drawarrays' ]\n    } ];\n\n    function _update () {\n        _rS( 'allcalls' ).set( _totalDrawArraysCalls + _totalDrawElementsCalls );\n        _rS( 'drawElements' ).set( _totalDrawElementsCalls );\n        _rS( 'drawArrays' ).set( _totalDrawArraysCalls );\n        _rS( 'bindTexture' ).set( _totalBindTexures );\n        _rS( 'useProgram' ).set( _totalUseProgramCalls );\n        _rS( 'glfaces' ).set( _totalFaces );\n        _rS( 'glvertices' ).set( _totalVertices );\n        _rS( 'glpoints' ).set( _totalPoints );\n    }\n\n    function _start () {\n        _totalDrawArraysCalls = 0;\n        _totalDrawElementsCalls = 0;\n        _totalUseProgramCalls = 0;\n        _totalFaces = 0;\n        _totalVertices = 0;\n        _totalPoints = 0;\n        _totalBindTexures = 0;\n    }\n\n    function _end () {}\n\n    function _attach ( r ) {\n        _rS = r;\n    }\n\n    return {\n        update: _update,\n        start: _start,\n        end: _end,\n        attach: _attach,\n        values: _values,\n        groups: _groups,\n        fractions: _fractions\n    };\n\n};\n\nwindow.threeStats = function ( renderer ) {\n\n    var _rS = null;\n\n    var _values = {\n        'renderer.info.memory.geometries': {\n            caption: 'Geometries'\n        },\n        'renderer.info.memory.textures': {\n            caption: 'Textures'\n        },\n        'renderer.info.programs': {\n            caption: 'Programs'\n        },\n        'renderer.info.render.calls': {\n            caption: 'Calls'\n        },\n        'renderer.info.render.triangles': {\n            caption: 'Triangles',\n            over: 1000\n        },\n        'renderer.info.render.points': {\n            caption: 'Points'\n        }\n    };\n\n    var _groups = [ {\n        caption: 'Three.js - Memory',\n        values: [ 'renderer.info.memory.geometries', 'renderer.info.programs', 'renderer.info.memory.textures' ]\n    }, {\n        caption: 'Three.js - Render',\n        values: [ 'renderer.info.render.calls', 'renderer.info.render.triangles', 'renderer.info.render.points' ]\n    } ];\n\n    var _fractions = [];\n\n    function _update () {\n\n        _rS( 'renderer.info.memory.geometries' ).set( renderer.info.memory.geometries );\n        _rS( 'renderer.info.programs' ).set( renderer.info.programs.length );\n        _rS( 'renderer.info.memory.textures' ).set( renderer.info.memory.textures );\n        _rS( 'renderer.info.render.calls' ).set( renderer.info.render.calls );\n        _rS( 'renderer.info.render.triangles' ).set( renderer.info.render.triangles );\n        _rS( 'renderer.info.render.points' ).set( renderer.info.render.points );\n\n    }\n\n    function _start () {}\n\n    function _end () {}\n\n    function _attach ( r ) {\n        _rS = r;\n    }\n\n    return {\n        update: _update,\n        start: _start,\n        end: _end,\n        attach: _attach,\n        values: _values,\n        groups: _groups,\n        fractions: _fractions\n    };\n\n};\n\n/*\n *   From https://github.com/paulirish/memory-stats.js\n */\n\nwindow.BrowserStats = function () {\n\n    var _rS = null;\n\n    var _usedJSHeapSize = 0,\n        _totalJSHeapSize = 0;\n\n    if ( window.performance && !performance.memory ) {\n        performance.memory = {\n            usedJSHeapSize: 0,\n            totalJSHeapSize: 0\n        };\n    }\n\n    if ( performance.memory.totalJSHeapSize === 0 ) {\n        console.warn( 'totalJSHeapSize === 0... performance.memory is only available in Chrome .' );\n    }\n\n    var _values = {\n        memory: {\n            caption: 'Used Memory',\n            average: true,\n            avgMs: 1000,\n            over: 22\n        },\n        total: {\n            caption: 'Total Memory'\n        }\n    };\n\n    var _groups = [ {\n        caption: 'Browser',\n        values: [ 'memory', 'total' ]\n    } ];\n\n    var _fractions = [ {\n        base: 'total',\n        steps: [ 'memory' ]\n    } ];\n\n    var log1024 = Math.log( 1024 );\n\n    function _size ( v ) {\n\n        var precision = 100; //Math.pow(10, 2);\n        var i = Math.floor( Math.log( v ) / log1024 );\n        return Math.round( v * precision / Math.pow( 1024, i ) ) / precision; // + ' ' + sizes[i];\n\n    }\n\n    function _update () {\n        _usedJSHeapSize = _size( performance.memory.usedJSHeapSize );\n        _totalJSHeapSize = _size( performance.memory.totalJSHeapSize );\n\n        _rS( 'memory' ).set( _usedJSHeapSize );\n        _rS( 'total' ).set( _totalJSHeapSize );\n    }\n\n    function _start () {\n        _usedJSHeapSize = 0;\n    }\n\n    function _end () {}\n\n    function _attach ( r ) {\n        _rS = r;\n    }\n\n    return {\n        update: _update,\n        start: _start,\n        end: _end,\n        attach: _attach,\n        values: _values,\n        groups: _groups,\n        fractions: _fractions\n    };\n\n};\n\nif (typeof module === 'object') {\n  module.exports = {\n    glStats: window.glStats,\n    threeStats: window.threeStats,\n    BrowserStats: window.BrowserStats\n  };\n}\n"]},"metadata":{},"sourceType":"script"}