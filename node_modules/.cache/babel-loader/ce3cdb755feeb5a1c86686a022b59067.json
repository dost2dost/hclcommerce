{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts a base64 string which represents a data url\n * into a Blob of the same contents.\n */\nexport const dataUrlToBlob = async base64DataUrl => {\n  return new Promise((resolve, reject) => {\n    const sliceSize = 512;\n    const typeMatch = base64DataUrl.match(/data:(.*);/);\n\n    if (!typeMatch) {\n      return reject(new Error(`${base64DataUrl} is not a valid data Url`));\n    }\n\n    const type = typeMatch[1];\n    const base64 = base64DataUrl.replace(/data:image\\/\\w+;base64,/, '');\n    const byteCharacters = atob(base64);\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n      const byteNumbers = new Array(slice.length);\n\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    resolve(new Blob(byteArrays, {\n      type\n    }));\n  });\n};","map":{"version":3,"sources":["../../src/utilities/data-conversion.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA;;;;AAIA,OAAO,MAAM,aAAa,GAAG,MAAM,aAAN,IAA8C;AACzE,SAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,UAAM,SAAS,GAAG,GAAlB;AACA,UAAM,SAAS,GAAG,aAAa,CAAC,KAAd,CAAoB,YAApB,CAAlB;;AAEA,QAAI,CAAC,SAAL,EAAgB;AACd,aAAO,MAAM,CAAC,IAAI,KAAJ,CAAU,GAAG,aAAa,0BAA1B,CAAD,CAAb;AACD;;AAED,UAAM,IAAI,GAAG,SAAS,CAAC,CAAD,CAAtB;AACA,UAAM,MAAM,GAAG,aAAa,CAAC,OAAd,CAAsB,yBAAtB,EAAiD,EAAjD,CAAf;AAEA,UAAM,cAAc,GAAG,IAAI,CAAC,MAAD,CAA3B;AACA,UAAM,UAAU,GAAG,EAAnB;;AAEA,SAAK,IAAI,MAAM,GAAG,CAAlB,EAAqB,MAAM,GAAG,cAAc,CAAC,MAA7C,EAAqD,MAAM,IAAI,SAA/D,EAA0E;AACxE,YAAM,KAAK,GAAG,cAAc,CAAC,KAAf,CAAqB,MAArB,EAA6B,MAAM,GAAG,SAAtC,CAAd;AAEA,YAAM,WAAW,GAAG,IAAI,KAAJ,CAAU,KAAK,CAAC,MAAhB,CAApB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,QAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,KAAK,CAAC,UAAN,CAAiB,CAAjB,CAAjB;AACD;;AAED,YAAM,SAAS,GAAG,IAAI,UAAJ,CAAe,WAAf,CAAlB;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB,SAAhB;AACD;;AAED,IAAA,OAAO,CAAC,IAAI,IAAJ,CAAS,UAAT,EAAqB;AAAC,MAAA;AAAD,KAArB,CAAD,CAAP;AACD,GA3BM,CAAP;AA4BD,CA7BM","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts a base64 string which represents a data url\n * into a Blob of the same contents.\n */\nexport const dataUrlToBlob = async(base64DataUrl: string): Promise<Blob> => {\n  return new Promise((resolve, reject) => {\n    const sliceSize = 512;\n    const typeMatch = base64DataUrl.match(/data:(.*);/);\n\n    if (!typeMatch) {\n      return reject(new Error(`${base64DataUrl} is not a valid data Url`));\n    }\n\n    const type = typeMatch[1];\n    const base64 = base64DataUrl.replace(/data:image\\/\\w+;base64,/, '');\n\n    const byteCharacters = atob(base64);\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n      const byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    resolve(new Blob(byteArrays, {type}));\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}