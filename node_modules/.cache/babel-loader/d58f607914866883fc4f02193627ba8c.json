{"ast":null,"code":"/**\n * Automated mesh primitive registration.\n */\nvar getMeshMixin = require('../getMeshMixin');\n\nvar geometries = require('../../../core/geometry').geometries;\n\nvar geometryNames = require('../../../core/geometry').geometryNames;\n\nvar registerPrimitive = require('../primitives').registerPrimitive;\n\nvar utils = require('../../../utils/'); // For testing.\n\n\nvar meshPrimitives = module.exports = {}; // Generate primitive for each geometry type.\n\ngeometryNames.forEach(function registerMeshPrimitive(geometryName) {\n  var geometry = geometries[geometryName];\n  var geometryHyphened = unCamelCase(geometryName); // Generate mappings.\n\n  var mappings = {};\n  Object.keys(geometry.schema).forEach(function createMapping(property) {\n    mappings[unCamelCase(property)] = 'geometry.' + property;\n  }); // Register.\n\n  var tagName = 'a-' + geometryHyphened;\n  var primitive = registerPrimitive(tagName, utils.extendDeep({}, getMeshMixin(), {\n    defaultComponents: {\n      geometry: {\n        primitive: geometryName\n      }\n    },\n    mappings: mappings\n  }));\n  meshPrimitives[tagName] = primitive;\n});\n/**\n * camelCase to hyphened-string.\n */\n\nfunction unCamelCase(str) {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/extras/primitives/primitives/meshPrimitives.js"],"names":["getMeshMixin","require","geometries","geometryNames","registerPrimitive","utils","meshPrimitives","module","exports","forEach","registerMeshPrimitive","geometryName","geometry","geometryHyphened","unCamelCase","mappings","Object","keys","schema","createMapping","property","tagName","primitive","extendDeep","defaultComponents","str","replace","toLowerCase"],"mappings":"AAAA;;;AAGA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,wBAAD,CAAP,CAAkCC,UAAnD;;AACA,IAAIC,aAAa,GAAGF,OAAO,CAAC,wBAAD,CAAP,CAAkCE,aAAtD;;AACA,IAAIC,iBAAiB,GAAGH,OAAO,CAAC,eAAD,CAAP,CAAyBG,iBAAjD;;AACA,IAAIC,KAAK,GAAGJ,OAAO,CAAC,iBAAD,CAAnB,C,CAEA;;;AACA,IAAIK,cAAc,GAAGC,MAAM,CAACC,OAAP,GAAiB,EAAtC,C,CAEA;;AACAL,aAAa,CAACM,OAAd,CAAsB,SAASC,qBAAT,CAAgCC,YAAhC,EAA8C;AAClE,MAAIC,QAAQ,GAAGV,UAAU,CAACS,YAAD,CAAzB;AACA,MAAIE,gBAAgB,GAAGC,WAAW,CAACH,YAAD,CAAlC,CAFkE,CAIlE;;AACA,MAAII,QAAQ,GAAG,EAAf;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYL,QAAQ,CAACM,MAArB,EAA6BT,OAA7B,CAAqC,SAASU,aAAT,CAAwBC,QAAxB,EAAkC;AACrEL,IAAAA,QAAQ,CAACD,WAAW,CAACM,QAAD,CAAZ,CAAR,GAAkC,cAAcA,QAAhD;AACD,GAFD,EANkE,CAUlE;;AACA,MAAIC,OAAO,GAAG,OAAOR,gBAArB;AACA,MAAIS,SAAS,GAAGlB,iBAAiB,CAACiB,OAAD,EAAUhB,KAAK,CAACkB,UAAN,CAAiB,EAAjB,EAAqBvB,YAAY,EAAjC,EAAqC;AAC9EwB,IAAAA,iBAAiB,EAAE;AAACZ,MAAAA,QAAQ,EAAE;AAACU,QAAAA,SAAS,EAAEX;AAAZ;AAAX,KAD2D;AAE9EI,IAAAA,QAAQ,EAAEA;AAFoE,GAArC,CAAV,CAAjC;AAIAT,EAAAA,cAAc,CAACe,OAAD,CAAd,GAA0BC,SAA1B;AACD,CAjBD;AAmBA;;;;AAGA,SAASR,WAAT,CAAsBW,GAAtB,EAA2B;AACzB,SAAOA,GAAG,CAACC,OAAJ,CAAY,iBAAZ,EAA+B,OAA/B,EAAwCC,WAAxC,EAAP;AACD","sourcesContent":["/**\n * Automated mesh primitive registration.\n */\nvar getMeshMixin = require('../getMeshMixin');\nvar geometries = require('../../../core/geometry').geometries;\nvar geometryNames = require('../../../core/geometry').geometryNames;\nvar registerPrimitive = require('../primitives').registerPrimitive;\nvar utils = require('../../../utils/');\n\n// For testing.\nvar meshPrimitives = module.exports = {};\n\n// Generate primitive for each geometry type.\ngeometryNames.forEach(function registerMeshPrimitive (geometryName) {\n  var geometry = geometries[geometryName];\n  var geometryHyphened = unCamelCase(geometryName);\n\n  // Generate mappings.\n  var mappings = {};\n  Object.keys(geometry.schema).forEach(function createMapping (property) {\n    mappings[unCamelCase(property)] = 'geometry.' + property;\n  });\n\n  // Register.\n  var tagName = 'a-' + geometryHyphened;\n  var primitive = registerPrimitive(tagName, utils.extendDeep({}, getMeshMixin(), {\n    defaultComponents: {geometry: {primitive: geometryName}},\n    mappings: mappings\n  }));\n  meshPrimitives[tagName] = primitive;\n});\n\n/**\n * camelCase to hyphened-string.\n */\nfunction unCamelCase (str) {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n"]},"metadata":{},"sourceType":"script"}