{"ast":null,"code":"var registerComponent = require('../core/component').registerComponent;\n\nvar bind = require('../utils/bind');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\n\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\nvar GAMEPAD_ID_PREFIX = 'HTC Vive Focus';\nvar VIVE_FOCUS_CONTROLLER_MODEL_URL = 'https://cdn.aframe.io/controllers/vive/focus-controller/focus-controller.gltf';\n/**\n * Vive Focus controls.\n * Interface with Vive Focus controller and map Gamepad events to\n * controller buttons: trackpad, trigger\n * Load a controller model and highlight the pressed buttons.\n */\n\nmodule.exports.Component = registerComponent('vive-focus-controls', {\n  schema: {\n    hand: {\n      default: ''\n    },\n    // This informs the degenerate arm model.\n    buttonTouchedColor: {\n      type: 'color',\n      default: '#BBBBBB'\n    },\n    buttonHighlightColor: {\n      type: 'color',\n      default: '#7A7A7A'\n    },\n    model: {\n      default: true\n    },\n    orientationOffset: {\n      type: 'vec3'\n    },\n    armModel: {\n      default: true\n    }\n  },\n\n  /**\n   * Button IDs:\n   * 0 - trackpad\n   * 1 - trigger\n   */\n  mapping: {\n    axes: {\n      trackpad: [0, 1]\n    },\n    buttons: ['trackpad', 'trigger']\n  },\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.removeControllersUpdateListener = bind(this.removeControllersUpdateListener, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n  init: function () {\n    var self = this;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n\n    this.onButtonDown = function (evt) {\n      onButtonEvent(evt.detail.id, 'down', self);\n    };\n\n    this.onButtonUp = function (evt) {\n      onButtonEvent(evt.detail.id, 'up', self);\n    };\n\n    this.onButtonTouchStart = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchstart', self);\n    };\n\n    this.onButtonTouchEnd = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchend', self);\n    };\n\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.bindMethods();\n  },\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    el.addEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = true;\n    this.addControllersUpdateListener();\n  },\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('model-loaded', this.onModelLoaded);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = false;\n    this.removeControllersUpdateListener();\n  },\n  checkIfControllerPresent: function () {\n    checkControllerPresentAndSetup(this, GAMEPAD_ID_PREFIX, this.data.hand ? {\n      hand: this.data.hand\n    } : {});\n  },\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n  injectTrackedControls: function () {\n    var el = this.el;\n    var data = this.data;\n    el.setAttribute('tracked-controls', {\n      armModel: data.armModel,\n      idPrefix: GAMEPAD_ID_PREFIX,\n      orientationOffset: data.orientationOffset\n    });\n\n    if (!this.data.model) {\n      return;\n    }\n\n    this.el.setAttribute('gltf-model', VIVE_FOCUS_CONTROLLER_MODEL_URL);\n  },\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  onControllersUpdate: function () {\n    this.checkIfControllerPresent();\n  },\n  onModelLoaded: function (evt) {\n    var controllerObject3D = evt.detail.model;\n    var buttonMeshes;\n\n    if (!this.data.model) {\n      return;\n    }\n\n    buttonMeshes = this.buttonMeshes = {};\n    buttonMeshes.trigger = controllerObject3D.getObjectByName('BumperKey');\n    buttonMeshes.triggerPressed = controllerObject3D.getObjectByName('BumperKey_Press');\n\n    if (buttonMeshes.triggerPressed) {\n      buttonMeshes.triggerPressed.visible = false;\n    }\n\n    buttonMeshes.trackpad = controllerObject3D.getObjectByName('TouchPad');\n    buttonMeshes.trackpadPressed = controllerObject3D.getObjectByName('TouchPad_Press');\n\n    if (buttonMeshes.trackpadPressed) {\n      buttonMeshes.trackpadPressed.visible = false;\n    }\n  },\n  // No analog buttons, only emits 0/1 values\n  onButtonChanged: function (evt) {\n    var button = this.mapping.buttons[evt.detail.id];\n    if (!button) return; // Pass along changed event with button state, using button mapping for convenience.\n\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping.axes, evt);\n  },\n  updateModel: function (buttonName, evtName) {\n    if (!this.data.model) {\n      return;\n    }\n\n    this.updateButtonModel(buttonName, evtName);\n  },\n  updateButtonModel: function (buttonName, state) {\n    var buttonMeshes = this.buttonMeshes;\n    var pressedName = buttonName + 'Pressed';\n\n    if (!buttonMeshes || !buttonMeshes[buttonName] || !buttonMeshes[pressedName]) {\n      return;\n    }\n\n    var color;\n\n    switch (state) {\n      case 'down':\n        color = this.data.buttonHighlightColor;\n        break;\n\n      case 'touchstart':\n        color = this.data.buttonTouchedColor;\n        break;\n    }\n\n    if (color) {\n      buttonMeshes[pressedName].material.color.set(color);\n    }\n\n    buttonMeshes[pressedName].visible = !!color;\n    buttonMeshes[buttonName].visible = !color;\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/vive-focus-controls.js"],"names":["registerComponent","require","bind","trackedControlsUtils","checkControllerPresentAndSetup","emitIfAxesChanged","onButtonEvent","GAMEPAD_ID_PREFIX","VIVE_FOCUS_CONTROLLER_MODEL_URL","module","exports","Component","schema","hand","default","buttonTouchedColor","type","buttonHighlightColor","model","orientationOffset","armModel","mapping","axes","trackpad","buttons","bindMethods","onModelLoaded","onControllersUpdate","checkIfControllerPresent","removeControllersUpdateListener","onAxisMoved","init","self","onButtonChanged","onButtonDown","evt","detail","id","onButtonUp","onButtonTouchStart","onButtonTouchEnd","controllerPresent","lastControllerCheck","addEventListeners","el","addEventListener","controllerEventsActive","addControllersUpdateListener","removeEventListeners","removeEventListener","data","play","pause","injectTrackedControls","setAttribute","idPrefix","sceneEl","controllerObject3D","buttonMeshes","trigger","getObjectByName","triggerPressed","visible","trackpadPressed","button","emit","state","updateModel","buttonName","evtName","updateButtonModel","pressedName","color","material","set"],"mappings":"AAAA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,mBAAD,CAAP,CAA6BD,iBAArD;;AACA,IAAIE,IAAI,GAAGD,OAAO,CAAC,eAAD,CAAlB;;AAEA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,2BAAD,CAAlC;;AACA,IAAIG,8BAA8B,GAAGD,oBAAoB,CAACC,8BAA1D;AACA,IAAIC,iBAAiB,GAAGF,oBAAoB,CAACE,iBAA7C;AACA,IAAIC,aAAa,GAAGH,oBAAoB,CAACG,aAAzC;AAEA,IAAIC,iBAAiB,GAAG,gBAAxB;AAEA,IAAIC,+BAA+B,GAAG,+EAAtC;AAEA;;;;;;;AAMAC,MAAM,CAACC,OAAP,CAAeC,SAAf,GAA2BX,iBAAiB,CAAC,qBAAD,EAAwB;AAClEY,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV,KADA;AACgB;AACtBC,IAAAA,kBAAkB,EAAE;AAACC,MAAAA,IAAI,EAAE,OAAP;AAAgBF,MAAAA,OAAO,EAAE;AAAzB,KAFd;AAGNG,IAAAA,oBAAoB,EAAE;AAACD,MAAAA,IAAI,EAAE,OAAP;AAAgBF,MAAAA,OAAO,EAAE;AAAzB,KAHhB;AAINI,IAAAA,KAAK,EAAE;AAACJ,MAAAA,OAAO,EAAE;AAAV,KAJD;AAKNK,IAAAA,iBAAiB,EAAE;AAACH,MAAAA,IAAI,EAAE;AAAP,KALb;AAMNI,IAAAA,QAAQ,EAAE;AAACN,MAAAA,OAAO,EAAE;AAAV;AANJ,GAD0D;;AAUlE;;;;;AAKAO,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AAACC,MAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAX,KADC;AAEPC,IAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,SAAb;AAFF,GAfyD;AAoBlEC,EAAAA,WAAW,EAAE,YAAY;AACvB,SAAKC,aAAL,GAAqBxB,IAAI,CAAC,KAAKwB,aAAN,EAAqB,IAArB,CAAzB;AACA,SAAKC,mBAAL,GAA2BzB,IAAI,CAAC,KAAKyB,mBAAN,EAA2B,IAA3B,CAA/B;AACA,SAAKC,wBAAL,GAAgC1B,IAAI,CAAC,KAAK0B,wBAAN,EAAgC,IAAhC,CAApC;AACA,SAAKC,+BAAL,GAAuC3B,IAAI,CAAC,KAAK2B,+BAAN,EAAuC,IAAvC,CAA3C;AACA,SAAKC,WAAL,GAAmB5B,IAAI,CAAC,KAAK4B,WAAN,EAAmB,IAAnB,CAAvB;AACD,GA1BiE;AA4BlEC,EAAAA,IAAI,EAAE,YAAY;AAChB,QAAIC,IAAI,GAAG,IAAX;AACA,SAAKC,eAAL,GAAuB/B,IAAI,CAAC,KAAK+B,eAAN,EAAuB,IAAvB,CAA3B;;AACA,SAAKC,YAAL,GAAoB,UAAUC,GAAV,EAAe;AAAE7B,MAAAA,aAAa,CAAC6B,GAAG,CAACC,MAAJ,CAAWC,EAAZ,EAAgB,MAAhB,EAAwBL,IAAxB,CAAb;AAA6C,KAAlF;;AACA,SAAKM,UAAL,GAAkB,UAAUH,GAAV,EAAe;AAAE7B,MAAAA,aAAa,CAAC6B,GAAG,CAACC,MAAJ,CAAWC,EAAZ,EAAgB,IAAhB,EAAsBL,IAAtB,CAAb;AAA2C,KAA9E;;AACA,SAAKO,kBAAL,GAA0B,UAAUJ,GAAV,EAAe;AAAE7B,MAAAA,aAAa,CAAC6B,GAAG,CAACC,MAAJ,CAAWC,EAAZ,EAAgB,YAAhB,EAA8BL,IAA9B,CAAb;AAAmD,KAA9F;;AACA,SAAKQ,gBAAL,GAAwB,UAAUL,GAAV,EAAe;AAAE7B,MAAAA,aAAa,CAAC6B,GAAG,CAACC,MAAJ,CAAWC,EAAZ,EAAgB,UAAhB,EAA4BL,IAA5B,CAAb;AAAiD,KAA1F;;AACA,SAAKS,iBAAL,GAAyB,KAAzB;AACA,SAAKC,mBAAL,GAA2B,CAA3B;AACA,SAAKjB,WAAL;AACD,GAtCiE;AAwClEkB,EAAAA,iBAAiB,EAAE,YAAY;AAC7B,QAAIC,EAAE,GAAG,KAAKA,EAAd;AACAA,IAAAA,EAAE,CAACC,gBAAH,CAAoB,eAApB,EAAqC,KAAKZ,eAA1C;AACAW,IAAAA,EAAE,CAACC,gBAAH,CAAoB,YAApB,EAAkC,KAAKX,YAAvC;AACAU,IAAAA,EAAE,CAACC,gBAAH,CAAoB,UAApB,EAAgC,KAAKP,UAArC;AACAM,IAAAA,EAAE,CAACC,gBAAH,CAAoB,YAApB,EAAkC,KAAKN,kBAAvC;AACAK,IAAAA,EAAE,CAACC,gBAAH,CAAoB,UAApB,EAAgC,KAAKL,gBAArC;AACAI,IAAAA,EAAE,CAACC,gBAAH,CAAoB,cAApB,EAAoC,KAAKnB,aAAzC;AACAkB,IAAAA,EAAE,CAACC,gBAAH,CAAoB,UAApB,EAAgC,KAAKf,WAArC;AACA,SAAKgB,sBAAL,GAA8B,IAA9B;AACA,SAAKC,4BAAL;AACD,GAnDiE;AAqDlEC,EAAAA,oBAAoB,EAAE,YAAY;AAChC,QAAIJ,EAAE,GAAG,KAAKA,EAAd;AACAA,IAAAA,EAAE,CAACK,mBAAH,CAAuB,eAAvB,EAAwC,KAAKhB,eAA7C;AACAW,IAAAA,EAAE,CAACK,mBAAH,CAAuB,YAAvB,EAAqC,KAAKf,YAA1C;AACAU,IAAAA,EAAE,CAACK,mBAAH,CAAuB,UAAvB,EAAmC,KAAKX,UAAxC;AACAM,IAAAA,EAAE,CAACK,mBAAH,CAAuB,YAAvB,EAAqC,KAAKV,kBAA1C;AACAK,IAAAA,EAAE,CAACK,mBAAH,CAAuB,UAAvB,EAAmC,KAAKT,gBAAxC;AACAI,IAAAA,EAAE,CAACK,mBAAH,CAAuB,cAAvB,EAAuC,KAAKvB,aAA5C;AACAkB,IAAAA,EAAE,CAACK,mBAAH,CAAuB,UAAvB,EAAmC,KAAKnB,WAAxC;AACA,SAAKgB,sBAAL,GAA8B,KAA9B;AACA,SAAKjB,+BAAL;AACD,GAhEiE;AAkElED,EAAAA,wBAAwB,EAAE,YAAY;AACpCxB,IAAAA,8BAA8B,CAAC,IAAD,EAAOG,iBAAP,EACM,KAAK2C,IAAL,CAAUrC,IAAV,GAAiB;AAACA,MAAAA,IAAI,EAAE,KAAKqC,IAAL,CAAUrC;AAAjB,KAAjB,GAA0C,EADhD,CAA9B;AAED,GArEiE;AAuElEsC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKvB,wBAAL;AACA,SAAKmB,4BAAL;AACD,GA1EiE;AA4ElEK,EAAAA,KAAK,EAAE,YAAY;AACjB,SAAKJ,oBAAL;AACA,SAAKnB,+BAAL;AACD,GA/EiE;AAiFlEwB,EAAAA,qBAAqB,EAAE,YAAY;AACjC,QAAIT,EAAE,GAAG,KAAKA,EAAd;AACA,QAAIM,IAAI,GAAG,KAAKA,IAAhB;AACAN,IAAAA,EAAE,CAACU,YAAH,CAAgB,kBAAhB,EAAoC;AAClClC,MAAAA,QAAQ,EAAE8B,IAAI,CAAC9B,QADmB;AAElCmC,MAAAA,QAAQ,EAAEhD,iBAFwB;AAGlCY,MAAAA,iBAAiB,EAAE+B,IAAI,CAAC/B;AAHU,KAApC;;AAKA,QAAI,CAAC,KAAK+B,IAAL,CAAUhC,KAAf,EAAsB;AAAE;AAAS;;AACjC,SAAK0B,EAAL,CAAQU,YAAR,CAAqB,YAArB,EAAmC9C,+BAAnC;AACD,GA3FiE;AA6FlEuC,EAAAA,4BAA4B,EAAE,YAAY;AACxC,SAAKH,EAAL,CAAQY,OAAR,CAAgBX,gBAAhB,CAAiC,oBAAjC,EAAuD,KAAKlB,mBAA5D,EAAiF,KAAjF;AACD,GA/FiE;AAiGlEE,EAAAA,+BAA+B,EAAE,YAAY;AAC3C,SAAKe,EAAL,CAAQY,OAAR,CAAgBP,mBAAhB,CAAoC,oBAApC,EAA0D,KAAKtB,mBAA/D,EAAoF,KAApF;AACD,GAnGiE;AAqGlEA,EAAAA,mBAAmB,EAAE,YAAY;AAC/B,SAAKC,wBAAL;AACD,GAvGiE;AAyGlEF,EAAAA,aAAa,EAAE,UAAUS,GAAV,EAAe;AAC5B,QAAIsB,kBAAkB,GAAGtB,GAAG,CAACC,MAAJ,CAAWlB,KAApC;AACA,QAAIwC,YAAJ;;AAEA,QAAI,CAAC,KAAKR,IAAL,CAAUhC,KAAf,EAAsB;AAAE;AAAS;;AACjCwC,IAAAA,YAAY,GAAG,KAAKA,YAAL,GAAoB,EAAnC;AACAA,IAAAA,YAAY,CAACC,OAAb,GAAuBF,kBAAkB,CAACG,eAAnB,CAAmC,WAAnC,CAAvB;AACAF,IAAAA,YAAY,CAACG,cAAb,GAA8BJ,kBAAkB,CAACG,eAAnB,CAAmC,iBAAnC,CAA9B;;AACA,QAAIF,YAAY,CAACG,cAAjB,EAAiC;AAC/BH,MAAAA,YAAY,CAACG,cAAb,CAA4BC,OAA5B,GAAsC,KAAtC;AACD;;AACDJ,IAAAA,YAAY,CAACnC,QAAb,GAAwBkC,kBAAkB,CAACG,eAAnB,CAAmC,UAAnC,CAAxB;AACAF,IAAAA,YAAY,CAACK,eAAb,GAA+BN,kBAAkB,CAACG,eAAnB,CAAmC,gBAAnC,CAA/B;;AACA,QAAIF,YAAY,CAACK,eAAjB,EAAkC;AAChCL,MAAAA,YAAY,CAACK,eAAb,CAA6BD,OAA7B,GAAuC,KAAvC;AACD;AACF,GAzHiE;AA2HlE;AACA7B,EAAAA,eAAe,EAAE,UAAUE,GAAV,EAAe;AAC9B,QAAI6B,MAAM,GAAG,KAAK3C,OAAL,CAAaG,OAAb,CAAqBW,GAAG,CAACC,MAAJ,CAAWC,EAAhC,CAAb;AACA,QAAI,CAAC2B,MAAL,EAAa,OAFiB,CAG9B;;AACA,SAAKpB,EAAL,CAAQqB,IAAR,CAAaD,MAAM,GAAG,SAAtB,EAAiC7B,GAAG,CAACC,MAAJ,CAAW8B,KAA5C;AACD,GAjIiE;AAmIlEpC,EAAAA,WAAW,EAAE,UAAUK,GAAV,EAAe;AAC1B9B,IAAAA,iBAAiB,CAAC,IAAD,EAAO,KAAKgB,OAAL,CAAaC,IAApB,EAA0Ba,GAA1B,CAAjB;AACD,GArIiE;AAuIlEgC,EAAAA,WAAW,EAAE,UAAUC,UAAV,EAAsBC,OAAtB,EAA+B;AAC1C,QAAI,CAAC,KAAKnB,IAAL,CAAUhC,KAAf,EAAsB;AAAE;AAAS;;AACjC,SAAKoD,iBAAL,CAAuBF,UAAvB,EAAmCC,OAAnC;AACD,GA1IiE;AA4IlEC,EAAAA,iBAAiB,EAAE,UAAUF,UAAV,EAAsBF,KAAtB,EAA6B;AAC9C,QAAIR,YAAY,GAAG,KAAKA,YAAxB;AACA,QAAIa,WAAW,GAAGH,UAAU,GAAG,SAA/B;;AACA,QAAI,CAACV,YAAD,IAAiB,CAACA,YAAY,CAACU,UAAD,CAA9B,IAA8C,CAACV,YAAY,CAACa,WAAD,CAA/D,EAA8E;AAC5E;AACD;;AACD,QAAIC,KAAJ;;AACA,YAAQN,KAAR;AACE,WAAK,MAAL;AACEM,QAAAA,KAAK,GAAG,KAAKtB,IAAL,CAAUjC,oBAAlB;AACA;;AACF,WAAK,YAAL;AACEuD,QAAAA,KAAK,GAAG,KAAKtB,IAAL,CAAUnC,kBAAlB;AACA;AANJ;;AAQA,QAAIyD,KAAJ,EAAW;AACTd,MAAAA,YAAY,CAACa,WAAD,CAAZ,CAA0BE,QAA1B,CAAmCD,KAAnC,CAAyCE,GAAzC,CAA6CF,KAA7C;AACD;;AACDd,IAAAA,YAAY,CAACa,WAAD,CAAZ,CAA0BT,OAA1B,GAAoC,CAAC,CAACU,KAAtC;AACAd,IAAAA,YAAY,CAACU,UAAD,CAAZ,CAAyBN,OAAzB,GAAmC,CAACU,KAApC;AACD;AAhKiE,CAAxB,CAA5C","sourcesContent":["var registerComponent = require('../core/component').registerComponent;\nvar bind = require('../utils/bind');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\n\nvar GAMEPAD_ID_PREFIX = 'HTC Vive Focus';\n\nvar VIVE_FOCUS_CONTROLLER_MODEL_URL = 'https://cdn.aframe.io/controllers/vive/focus-controller/focus-controller.gltf';\n\n/**\n * Vive Focus controls.\n * Interface with Vive Focus controller and map Gamepad events to\n * controller buttons: trackpad, trigger\n * Load a controller model and highlight the pressed buttons.\n */\nmodule.exports.Component = registerComponent('vive-focus-controls', {\n  schema: {\n    hand: {default: ''},  // This informs the degenerate arm model.\n    buttonTouchedColor: {type: 'color', default: '#BBBBBB'},\n    buttonHighlightColor: {type: 'color', default: '#7A7A7A'},\n    model: {default: true},\n    orientationOffset: {type: 'vec3'},\n    armModel: {default: true}\n  },\n\n  /**\n   * Button IDs:\n   * 0 - trackpad\n   * 1 - trigger\n   */\n  mapping: {\n    axes: {trackpad: [0, 1]},\n    buttons: ['trackpad', 'trigger']\n  },\n\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.removeControllersUpdateListener = bind(this.removeControllersUpdateListener, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n\n  init: function () {\n    var self = this;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n    this.onButtonDown = function (evt) { onButtonEvent(evt.detail.id, 'down', self); };\n    this.onButtonUp = function (evt) { onButtonEvent(evt.detail.id, 'up', self); };\n    this.onButtonTouchStart = function (evt) { onButtonEvent(evt.detail.id, 'touchstart', self); };\n    this.onButtonTouchEnd = function (evt) { onButtonEvent(evt.detail.id, 'touchend', self); };\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.bindMethods();\n  },\n\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    el.addEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = true;\n    this.addControllersUpdateListener();\n  },\n\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('model-loaded', this.onModelLoaded);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = false;\n    this.removeControllersUpdateListener();\n  },\n\n  checkIfControllerPresent: function () {\n    checkControllerPresentAndSetup(this, GAMEPAD_ID_PREFIX,\n                                        this.data.hand ? {hand: this.data.hand} : {});\n  },\n\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n\n  injectTrackedControls: function () {\n    var el = this.el;\n    var data = this.data;\n    el.setAttribute('tracked-controls', {\n      armModel: data.armModel,\n      idPrefix: GAMEPAD_ID_PREFIX,\n      orientationOffset: data.orientationOffset\n    });\n    if (!this.data.model) { return; }\n    this.el.setAttribute('gltf-model', VIVE_FOCUS_CONTROLLER_MODEL_URL);\n  },\n\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  onControllersUpdate: function () {\n    this.checkIfControllerPresent();\n  },\n\n  onModelLoaded: function (evt) {\n    var controllerObject3D = evt.detail.model;\n    var buttonMeshes;\n\n    if (!this.data.model) { return; }\n    buttonMeshes = this.buttonMeshes = {};\n    buttonMeshes.trigger = controllerObject3D.getObjectByName('BumperKey');\n    buttonMeshes.triggerPressed = controllerObject3D.getObjectByName('BumperKey_Press');\n    if (buttonMeshes.triggerPressed) {\n      buttonMeshes.triggerPressed.visible = false;\n    }\n    buttonMeshes.trackpad = controllerObject3D.getObjectByName('TouchPad');\n    buttonMeshes.trackpadPressed = controllerObject3D.getObjectByName('TouchPad_Press');\n    if (buttonMeshes.trackpadPressed) {\n      buttonMeshes.trackpadPressed.visible = false;\n    }\n  },\n\n  // No analog buttons, only emits 0/1 values\n  onButtonChanged: function (evt) {\n    var button = this.mapping.buttons[evt.detail.id];\n    if (!button) return;\n    // Pass along changed event with button state, using button mapping for convenience.\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping.axes, evt);\n  },\n\n  updateModel: function (buttonName, evtName) {\n    if (!this.data.model) { return; }\n    this.updateButtonModel(buttonName, evtName);\n  },\n\n  updateButtonModel: function (buttonName, state) {\n    var buttonMeshes = this.buttonMeshes;\n    var pressedName = buttonName + 'Pressed';\n    if (!buttonMeshes || !buttonMeshes[buttonName] || !buttonMeshes[pressedName]) {\n      return;\n    }\n    var color;\n    switch (state) {\n      case 'down':\n        color = this.data.buttonHighlightColor;\n        break;\n      case 'touchstart':\n        color = this.data.buttonTouchedColor;\n        break;\n    }\n    if (color) {\n      buttonMeshes[pressedName].material.color.set(color);\n    }\n    buttonMeshes[pressedName].visible = !!color;\n    buttonMeshes[buttonName].visible = !color;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}