{"ast":null,"code":"var registerComponent = require('../core/component').registerComponent;\n\nvar utils = require('../utils/');\n\nregisterComponent('laser-controls', {\n  schema: {\n    hand: {\n      default: 'right'\n    },\n    model: {\n      default: true\n    },\n    defaultModelColor: {\n      type: 'color',\n      default: 'grey'\n    }\n  },\n  init: function () {\n    var config = this.config;\n    var data = this.data;\n    var el = this.el;\n    var self = this;\n    var controlsConfiguration = {\n      hand: data.hand,\n      model: data.model\n    }; // Set all controller models.\n\n    el.setAttribute('daydream-controls', controlsConfiguration);\n    el.setAttribute('gearvr-controls', controlsConfiguration);\n    el.setAttribute('oculus-go-controls', controlsConfiguration);\n    el.setAttribute('oculus-touch-controls', controlsConfiguration);\n    el.setAttribute('vive-controls', controlsConfiguration);\n    el.setAttribute('vive-focus-controls', controlsConfiguration);\n    el.setAttribute('windows-motion-controls', controlsConfiguration);\n    el.setAttribute('generic-tracked-controller-controls', controlsConfiguration); // Wait for controller to connect, or have a valid pointing pose, before creating ray\n\n    el.addEventListener('controllerconnected', createRay);\n    el.addEventListener('controllerdisconnected', hideRay);\n    el.addEventListener('controllermodelready', function (evt) {\n      createRay(evt);\n      self.modelReady = true;\n    });\n\n    function createRay(evt) {\n      var controllerConfig = config[evt.detail.name];\n\n      if (!controllerConfig) {\n        return;\n      } // Show the line unless a particular config opts to hide it, until a controllermodelready\n      // event comes through.\n\n\n      var raycasterConfig = utils.extend({\n        showLine: true\n      }, controllerConfig.raycaster || {}); // The controllermodelready event contains a rayOrigin that takes into account\n      // offsets specific to the loaded model.\n\n      if (evt.detail.rayOrigin) {\n        raycasterConfig.origin = evt.detail.rayOrigin.origin;\n        raycasterConfig.direction = evt.detail.rayOrigin.direction;\n        raycasterConfig.showLine = true;\n      } // Only apply a default raycaster if it does not yet exist. This prevents it overwriting\n      // config applied from a controllermodelready event.\n\n\n      if (evt.detail.rayOrigin || !self.modelReady) {\n        el.setAttribute('raycaster', raycasterConfig);\n      } else {\n        el.setAttribute('raycaster', 'showLine', true);\n      }\n\n      el.setAttribute('cursor', utils.extend({\n        fuse: false\n      }, controllerConfig.cursor));\n    }\n\n    function hideRay() {\n      el.setAttribute('raycaster', 'showLine', false);\n    }\n  },\n  config: {\n    'daydream-controls': {\n      cursor: {\n        downEvents: ['trackpaddown', 'triggerdown'],\n        upEvents: ['trackpadup', 'triggerup']\n      }\n    },\n    'gearvr-controls': {\n      cursor: {\n        downEvents: ['triggerdown'],\n        upEvents: ['triggerup']\n      },\n      raycaster: {\n        origin: {\n          x: 0,\n          y: 0.0010,\n          z: 0\n        }\n      }\n    },\n    'generic-tracked-controller-controls': {\n      cursor: {\n        downEvents: ['triggerdown'],\n        upEvents: ['triggerup']\n      }\n    },\n    'oculus-go-controls': {\n      cursor: {\n        downEvents: ['triggerdown'],\n        upEvents: ['triggerup']\n      },\n      raycaster: {\n        origin: {\n          x: 0,\n          y: 0.0005,\n          z: 0\n        }\n      }\n    },\n    'oculus-touch-controls': {\n      cursor: {\n        downEvents: ['triggerdown'],\n        upEvents: ['triggerup']\n      },\n      raycaster: {\n        origin: {\n          x: 0,\n          y: 0,\n          z: 0\n        }\n      }\n    },\n    'vive-controls': {\n      cursor: {\n        downEvents: ['triggerdown'],\n        upEvents: ['triggerup']\n      }\n    },\n    'vive-focus-controls': {\n      cursor: {\n        downEvents: ['trackpaddown', 'triggerdown'],\n        upEvents: ['trackpadup', 'triggerup']\n      }\n    },\n    'windows-motion-controls': {\n      cursor: {\n        downEvents: ['triggerdown'],\n        upEvents: ['triggerup']\n      },\n      raycaster: {\n        showLine: false\n      }\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/laser-controls.js"],"names":["registerComponent","require","utils","schema","hand","default","model","defaultModelColor","type","init","config","data","el","self","controlsConfiguration","setAttribute","addEventListener","createRay","hideRay","evt","modelReady","controllerConfig","detail","name","raycasterConfig","extend","showLine","raycaster","rayOrigin","origin","direction","fuse","cursor","downEvents","upEvents","x","y","z"],"mappings":"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","sourcesContent":["var registerComponent = require('../core/component').registerComponent;\nvar utils = require('../utils/');\n\nregisterComponent('laser-controls', {\n  schema: {\n    hand: {default: 'right'},\n    model: {default: true},\n    defaultModelColor: {type: 'color', default: 'grey'}\n  },\n\n  init: function () {\n    var config = this.config;\n    var data = this.data;\n    var el = this.el;\n    var self = this;\n    var controlsConfiguration = {hand: data.hand, model: data.model};\n\n    // Set all controller models.\n    el.setAttribute('daydream-controls', controlsConfiguration);\n    el.setAttribute('gearvr-controls', controlsConfiguration);\n    el.setAttribute('oculus-go-controls', controlsConfiguration);\n    el.setAttribute('oculus-touch-controls', controlsConfiguration);\n    el.setAttribute('vive-controls', controlsConfiguration);\n    el.setAttribute('vive-focus-controls', controlsConfiguration);\n    el.setAttribute('windows-motion-controls', controlsConfiguration);\n    el.setAttribute('generic-tracked-controller-controls', controlsConfiguration);\n\n    // Wait for controller to connect, or have a valid pointing pose, before creating ray\n    el.addEventListener('controllerconnected', createRay);\n    el.addEventListener('controllerdisconnected', hideRay);\n    el.addEventListener('controllermodelready', function (evt) {\n      createRay(evt);\n      self.modelReady = true;\n    });\n\n    function createRay (evt) {\n      var controllerConfig = config[evt.detail.name];\n\n      if (!controllerConfig) { return; }\n\n      // Show the line unless a particular config opts to hide it, until a controllermodelready\n      // event comes through.\n      var raycasterConfig = utils.extend({\n        showLine: true\n      }, controllerConfig.raycaster || {});\n\n      // The controllermodelready event contains a rayOrigin that takes into account\n      // offsets specific to the loaded model.\n      if (evt.detail.rayOrigin) {\n        raycasterConfig.origin = evt.detail.rayOrigin.origin;\n        raycasterConfig.direction = evt.detail.rayOrigin.direction;\n        raycasterConfig.showLine = true;\n      }\n\n      // Only apply a default raycaster if it does not yet exist. This prevents it overwriting\n      // config applied from a controllermodelready event.\n      if (evt.detail.rayOrigin || !self.modelReady) {\n        el.setAttribute('raycaster', raycasterConfig);\n      } else {\n        el.setAttribute('raycaster', 'showLine', true);\n      }\n\n      el.setAttribute('cursor', utils.extend({\n        fuse: false\n      }, controllerConfig.cursor));\n    }\n\n    function hideRay () {\n      el.setAttribute('raycaster', 'showLine', false);\n    }\n  },\n\n  config: {\n    'daydream-controls': {\n      cursor: {downEvents: ['trackpaddown', 'triggerdown'], upEvents: ['trackpadup', 'triggerup']}\n    },\n\n    'gearvr-controls': {\n      cursor: {downEvents: ['triggerdown'], upEvents: ['triggerup']},\n      raycaster: {origin: {x: 0, y: 0.0010, z: 0}}\n    },\n\n    'generic-tracked-controller-controls': {\n      cursor: {downEvents: ['triggerdown'], upEvents: ['triggerup']}\n    },\n\n    'oculus-go-controls': {\n      cursor: {downEvents: ['triggerdown'], upEvents: ['triggerup']},\n      raycaster: {origin: {x: 0, y: 0.0005, z: 0}}\n    },\n\n    'oculus-touch-controls': {\n      cursor: {downEvents: ['triggerdown'], upEvents: ['triggerup']},\n      raycaster: {origin: {x: 0, y: 0, z: 0}}\n    },\n\n    'vive-controls': {\n      cursor: {downEvents: ['triggerdown'], upEvents: ['triggerup']}\n    },\n\n    'vive-focus-controls': {\n      cursor: {downEvents: ['trackpaddown', 'triggerdown'], upEvents: ['trackpadup', 'triggerup']}\n    },\n\n    'windows-motion-controls': {\n      cursor: {downEvents: ['triggerdown'], upEvents: ['triggerup']},\n      raycaster: {showLine: false}\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}