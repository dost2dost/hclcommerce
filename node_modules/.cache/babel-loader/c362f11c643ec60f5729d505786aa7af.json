{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\n\nimport { EventDispatcher } from 'three';\nimport { debounce, getFirstMapKey } from '../../utilities.js';\nexport const INITIAL_STATUS_ANNOUNCEMENT = 'This page includes one or more 3D models that are loading';\nexport const FINISHED_LOADING_ANNOUNCEMENT = 'All 3D models in the page have loaded';\nconst UPDATE_STATUS_DEBOUNCE_MS = 100;\nconst $modelViewerStatusInstance = Symbol('modelViewerStatusInstance');\nconst $updateStatus = Symbol('updateStatus');\n/**\n * The LoadingStatusAnnouncer manages announcements of loading status across\n * all <model-viewer> elements in the document at any given time. As new\n * <model-viewer> elements are connected to the document, they are registered\n * with a LoadingStatusAnnouncer singleton. As they are disconnected, the are\n * also unregistered. Announcements are made to indicate the following\n * conditions:\n *\n *  1. There are <model-viewer> elements that have yet to finish loading\n *  2. All <model-viewer> elements in the page have finished attempting to load\n */\n\nexport class LoadingStatusAnnouncer extends EventDispatcher {\n  constructor() {\n    super();\n    /**\n     * The \"status\" instance is the <model-viewer> instance currently designated\n     * to announce the loading status of all <model-viewer> elements in the\n     * document at any given time. It might change as <model-viewer> elements are\n     * attached or detached over time.\n     */\n\n    this[_a] = null;\n    this.registeredInstanceStatuses = new Map();\n    this.loadingPromises = [];\n    /**\n     * This element is a node that floats around the document as the status\n     * instance changes (see above). It is a singleton that represents the loading\n     * status for all <model-viewer> elements currently in the page. It has its\n     * role attribute set to \"status\", which causes screen readers to announce\n     * any changes to its text content.\n     *\n     * @see https://www.w3.org/TR/wai-aria-1.1/#status\n     */\n\n    this.statusElement = document.createElement('p');\n    this.statusUpdateInProgress = false;\n    this[_b] = debounce(() => this.updateStatus(), UPDATE_STATUS_DEBOUNCE_MS);\n    const statusElement = this.statusElement;\n    const style = statusElement.style;\n    statusElement.setAttribute('role', 'status');\n    statusElement.classList.add('screen-reader-only');\n    style.top = style.left = '0';\n    style.pointerEvents = 'none';\n  }\n  /**\n   * Register a <model-viewer> element with the announcer. If it is not yet\n   * loaded, its loading status will be tracked by the announcer.\n   */\n\n\n  registerInstance(modelViewer) {\n    if (this.registeredInstanceStatuses.has(modelViewer)) {\n      return;\n    }\n\n    let onUnregistered = () => {};\n\n    const loadShouldBeMeasured = modelViewer.loaded === false && !!modelViewer.src;\n    const loadAttemptCompletes = new Promise(resolve => {\n      if (!loadShouldBeMeasured) {\n        resolve();\n        return;\n      }\n\n      const resolveHandler = () => {\n        resolve();\n        modelViewer.removeEventListener('load', resolveHandler);\n        modelViewer.removeEventListener('error', resolveHandler);\n      };\n\n      modelViewer.addEventListener('load', resolveHandler);\n      modelViewer.addEventListener('error', resolveHandler);\n      onUnregistered = resolveHandler;\n    });\n    this.registeredInstanceStatuses.set(modelViewer, {\n      onUnregistered\n    });\n    this.loadingPromises.push(loadAttemptCompletes);\n\n    if (this.modelViewerStatusInstance == null) {\n      this.modelViewerStatusInstance = modelViewer;\n    }\n  }\n  /**\n   * Unregister a <model-viewer> element with the announcer. Its loading status\n   * will no longer be tracked by the announcer.\n   */\n\n\n  unregisterInstance(modelViewer) {\n    if (!this.registeredInstanceStatuses.has(modelViewer)) {\n      return;\n    }\n\n    const statuses = this.registeredInstanceStatuses;\n    const instanceStatus = statuses.get(modelViewer);\n    statuses.delete(modelViewer);\n    instanceStatus.onUnregistered();\n\n    if (this.modelViewerStatusInstance === modelViewer) {\n      this.modelViewerStatusInstance = statuses.size > 0 ? getFirstMapKey(statuses) : null;\n    }\n  }\n\n  get modelViewerStatusInstance() {\n    return this[$modelViewerStatusInstance];\n  }\n\n  set modelViewerStatusInstance(value) {\n    const currentInstance = this[$modelViewerStatusInstance];\n\n    if (currentInstance === value) {\n      return;\n    }\n\n    const statusElement = this.statusElement;\n\n    if (value != null && value.shadowRoot != null) {\n      value.shadowRoot.appendChild(statusElement);\n    } else if (statusElement.parentNode != null) {\n      statusElement.parentNode.removeChild(statusElement);\n    }\n\n    this[$modelViewerStatusInstance] = value;\n    this[$updateStatus]();\n  }\n\n  async updateStatus() {\n    if (this.statusUpdateInProgress || this.loadingPromises.length === 0) {\n      return;\n    }\n\n    this.statusElement.textContent = INITIAL_STATUS_ANNOUNCEMENT;\n    this.statusUpdateInProgress = true;\n    this.dispatchEvent({\n      type: 'initial-status-announced'\n    });\n\n    while (this.loadingPromises.length) {\n      const loadingPromises = this.loadingPromises;\n      this.loadingPromises = [];\n      await Promise.all(loadingPromises);\n    }\n\n    this.statusElement.textContent = FINISHED_LOADING_ANNOUNCEMENT;\n    this.statusUpdateInProgress = false;\n    this.dispatchEvent({\n      type: 'finished-loading-announced'\n    });\n  }\n\n}\n_a = $modelViewerStatusInstance, _b = $updateStatus;","map":{"version":3,"sources":["../../../src/features/loading/status-announcer.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {EventDispatcher} from 'three';\nimport ModelViewerElementBase from '../../model-viewer-base.js';\nimport {debounce, getFirstMapKey} from '../../utilities.js';\n\nexport const INITIAL_STATUS_ANNOUNCEMENT =\n    'This page includes one or more 3D models that are loading';\nexport const FINISHED_LOADING_ANNOUNCEMENT =\n    'All 3D models in the page have loaded';\nconst UPDATE_STATUS_DEBOUNCE_MS = 100;\n\n\nconst $modelViewerStatusInstance = Symbol('modelViewerStatusInstance');\nconst $updateStatus = Symbol('updateStatus');\n\ninterface InstanceLoadingStatus {\n  onUnregistered: () => void;\n}\n\n/**\n * The LoadingStatusAnnouncer manages announcements of loading status across\n * all <model-viewer> elements in the document at any given time. As new\n * <model-viewer> elements are connected to the document, they are registered\n * with a LoadingStatusAnnouncer singleton. As they are disconnected, the are\n * also unregistered. Announcements are made to indicate the following\n * conditions:\n *\n *  1. There are <model-viewer> elements that have yet to finish loading\n *  2. All <model-viewer> elements in the page have finished attempting to load\n */\nexport class LoadingStatusAnnouncer extends EventDispatcher {\n  /**\n   * The \"status\" instance is the <model-viewer> instance currently designated\n   * to announce the loading status of all <model-viewer> elements in the\n   * document at any given time. It might change as <model-viewer> elements are\n   * attached or detached over time.\n   */\n  protected[$modelViewerStatusInstance]: ModelViewerElementBase|null = null;\n\n  protected registeredInstanceStatuses:\n      Map<ModelViewerElementBase, InstanceLoadingStatus> =\n          new Map<ModelViewerElementBase, InstanceLoadingStatus>();\n\n  protected loadingPromises: Array<Promise<any>> = [];\n\n  /**\n   * This element is a node that floats around the document as the status\n   * instance changes (see above). It is a singleton that represents the loading\n   * status for all <model-viewer> elements currently in the page. It has its\n   * role attribute set to \"status\", which causes screen readers to announce\n   * any changes to its text content.\n   *\n   * @see https://www.w3.org/TR/wai-aria-1.1/#status\n   */\n  readonly statusElement: HTMLParagraphElement = document.createElement('p');\n  protected statusUpdateInProgress: boolean = false;\n\n  protected[$updateStatus]: () => void =\n      debounce(() => this.updateStatus(), UPDATE_STATUS_DEBOUNCE_MS);\n\n  constructor() {\n    super();\n    const {statusElement} = this;\n    const {style} = statusElement;\n\n    statusElement.setAttribute('role', 'status');\n    statusElement.classList.add('screen-reader-only');\n\n    style.top = style.left = '0';\n    style.pointerEvents = 'none';\n  }\n\n  /**\n   * Register a <model-viewer> element with the announcer. If it is not yet\n   * loaded, its loading status will be tracked by the announcer.\n   */\n  registerInstance(modelViewer: ModelViewerElementBase) {\n    if (this.registeredInstanceStatuses.has(modelViewer)) {\n      return;\n    }\n\n    let onUnregistered = () => {};\n    const loadShouldBeMeasured =\n        modelViewer.loaded === false && !!(modelViewer as any).src;\n    const loadAttemptCompletes = new Promise((resolve) => {\n      if (!loadShouldBeMeasured) {\n        resolve();\n        return;\n      }\n\n      const resolveHandler = () => {\n        resolve();\n\n        modelViewer.removeEventListener('load', resolveHandler);\n        modelViewer.removeEventListener('error', resolveHandler);\n      };\n\n      modelViewer.addEventListener('load', resolveHandler);\n      modelViewer.addEventListener('error', resolveHandler);\n\n      onUnregistered = resolveHandler;\n    });\n\n    this.registeredInstanceStatuses.set(modelViewer, {onUnregistered});\n    this.loadingPromises.push(loadAttemptCompletes);\n\n    if (this.modelViewerStatusInstance == null) {\n      this.modelViewerStatusInstance = modelViewer;\n    }\n  }\n\n  /**\n   * Unregister a <model-viewer> element with the announcer. Its loading status\n   * will no longer be tracked by the announcer.\n   */\n  unregisterInstance(modelViewer: ModelViewerElementBase) {\n    if (!this.registeredInstanceStatuses.has(modelViewer)) {\n      return;\n    }\n\n    const statuses = this.registeredInstanceStatuses;\n    const instanceStatus = statuses.get(modelViewer)!;\n    statuses.delete(modelViewer);\n    instanceStatus.onUnregistered();\n\n    if (this.modelViewerStatusInstance === modelViewer) {\n      this.modelViewerStatusInstance = statuses.size > 0 ?\n          getFirstMapKey<ModelViewerElementBase, InstanceLoadingStatus>(\n              statuses) :\n          null;\n    }\n  }\n\n  protected get modelViewerStatusInstance(): ModelViewerElementBase|null {\n    return this[$modelViewerStatusInstance];\n  }\n\n  protected set modelViewerStatusInstance(value: ModelViewerElementBase|null) {\n    const currentInstance = this[$modelViewerStatusInstance];\n    if (currentInstance === value) {\n      return;\n    }\n\n    const {statusElement} = this;\n\n    if (value != null && value.shadowRoot != null) {\n      value.shadowRoot.appendChild(statusElement);\n    } else if (statusElement.parentNode != null) {\n      statusElement.parentNode.removeChild(statusElement);\n    }\n\n    this[$modelViewerStatusInstance] = value;\n    this[$updateStatus]();\n  }\n\n  protected async updateStatus() {\n    if (this.statusUpdateInProgress || this.loadingPromises.length === 0) {\n      return;\n    }\n\n    this.statusElement.textContent = INITIAL_STATUS_ANNOUNCEMENT;\n    this.statusUpdateInProgress = true;\n    this.dispatchEvent({type: 'initial-status-announced'});\n\n    while (this.loadingPromises.length) {\n      const {loadingPromises} = this;\n      this.loadingPromises = [];\n      await Promise.all(loadingPromises);\n    }\n\n    this.statusElement.textContent = FINISHED_LOADING_ANNOUNCEMENT;\n    this.statusUpdateInProgress = false;\n    this.dispatchEvent({type: 'finished-loading-announced'});\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}