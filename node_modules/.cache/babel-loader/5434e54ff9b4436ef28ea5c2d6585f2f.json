{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { property } from 'lit-element';\nimport { IS_ANDROID, IS_AR_QUICKLOOK_CANDIDATE, IS_IOS_CHROME, IS_IOS_SAFARI, IS_WEBXR_AR_CANDIDATE } from '../constants.js';\nimport { $container, $renderer, $scene } from '../model-viewer-base.js';\nimport { enumerationDeserializer } from '../styles/deserializers.js';\nimport { deserializeUrl } from '../utilities.js';\n/**\n * Takes a URL to a USDZ file and sets the appropriate fields so that Safari\n * iOS can intent to their AR Quick Look.\n */\n\nexport const openIOSARQuickLook = (() => {\n  const anchor = document.createElement('a');\n  anchor.setAttribute('rel', 'ar');\n  anchor.appendChild(document.createElement('img'));\n  return usdzSrc => {\n    anchor.setAttribute('href', usdzSrc);\n    anchor.click();\n  };\n})();\n/**\n * Takes a URL and a title string, and attempts to launch Scene Viewer on the\n * current device.\n */\n\nexport const openSceneViewer = (() => {\n  const anchor = document.createElement('a');\n  const noArViewerSigil = '#model-viewer-no-ar-fallback';\n  let fallbackInvoked = false;\n  return (gltfSrc, title, arScale) => {\n    // If the fallback has ever been invoked this session, bounce early:\n    if (fallbackInvoked) {\n      return;\n    }\n\n    const location = self.location.toString();\n    const locationUrl = new URL(location);\n    const modelUrl = new URL(gltfSrc);\n    const scheme = modelUrl.protocol.replace(':', '');\n    locationUrl.hash = noArViewerSigil;\n    let intentParams = `?file=${encodeURIComponent(modelUrl.toString())}&mode=ar_only&link=${location}&title=${encodeURIComponent(title)}`;\n\n    if (arScale === 'fixed') {\n      intentParams += `&resizable=false`;\n    }\n\n    const intent = `intent://arvr.google.com/scene-viewer/1.0${intentParams}#Intent;scheme=${scheme};package=com.google.ar.core;action=android.intent.action.VIEW;S.browser_fallback_url=${encodeURIComponent(locationUrl.toString())};end;`;\n\n    const undoHashChange = () => {\n      if (self.location.hash === noArViewerSigil && !fallbackInvoked) {\n        fallbackInvoked = true; // The new history will be the current URL with a new hash.\n        // Go back one step so that we reset to the expected URL.\n        // NOTE(cdata): this should not invoke any browser-level navigation\n        // because hash-only changes modify the URL in-place without\n        // navigating:\n\n        self.history.back();\n      }\n    };\n\n    self.addEventListener('hashchange', undoHashChange, {\n      once: true\n    });\n    anchor.setAttribute('href', intent);\n    anchor.click();\n  };\n})();\nconst deserializeQuickLookBrowsers = enumerationDeserializer(['safari', 'chrome']);\nconst deserializeARModes = enumerationDeserializer(['quick-look', 'scene-viewer', 'webxr', 'fallback', 'none']);\nconst DEFAULT_AR_MODES = 'scene-viewer quick-look fallback';\nconst ARMode = {\n  QUICK_LOOK: 'quick-look',\n  SCENE_VIEWER: 'scene-viewer',\n  WEBXR: 'webxr',\n  NONE: 'none'\n};\nconst $exitFullscreenButtonContainer = Symbol('exitFullscreenButtonContainer');\nconst $arButtonContainer = Symbol('arButtonContainer');\nconst $defaultExitFullscreenButton = Symbol('defaultExitFullscreenButton');\nconst $enterARWithWebXR = Symbol('enterARWithWebXR');\nconst $canActivateAR = Symbol('canActivateAR');\nconst $arMode = Symbol('arMode');\nconst $arModes = Symbol('arModes');\nconst $canLaunchQuickLook = Symbol('canLaunchQuickLook');\nconst $quickLookBrowsers = Symbol('quickLookBrowsers');\nconst $arButtonContainerFallbackClickHandler = Symbol('arButtonContainerFallbackClickHandler');\nconst $onARButtonContainerFallbackClick = Symbol('onARButtonContainerFallbackClick');\nconst $arButtonContainerClickHandler = Symbol('arButtonContainerClickHandler');\nconst $onARButtonContainerClick = Symbol('onARButtonContainerClick');\nconst $exitFullscreenButtonContainerClickHandler = Symbol('exitFullscreenButtonContainerClickHandler');\nconst $onExitFullscreenButtonClick = Symbol('onExitFullscreenButtonClick');\nconst $fullscreenchangeHandler = Symbol('fullscreenHandler');\nconst $onFullscreenchange = Symbol('onFullscreen');\nexport const ARMixin = ModelViewerElement => {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n  class ARModelViewerElement extends ModelViewerElement {\n    constructor() {\n      super(...arguments);\n      this.ar = false;\n      this.arScale = 'auto';\n      this.arModes = DEFAULT_AR_MODES;\n      this.iosSrc = null;\n      this.quickLookBrowsers = 'safari';\n      this[_a] = false; // TODO: Add this to the shadow root as part of this mixin's\n      // implementation:\n\n      this[_b] = this.shadowRoot.querySelector('.ar-button');\n      this[_c] = this.shadowRoot.querySelector('.slot.exit-fullscreen-button');\n      this[_d] = this.shadowRoot.querySelector('#default-exit-fullscreen-button'); // NOTE(cdata): We use a second, separate \"fallback\" click handler in\n      // order to work around a regression in how Chrome on Android behaves\n      // when requesting fullscreen at the same time as triggering an intent.\n      // As of m76, intents could no longer be triggered successfully if they\n      // were dispatched in the same handler as the fullscreen request. The\n      // workaround is to split both effects into their own event handlers.\n      // @see https://github.com/GoogleWebComponents/model-viewer/issues/693\n\n      this[_e] = event => this[$onARButtonContainerFallbackClick](event);\n\n      this[_f] = event => this[$onARButtonContainerClick](event);\n\n      this[_g] = () => this[$onExitFullscreenButtonClick]();\n\n      this[_h] = () => this[$onFullscreenchange]();\n\n      this[_j] = new Set();\n      this[_k] = ARMode.NONE;\n      this[_l] = new Set();\n    }\n\n    get canActivateAR() {\n      return this[$arMode] !== ARMode.NONE;\n    }\n    /**\n     * Activates AR. Note that for any mode that is not WebXR-based, this\n     * method most likely has to be called synchronous from a user\n     * interaction handler. Otherwise, attempts to activate modes that\n     * require user interaction will most likely be ignored.\n     */\n\n\n    async activateAR() {\n      switch (this[$arMode]) {\n        case ARMode.QUICK_LOOK:\n          openIOSARQuickLook(this.iosSrc);\n          break;\n\n        case ARMode.WEBXR:\n          await this[$enterARWithWebXR]();\n          break;\n\n        case ARMode.SCENE_VIEWER:\n          openSceneViewer(this.src, this.alt || '', this.arScale);\n          break;\n\n        default:\n          console.warn('No AR Mode can be activated. This is probably due to missing \\\nconfiguration or device capabilities');\n          break;\n      }\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      document.addEventListener('fullscreenchange', this[$fullscreenchangeHandler]);\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      document.removeEventListener('fullscreenchange', this[$fullscreenchangeHandler]);\n    }\n\n    [(_a = $canActivateAR, _b = $arButtonContainer, _c = $exitFullscreenButtonContainer, _d = $defaultExitFullscreenButton, _e = $arButtonContainerFallbackClickHandler, _f = $arButtonContainerClickHandler, _g = $exitFullscreenButtonContainerClickHandler, _h = $fullscreenchangeHandler, _j = $arModes, _k = $arMode, _l = $quickLookBrowsers, $onExitFullscreenButtonClick)]() {\n      if (document.fullscreenElement === this) {\n        document.exitFullscreen();\n      }\n    }\n\n    [$onFullscreenchange]() {\n      if (this[$arMode] !== ARMode.AR_VIEWER) {\n        return;\n      }\n\n      const scene = this[$scene];\n      const isFullscreen = document.fullscreenElement === this;\n\n      if (isFullscreen) {\n        this[$container].classList.add('fullscreen');\n      } else {\n        this[$container].classList.remove('fullscreen');\n      }\n\n      if (!isFullscreen && this[$renderer].presentedScene === scene) {\n        try {\n          this[$renderer].stopPresenting();\n        } catch (error) {\n          console.warn('Unexpected error while stopping AR presentation');\n          console.error(error);\n        }\n      }\n    }\n\n    async [$enterARWithWebXR]() {\n      console.log('Attempting to present in AR...');\n\n      try {\n        await this[$renderer].present(this[$scene]);\n      } catch (error) {\n        console.warn('Error while trying to present to AR');\n        console.error(error);\n      }\n    }\n\n    async update(changedProperties) {\n      super.update(changedProperties);\n\n      if (changedProperties.has('quickLookBrowsers')) {\n        this[$quickLookBrowsers] = deserializeQuickLookBrowsers(this.quickLookBrowsers);\n      }\n\n      if (!changedProperties.has('ar') && !changedProperties.has('arModes') && !changedProperties.has('iosSrc')) {\n        return;\n      }\n\n      if (changedProperties.has('arModes')) {\n        this[$arModes] = deserializeARModes(this.arModes);\n      }\n\n      if (changedProperties.has('arScale')) {\n        this[$scene].canScale = this.arScale !== 'fixed';\n      }\n\n      this[$arMode] = ARMode.NONE;\n\n      if (this.ar) {\n        const it = this[$arModes].values();\n        let item = it.next();\n\n        while (!item.done) {\n          const _item = item,\n                value = _item.value;\n\n          if (value === 'webxr' && IS_WEBXR_AR_CANDIDATE && (await this[$renderer].supportsPresentation())) {\n            this[$arMode] = ARMode.WEBXR;\n            break;\n          } else if (value === 'scene-viewer' && IS_ANDROID) {\n            this[$arMode] = ARMode.SCENE_VIEWER;\n            break;\n          } else if (value === 'quick-look' && !!this.iosSrc && this[$canLaunchQuickLook] && IS_AR_QUICKLOOK_CANDIDATE) {\n            this[$arMode] = ARMode.QUICK_LOOK;\n            break;\n          }\n\n          item = it.next();\n        }\n      }\n\n      if (this.canActivateAR) {\n        this[$arButtonContainer].classList.add('enabled'); // NOTE(cdata): The order of the two click handlers on the \"ar\n        // button container\" is important, vital to the workaround described\n        // earlier in this file. Reversing their order will cause our Scene\n        // Viewer integration to break.\n        // @see https://github.com/GoogleWebComponents/model-viewer/issues/693\n\n        this[$arButtonContainer].addEventListener('click', this[$arButtonContainerClickHandler]);\n        this[$arButtonContainer].addEventListener('click', this[$arButtonContainerFallbackClickHandler]);\n        this[$exitFullscreenButtonContainer].addEventListener('click', this[$exitFullscreenButtonContainerClickHandler]);\n      } else {\n        this[$arButtonContainer].removeEventListener('click', this[$arButtonContainerClickHandler]);\n        this[$arButtonContainer].removeEventListener('click', this[$arButtonContainerFallbackClickHandler]);\n        this[$exitFullscreenButtonContainer].removeEventListener('click', this[$exitFullscreenButtonContainerClickHandler]);\n        this[$arButtonContainer].classList.remove('enabled');\n      }\n    }\n\n    [$onARButtonContainerFallbackClick](_event) {\n      if (this[$arMode] === ARMode.SCENE_VIEWER && this[$arModes].has('fallback')) {\n        this.requestFullscreen();\n      }\n    }\n\n    [$onARButtonContainerClick](event) {\n      event.preventDefault();\n      this.activateAR();\n    }\n\n    get [$canLaunchQuickLook]() {\n      if (IS_IOS_CHROME) {\n        return this[$quickLookBrowsers].has('chrome');\n      } else if (IS_IOS_SAFARI) {\n        return this[$quickLookBrowsers].has('safari');\n      }\n\n      return false;\n    }\n\n  }\n\n  __decorate([property({\n    type: Boolean,\n    attribute: 'ar'\n  })], ARModelViewerElement.prototype, \"ar\", void 0);\n\n  __decorate([property({\n    type: String,\n    attribute: 'ar-scale'\n  })], ARModelViewerElement.prototype, \"arScale\", void 0);\n\n  __decorate([property({\n    type: String,\n    attribute: 'ar-modes'\n  })], ARModelViewerElement.prototype, \"arModes\", void 0);\n\n  __decorate([property({\n    converter: {\n      fromAttribute: deserializeUrl\n    },\n    attribute: 'ios-src'\n  })], ARModelViewerElement.prototype, \"iosSrc\", void 0);\n\n  __decorate([property({\n    type: String,\n    attribute: 'quick-look-browsers'\n  })], ARModelViewerElement.prototype, \"quickLookBrowsers\", void 0);\n\n  return ARModelViewerElement;\n};","map":{"version":3,"sources":["../../src/features/ar.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit-element';\n\nimport {IS_ANDROID, IS_AR_QUICKLOOK_CANDIDATE, IS_IOS_CHROME, IS_IOS_SAFARI, IS_WEBXR_AR_CANDIDATE} from '../constants.js';\nimport ModelViewerElementBase, {$container, $renderer, $scene} from '../model-viewer-base.js';\nimport {enumerationDeserializer} from '../styles/deserializers.js';\nimport {Constructor, deserializeUrl} from '../utilities.js';\n\n/**\n * Takes a URL to a USDZ file and sets the appropriate fields so that Safari\n * iOS can intent to their AR Quick Look.\n */\nexport const openIOSARQuickLook = (() => {\n  const anchor = document.createElement('a');\n  anchor.setAttribute('rel', 'ar');\n  anchor.appendChild(document.createElement('img'));\n\n  return (usdzSrc: string) => {\n    anchor.setAttribute('href', usdzSrc);\n    anchor.click();\n  };\n})();\n\n/**\n * Takes a URL and a title string, and attempts to launch Scene Viewer on the\n * current device.\n */\nexport const openSceneViewer = (() => {\n  const anchor = document.createElement('a');\n  const noArViewerSigil = '#model-viewer-no-ar-fallback';\n  let fallbackInvoked = false;\n\n  return (gltfSrc: string, title: string, arScale: string) => {\n    // If the fallback has ever been invoked this session, bounce early:\n    if (fallbackInvoked) {\n      return;\n    }\n\n    const location = self.location.toString();\n    const locationUrl = new URL(location);\n    const modelUrl = new URL(gltfSrc);\n    const scheme = modelUrl.protocol.replace(':', '');\n\n    locationUrl.hash = noArViewerSigil;\n\n    let intentParams =\n        `?file=${encodeURIComponent(modelUrl.toString())}&mode=ar_only&link=${\n            location}&title=${encodeURIComponent(title)}`;\n\n    if (arScale === 'fixed') {\n      intentParams += `&resizable=false`;\n    }\n\n    const intent = `intent://arvr.google.com/scene-viewer/1.0${\n        intentParams}#Intent;scheme=${\n        scheme};package=com.google.ar.core;action=android.intent.action.VIEW;S.browser_fallback_url=${\n        encodeURIComponent(locationUrl.toString())};end;`;\n\n    const undoHashChange = () => {\n      if (self.location.hash === noArViewerSigil && !fallbackInvoked) {\n        fallbackInvoked = true;\n        // The new history will be the current URL with a new hash.\n        // Go back one step so that we reset to the expected URL.\n        // NOTE(cdata): this should not invoke any browser-level navigation\n        // because hash-only changes modify the URL in-place without\n        // navigating:\n        self.history.back();\n      }\n    };\n\n    self.addEventListener('hashchange', undoHashChange, {once: true});\n\n    anchor.setAttribute('href', intent);\n    anchor.click();\n  };\n})();\n\nexport type QuickLookBrowser = 'safari'|'chrome';\n\nconst deserializeQuickLookBrowsers =\n    enumerationDeserializer<QuickLookBrowser>(['safari', 'chrome']);\n\nexport type ARMode = 'quick-look'|'scene-viewer'|'webxr'|'fallback'|'none';\n\nconst deserializeARModes = enumerationDeserializer<ARMode>(\n    ['quick-look', 'scene-viewer', 'webxr', 'fallback', 'none']);\n\nconst DEFAULT_AR_MODES = 'scene-viewer quick-look fallback';\n\nconst ARMode: {[index: string]: ARMode} = {\n  QUICK_LOOK: 'quick-look',\n  SCENE_VIEWER: 'scene-viewer',\n  WEBXR: 'webxr',\n  NONE: 'none'\n};\n\nconst $exitFullscreenButtonContainer = Symbol('exitFullscreenButtonContainer');\nconst $arButtonContainer = Symbol('arButtonContainer');\nconst $defaultExitFullscreenButton = Symbol('defaultExitFullscreenButton');\nconst $enterARWithWebXR = Symbol('enterARWithWebXR');\nconst $canActivateAR = Symbol('canActivateAR');\nconst $arMode = Symbol('arMode');\nconst $arModes = Symbol('arModes');\nconst $canLaunchQuickLook = Symbol('canLaunchQuickLook');\nconst $quickLookBrowsers = Symbol('quickLookBrowsers');\n\nconst $arButtonContainerFallbackClickHandler =\n    Symbol('arButtonContainerFallbackClickHandler');\nconst $onARButtonContainerFallbackClick =\n    Symbol('onARButtonContainerFallbackClick');\nconst $arButtonContainerClickHandler = Symbol('arButtonContainerClickHandler');\nconst $onARButtonContainerClick = Symbol('onARButtonContainerClick');\n\nconst $exitFullscreenButtonContainerClickHandler =\n    Symbol('exitFullscreenButtonContainerClickHandler');\nconst $onExitFullscreenButtonClick = Symbol('onExitFullscreenButtonClick');\n\nconst $fullscreenchangeHandler = Symbol('fullscreenHandler');\nconst $onFullscreenchange = Symbol('onFullscreen');\n\nexport declare interface ARInterface {\n  ar: boolean;\n  arModes: string;\n  arScale: string;\n  iosSrc: string|null;\n  quickLookBrowsers: string;\n  readonly canActivateAR: boolean;\n  activateAR(): Promise<void>;\n}\n\nexport const ARMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<ARInterface>&T => {\n  class ARModelViewerElement extends ModelViewerElement {\n    @property({type: Boolean, attribute: 'ar'}) ar: boolean = false;\n\n    @property({type: String, attribute: 'ar-scale'}) arScale: string = 'auto';\n\n    @property({type: String, attribute: 'ar-modes'})\n    arModes: string = DEFAULT_AR_MODES;\n\n    @property(\n        {converter: {fromAttribute: deserializeUrl}, attribute: 'ios-src'})\n    iosSrc: string|null = null;\n\n    @property({type: String, attribute: 'quick-look-browsers'})\n    quickLookBrowsers: string = 'safari';\n\n    get canActivateAR(): boolean {\n      return this[$arMode] !== ARMode.NONE;\n    }\n\n    protected[$canActivateAR]: boolean = false;\n\n    // TODO: Add this to the shadow root as part of this mixin's\n    // implementation:\n    protected[$arButtonContainer]: HTMLElement =\n        this.shadowRoot!.querySelector('.ar-button') as HTMLElement;\n\n    protected[$exitFullscreenButtonContainer]: HTMLElement =\n        this.shadowRoot!.querySelector('.slot.exit-fullscreen-button') as\n        HTMLElement;\n    protected[$defaultExitFullscreenButton]: HTMLElement =\n        this.shadowRoot!.querySelector('#default-exit-fullscreen-button') as\n        HTMLElement;\n\n    // NOTE(cdata): We use a second, separate \"fallback\" click handler in\n    // order to work around a regression in how Chrome on Android behaves\n    // when requesting fullscreen at the same time as triggering an intent.\n    // As of m76, intents could no longer be triggered successfully if they\n    // were dispatched in the same handler as the fullscreen request. The\n    // workaround is to split both effects into their own event handlers.\n    // @see https://github.com/GoogleWebComponents/model-viewer/issues/693\n    protected[$arButtonContainerFallbackClickHandler] = (event: Event) =>\n        this[$onARButtonContainerFallbackClick](event);\n\n    protected[$arButtonContainerClickHandler]: (event: Event) => void =\n        (event) => this[$onARButtonContainerClick](event);\n\n    protected[$exitFullscreenButtonContainerClickHandler]:\n        () => void = () => this[$onExitFullscreenButtonClick]();\n\n    protected[$fullscreenchangeHandler]:\n        () => void = () => this[$onFullscreenchange]();\n\n    protected[$arModes]: Set<ARMode> = new Set();\n    protected[$arMode]: ARMode = ARMode.NONE;\n\n    protected[$quickLookBrowsers]: Set<QuickLookBrowser> = new Set();\n\n    /**\n     * Activates AR. Note that for any mode that is not WebXR-based, this\n     * method most likely has to be called synchronous from a user\n     * interaction handler. Otherwise, attempts to activate modes that\n     * require user interaction will most likely be ignored.\n     */\n    async activateAR() {\n      switch (this[$arMode]) {\n        case ARMode.QUICK_LOOK:\n          openIOSARQuickLook(this.iosSrc!);\n          break;\n        case ARMode.WEBXR:\n          await this[$enterARWithWebXR]();\n          break;\n        case ARMode.SCENE_VIEWER:\n          openSceneViewer(this.src!, this.alt || '', this.arScale);\n          break;\n        default:\n          console.warn(\n              'No AR Mode can be activated. This is probably due to missing \\\nconfiguration or device capabilities');\n          break;\n      }\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      document.addEventListener(\n          'fullscreenchange', this[$fullscreenchangeHandler]);\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      document.removeEventListener(\n          'fullscreenchange', this[$fullscreenchangeHandler]);\n    }\n\n    [$onExitFullscreenButtonClick]() {\n      if (document.fullscreenElement === this) {\n        document.exitFullscreen();\n      }\n    }\n\n    [$onFullscreenchange]() {\n      if (this[$arMode] !== ARMode.AR_VIEWER) {\n        return;\n      }\n      const scene = this[$scene];\n      const isFullscreen = document.fullscreenElement === this;\n\n      if (isFullscreen) {\n        this[$container].classList.add('fullscreen');\n      } else {\n        this[$container].classList.remove('fullscreen');\n      }\n\n      if (!isFullscreen && this[$renderer].presentedScene === scene) {\n        try {\n          this[$renderer].stopPresenting();\n        } catch (error) {\n          console.warn('Unexpected error while stopping AR presentation');\n          console.error(error);\n        }\n      }\n    }\n\n    protected async[$enterARWithWebXR]() {\n      console.log('Attempting to present in AR...');\n\n      try {\n        await this[$renderer].present(this[$scene]);\n      } catch (error) {\n        console.warn('Error while trying to present to AR');\n        console.error(error);\n      }\n    }\n\n    async update(changedProperties: Map<string, any>) {\n      super.update(changedProperties);\n\n      if (changedProperties.has('quickLookBrowsers')) {\n        this[$quickLookBrowsers] =\n            deserializeQuickLookBrowsers(this.quickLookBrowsers);\n      }\n\n      if (!changedProperties.has('ar') && !changedProperties.has('arModes') &&\n          !changedProperties.has('iosSrc')) {\n        return;\n      }\n\n      if (changedProperties.has('arModes')) {\n        this[$arModes] = deserializeARModes(this.arModes);\n      }\n\n      if (changedProperties.has('arScale')) {\n        this[$scene].canScale = this.arScale !== 'fixed';\n      }\n\n      this[$arMode] = ARMode.NONE;\n      if (this.ar) {\n        const it = this[$arModes].values();\n        let item = it.next();\n        while (!item.done) {\n          const {value} = item;\n          if (value === 'webxr' && IS_WEBXR_AR_CANDIDATE &&\n              await this[$renderer].supportsPresentation()) {\n            this[$arMode] = ARMode.WEBXR;\n            break;\n          } else if (value === 'scene-viewer' && IS_ANDROID) {\n            this[$arMode] = ARMode.SCENE_VIEWER;\n            break;\n          } else if (\n              value === 'quick-look' && !!this.iosSrc &&\n              this[$canLaunchQuickLook] && IS_AR_QUICKLOOK_CANDIDATE) {\n            this[$arMode] = ARMode.QUICK_LOOK;\n            break;\n          }\n          item = it.next();\n        }\n      }\n\n      if (this.canActivateAR) {\n        this[$arButtonContainer].classList.add('enabled');\n        // NOTE(cdata): The order of the two click handlers on the \"ar\n        // button container\" is important, vital to the workaround described\n        // earlier in this file. Reversing their order will cause our Scene\n        // Viewer integration to break.\n        // @see https://github.com/GoogleWebComponents/model-viewer/issues/693\n        this[$arButtonContainer].addEventListener(\n            'click', this[$arButtonContainerClickHandler]);\n        this[$arButtonContainer].addEventListener(\n            'click', this[$arButtonContainerFallbackClickHandler]);\n        this[$exitFullscreenButtonContainer].addEventListener(\n            'click', this[$exitFullscreenButtonContainerClickHandler]);\n      } else {\n        this[$arButtonContainer].removeEventListener(\n            'click', this[$arButtonContainerClickHandler]);\n        this[$arButtonContainer].removeEventListener(\n            'click', this[$arButtonContainerFallbackClickHandler]);\n        this[$exitFullscreenButtonContainer].removeEventListener(\n            'click', this[$exitFullscreenButtonContainerClickHandler]);\n        this[$arButtonContainer].classList.remove('enabled');\n      }\n    }\n\n    [$onARButtonContainerFallbackClick](_event: Event) {\n      if (this[$arMode] === ARMode.SCENE_VIEWER &&\n          this[$arModes].has('fallback')) {\n        this.requestFullscreen();\n      }\n    }\n\n    [$onARButtonContainerClick](event: Event) {\n      event.preventDefault();\n      this.activateAR();\n    }\n\n    get[$canLaunchQuickLook](): boolean {\n      if (IS_IOS_CHROME) {\n        return this[$quickLookBrowsers].has('chrome');\n      } else if (IS_IOS_SAFARI) {\n        return this[$quickLookBrowsers].has('safari');\n      }\n\n      return false;\n    }\n  }\n\n  return ARModelViewerElement;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}