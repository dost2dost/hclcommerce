{"ast":null,"code":"var schema = require('./schema');\n\nvar processSchema = schema.process;\nvar geometries = module.exports.geometries = {}; // Registered geometries.\n\nvar geometryNames = module.exports.geometryNames = []; // Names of registered geometries.\n\nvar THREE = require('../lib/three');\n/**\n * Geometry class definition.\n *\n * Geometries extend the geometry component API to create and register geometry types.\n */\n\n\nvar Geometry = module.exports.Geometry = function () {};\n\nGeometry.prototype = {\n  /**\n   * Contains the type schema and defaults for the data values.\n   * Data is coerced into the types of the values of the defaults.\n   */\n  schema: {},\n\n  /**\n   * Init handler. Similar to attachedCallback.\n   * Called during shader initialization and is only run once.\n   */\n  init: function (data) {\n    this.geometry = new THREE.Geometry();\n    return this.geometry;\n  },\n\n  /**\n   * Update handler. Similar to attributeChangedCallback.\n   * Called whenever the associated geometry data changes.\n   *\n   * @param {object} data - New geometry data.\n   */\n  update: function (data) {\n    /* no-op */\n  }\n};\n/**\n * Registers a geometry to A-Frame.\n *\n * @param {string} name - Geometry name.\n * @param {object} definition - Geometry property and methods.\n * @returns {object} Geometry.\n */\n\nmodule.exports.registerGeometry = function (name, definition) {\n  var NewGeometry;\n  var proto = {}; // Format definition object to prototype object.\n\n  Object.keys(definition).forEach(function expandDefinition(key) {\n    proto[key] = {\n      value: definition[key],\n      writable: true\n    };\n  });\n\n  if (geometries[name]) {\n    throw new Error('The geometry `' + name + '` has been already registered');\n  }\n\n  NewGeometry = function () {\n    Geometry.call(this);\n  };\n\n  NewGeometry.prototype = Object.create(Geometry.prototype, proto);\n  NewGeometry.prototype.name = name;\n  NewGeometry.prototype.constructor = NewGeometry;\n  geometries[name] = {\n    Geometry: NewGeometry,\n    schema: processSchema(NewGeometry.prototype.schema)\n  };\n  geometryNames.push(name);\n  return NewGeometry;\n};","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/core/geometry.js"],"names":["schema","require","processSchema","process","geometries","module","exports","geometryNames","THREE","Geometry","prototype","init","data","geometry","update","registerGeometry","name","definition","NewGeometry","proto","Object","keys","forEach","expandDefinition","key","value","writable","Error","call","create","constructor","push"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAIC,aAAa,GAAGF,MAAM,CAACG,OAA3B;AACA,IAAIC,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAeF,UAAf,GAA4B,EAA7C,C,CAAkD;;AAClD,IAAIG,aAAa,GAAGF,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+B,EAAnD,C,CAAwD;;AACxD,IAAIC,KAAK,GAAGP,OAAO,CAAC,cAAD,CAAnB;AAEA;;;;;;;AAKA,IAAIQ,QAAQ,GAAGJ,MAAM,CAACC,OAAP,CAAeG,QAAf,GAA0B,YAAY,CAAE,CAAvD;;AAEAA,QAAQ,CAACC,SAAT,GAAqB;AACnB;;;;AAIAV,EAAAA,MAAM,EAAE,EALW;;AAOnB;;;;AAIAW,EAAAA,IAAI,EAAE,UAAUC,IAAV,EAAgB;AACpB,SAAKC,QAAL,GAAgB,IAAIL,KAAK,CAACC,QAAV,EAAhB;AACA,WAAO,KAAKI,QAAZ;AACD,GAdkB;;AAgBnB;;;;;;AAMAC,EAAAA,MAAM,EAAE,UAAUF,IAAV,EAAgB;AAAE;AAAa;AAtBpB,CAArB;AAyBA;;;;;;;;AAOAP,MAAM,CAACC,OAAP,CAAeS,gBAAf,GAAkC,UAAUC,IAAV,EAAgBC,UAAhB,EAA4B;AAC5D,MAAIC,WAAJ;AACA,MAAIC,KAAK,GAAG,EAAZ,CAF4D,CAI5D;;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBK,OAAxB,CAAgC,SAASC,gBAAT,CAA2BC,GAA3B,EAAgC;AAC9DL,IAAAA,KAAK,CAACK,GAAD,CAAL,GAAa;AACXC,MAAAA,KAAK,EAAER,UAAU,CAACO,GAAD,CADN;AAEXE,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID,GALD;;AAOA,MAAItB,UAAU,CAACY,IAAD,CAAd,EAAsB;AACpB,UAAM,IAAIW,KAAJ,CAAU,mBAAmBX,IAAnB,GAA0B,+BAApC,CAAN;AACD;;AACDE,EAAAA,WAAW,GAAG,YAAY;AAAET,IAAAA,QAAQ,CAACmB,IAAT,CAAc,IAAd;AAAsB,GAAlD;;AACAV,EAAAA,WAAW,CAACR,SAAZ,GAAwBU,MAAM,CAACS,MAAP,CAAcpB,QAAQ,CAACC,SAAvB,EAAkCS,KAAlC,CAAxB;AACAD,EAAAA,WAAW,CAACR,SAAZ,CAAsBM,IAAtB,GAA6BA,IAA7B;AACAE,EAAAA,WAAW,CAACR,SAAZ,CAAsBoB,WAAtB,GAAoCZ,WAApC;AACAd,EAAAA,UAAU,CAACY,IAAD,CAAV,GAAmB;AACjBP,IAAAA,QAAQ,EAAES,WADO;AAEjBlB,IAAAA,MAAM,EAAEE,aAAa,CAACgB,WAAW,CAACR,SAAZ,CAAsBV,MAAvB;AAFJ,GAAnB;AAIAO,EAAAA,aAAa,CAACwB,IAAd,CAAmBf,IAAnB;AACA,SAAOE,WAAP;AACD,CAzBD","sourcesContent":["var schema = require('./schema');\n\nvar processSchema = schema.process;\nvar geometries = module.exports.geometries = {};  // Registered geometries.\nvar geometryNames = module.exports.geometryNames = [];  // Names of registered geometries.\nvar THREE = require('../lib/three');\n\n/**\n * Geometry class definition.\n *\n * Geometries extend the geometry component API to create and register geometry types.\n */\nvar Geometry = module.exports.Geometry = function () {};\n\nGeometry.prototype = {\n  /**\n   * Contains the type schema and defaults for the data values.\n   * Data is coerced into the types of the values of the defaults.\n   */\n  schema: {},\n\n  /**\n   * Init handler. Similar to attachedCallback.\n   * Called during shader initialization and is only run once.\n   */\n  init: function (data) {\n    this.geometry = new THREE.Geometry();\n    return this.geometry;\n  },\n\n  /**\n   * Update handler. Similar to attributeChangedCallback.\n   * Called whenever the associated geometry data changes.\n   *\n   * @param {object} data - New geometry data.\n   */\n  update: function (data) { /* no-op */ }\n};\n\n/**\n * Registers a geometry to A-Frame.\n *\n * @param {string} name - Geometry name.\n * @param {object} definition - Geometry property and methods.\n * @returns {object} Geometry.\n */\nmodule.exports.registerGeometry = function (name, definition) {\n  var NewGeometry;\n  var proto = {};\n\n  // Format definition object to prototype object.\n  Object.keys(definition).forEach(function expandDefinition (key) {\n    proto[key] = {\n      value: definition[key],\n      writable: true\n    };\n  });\n\n  if (geometries[name]) {\n    throw new Error('The geometry `' + name + '` has been already registered');\n  }\n  NewGeometry = function () { Geometry.call(this); };\n  NewGeometry.prototype = Object.create(Geometry.prototype, proto);\n  NewGeometry.prototype.name = name;\n  NewGeometry.prototype.constructor = NewGeometry;\n  geometries[name] = {\n    Geometry: NewGeometry,\n    schema: processSchema(NewGeometry.prototype.schema)\n  };\n  geometryNames.push(name);\n  return NewGeometry;\n};\n"]},"metadata":{},"sourceType":"script"}