{"ast":null,"code":"import _objectSpread from \"F:\\\\_HCLCommece\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { MainActions } from \"../ReduxActions/MainActions\";\nconst iState = {\n  products: [],\n  orderId: '',\n  subTotal: 0,\n  cartQuantity: 0,\n  totalValue: 0,\n  grandTotal: 0,\n  discount: 0,\n  shippingMethod: '',\n  billingMethod: '',\n  addressId: '',\n  addCountry: '',\n  piId: '',\n  billAndShipAddDetails: '',\n  orderComplete: ''\n};\n\nconst addToCart = (state = iState, action) => {\n  //console.log(state)\n  if (action.type === 'ADD_CART') {\n    return _objectSpread({}, state, {\n      products: [...state.products, action.payloads.productDetails],\n      orderId: action.payloads.orderId,\n      //parseFloat(state.cart) + parseFloat(action.payloads.inCart),\n      subTotal: (parseFloat(state.subTotal) + parseFloat(action.payloads.productDetails.Price) * parseFloat(action.payloads.productDetails.quantity)).toFixed(2),\n      cartQuantity: state.cartQuantity + parseInt(action.payloads.productDetails.quantity)\n    });\n  }\n\n  let counter = 0;\n  let getIndex = '';\n\n  if (action.type === 'REMOVE_FROM_CART') {\n    state.products.map((item, index) => {\n      if (item.orderItemId === action.payloads.removeProduct.orderItemId) {\n        getIndex = index;\n      }\n    });\n    let outcome = state.products;\n    outcome.splice(getIndex, 1);\n    return _objectSpread({}, state, {\n      products: outcome,\n      orderId: action.payloads.orderId,\n      subTotal: (parseFloat(state.subTotal) - parseFloat(action.payloads.removeProduct.Price) * parseFloat(action.payloads.removeProduct.quantity)).toFixed(2),\n      cartQuantity: state.cartQuantity - parseInt(action.payloads.removeProduct.quantity)\n    });\n  }\n\n  if (action.type === 'UPDATE_CART') {\n    state.products.map((item, index) => {\n      if (item.orderItemId === action.payloads.updateProduct.orderItemId) {\n        getIndex = index;\n      }\n    });\n    let outcome = state.products;\n    let quantiytDifference = parseInt(action.payloads.updateProduct.quantity) - parseInt(outcome[getIndex].quantity);\n    outcome[getIndex].quantity = action.payloads.updateProduct.quantity;\n    return _objectSpread({}, state, {\n      products: outcome,\n      orderId: action.payloads.orderId,\n      subTotal: (parseFloat(state.subTotal) + parseFloat(action.payloads.updateProduct.Price) * parseFloat(quantiytDifference)).toFixed(2),\n      cartQuantity: state.cartQuantity + quantiytDifference\n    });\n  }\n\n  if (action.type === 'CART_DETAILS') {\n    //total, grandTotal, discount\n    return _objectSpread({}, state, {\n      totalValue: action.payloads.total,\n      grandTotal: action.payloads.grandTotal,\n      discount: action.payloads.discount\n    });\n  }\n\n  if (action.type === 'OTHER_CART_DETAILS') {\n    console.log(action.payloads.shippingAddDetails + '---' + action.payloads.billingAddDetails);\n    return _objectSpread({}, state, {\n      billAndShipAddDetails: action.payloads.billAndShipAddDetails,\n      shippingMethod: action.payloads.shippingAddDetails,\n      billingMethod: action.payloads.billingAddDetails,\n      addressId: action.payloads.addressId,\n      addCountry: action.payloads.addCountry,\n      piId: action.payloads.piId,\n      orderId: action.payloads.orderId\n    });\n  }\n\n  if (action.type === 'ORDER_COMPLETE') {\n    let orderComplete = state.products;\n    console.log(orderComplete);\n    return _objectSpread({}, state, {\n      piId: orderComplete,\n      cartQuantity: 0\n    });\n  }\n\n  if (action.type === 'EMPTY_CART') {\n    return {\n      products: [],\n      orderId: '',\n      subTotal: 0,\n      cartQuantity: 0,\n      totalValue: 0,\n      grandTotal: 0,\n      discount: 0,\n      shippingMethod: '',\n      billingMethod: '',\n      addressId: '',\n      addCountry: '',\n      piId: '',\n      billAndShipAddDetails: ''\n    };\n  }\n\n  return state;\n};\n\nexport default addToCart;","map":{"version":3,"sources":["F:/_HCLCommece/src/reducers/addToCart.js"],"names":["MainActions","iState","products","orderId","subTotal","cartQuantity","totalValue","grandTotal","discount","shippingMethod","billingMethod","addressId","addCountry","piId","billAndShipAddDetails","orderComplete","addToCart","state","action","type","payloads","productDetails","parseFloat","Price","quantity","toFixed","parseInt","counter","getIndex","map","item","index","orderItemId","removeProduct","outcome","splice","updateProduct","quantiytDifference","total","console","log","shippingAddDetails","billingAddDetails"],"mappings":"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","sourcesContent":["import { MainActions } from \"../ReduxActions/MainActions\";\r\n\r\nconst iState ={\r\n    products: [],\r\n    orderId: '',\r\n    subTotal: 0,\r\n    cartQuantity: 0,\r\n    totalValue: 0,\r\n    grandTotal: 0,\r\n    discount: 0,\r\n\r\n    shippingMethod: '',\r\n    billingMethod: '',\r\n    addressId: '',\r\n    addCountry: '',\r\n    piId: '',\r\n    billAndShipAddDetails: '',\r\n\r\n    orderComplete: ''\r\n}\r\n\r\nconst addToCart = (state = iState, action) =>{\r\n    //console.log(state)\r\n    if(action.type === 'ADD_CART'){\r\n        return{\r\n            ...state, \r\n            products : [...state.products, action.payloads.productDetails],\r\n            orderId: action.payloads.orderId,//parseFloat(state.cart) + parseFloat(action.payloads.inCart),\r\n            subTotal: (parseFloat(state.subTotal) + (parseFloat(action.payloads.productDetails.Price) * parseFloat(action.payloads.productDetails.quantity))).toFixed(2),\r\n            cartQuantity: state.cartQuantity + parseInt(action.payloads.productDetails.quantity)\r\n        }\r\n    }\r\n    let counter = 0\r\n    let getIndex = ''\r\n    if(action.type === 'REMOVE_FROM_CART'){\r\n        state.products.map((item, index)=> {\r\n            if(item.orderItemId === action.payloads.removeProduct.orderItemId){\r\n                getIndex = index;\r\n            }\r\n        })\r\n        let outcome = state.products\r\n        outcome.splice(getIndex, 1)\r\n        return{\r\n            ...state, \r\n            products : outcome,\r\n            orderId : action.payloads.orderId,\r\n            subTotal: (parseFloat(state.subTotal) - (parseFloat(action.payloads.removeProduct.Price) * parseFloat(action.payloads.removeProduct.quantity))).toFixed(2),\r\n            cartQuantity: state.cartQuantity - parseInt(action.payloads.removeProduct.quantity)\r\n            \r\n        }\r\n    }\r\n    \r\n    if(action.type === 'UPDATE_CART'){\r\n        state.products.map((item, index)=> {\r\n            if(item.orderItemId === action.payloads.updateProduct.orderItemId){\r\n                getIndex = index;\r\n            }\r\n        })\r\n        let outcome = state.products        \r\n        let quantiytDifference =  parseInt(action.payloads.updateProduct.quantity) - parseInt(outcome[getIndex].quantity)\r\n        outcome[getIndex].quantity = action.payloads.updateProduct.quantity \r\n        return {\r\n            ...state,\r\n            products: outcome,\r\n            orderId : action.payloads.orderId,\r\n            subTotal: (parseFloat(state.subTotal) + (parseFloat(action.payloads.updateProduct.Price) * parseFloat(quantiytDifference))).toFixed(2),\r\n            cartQuantity: state.cartQuantity + quantiytDifference\r\n        }\r\n    }\r\n\r\n    if(action.type === 'CART_DETAILS'){ //total, grandTotal, discount\r\n        return{\r\n            ...state,\r\n            totalValue: action.payloads.total,\r\n            grandTotal: action.payloads.grandTotal,\r\n            discount: action.payloads.discount\r\n        }\r\n    }\r\n    if(action.type === 'OTHER_CART_DETAILS'){\r\n        console.log(action.payloads.shippingAddDetails+'---'+action.payloads.billingAddDetails)\r\n        return{ //shippingAddDetails, billingAddDetails, addressId, addCountry, piId, orderId\r\n            ...state,\r\n            billAndShipAddDetails: action.payloads.billAndShipAddDetails,\r\n            shippingMethod: action.payloads.shippingAddDetails,\r\n            billingMethod: action.payloads.billingAddDetails,\r\n            addressId: action.payloads.addressId,\r\n            addCountry: action.payloads.addCountry,\r\n            piId: action.payloads.piId,\r\n            orderId: action.payloads.orderId,\r\n        }\r\n    }\r\n    if(action.type === 'ORDER_COMPLETE'){\r\n        let orderComplete = state.products\r\n        console.log(orderComplete)\r\n        return{\r\n            ...state,\r\n            piId: orderComplete, \r\n            cartQuantity: 0,  \r\n        }\r\n    }\r\n    if(action.type === 'EMPTY_CART'){\r\n        return{\r\n            products: [],\r\n            orderId: '',\r\n            subTotal: 0,\r\n            cartQuantity: 0,\r\n            totalValue: 0,\r\n            grandTotal: 0,\r\n            discount: 0,\r\n\r\n            shippingMethod: '',\r\n            billingMethod: '',\r\n            addressId: '',\r\n            addCountry: '',\r\n            piId: '',\r\n            billAndShipAddDetails: ''\r\n        }\r\n    }\r\n    return state;\r\n    \r\n}\r\n\r\nexport default addToCart;"]},"metadata":{},"sourceType":"module"}