{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { $relatedObject, ThreeDOMElement } from './three-dom-element.js';\nconst $threeMaterial = Symbol('threeMaterial');\n/**\n * PBR material properties facade implementation for Three.js materials\n */\n\nexport class PBRMetallicRoughness extends ThreeDOMElement {\n  get [$threeMaterial]() {\n    return this[$relatedObject];\n  }\n\n  constructor(graft, material) {\n    super(graft, material);\n  }\n\n  get baseColorFactor() {\n    const material = this[$threeMaterial];\n\n    if (material.color) {\n      return [...material.color.toArray(), material.opacity];\n    } else {\n      return [1, 1, 1, 1];\n    }\n  }\n\n  set baseColorFactor(value) {\n    this[$threeMaterial].color.fromArray(value);\n    this[$threeMaterial].opacity = value[3];\n  }\n\n  toJSON() {\n    const serialized = super.toJSON();\n    serialized.baseColorFactor = this.baseColorFactor;\n    return serialized;\n  }\n\n}","map":{"version":3,"sources":["../../../src/facade/three-js/pbr-metallic-roughness.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAuBA,SAAQ,cAAR,EAAwB,eAAxB,QAA8C,wBAA9C;AAEA,MAAM,cAAc,GAAG,MAAM,CAAC,eAAD,CAA7B;AAEA;;;;AAGA,OAAM,MAAO,oBAAP,SAAoC,eAApC,CAAmD;AAEvD,OAAY,cAAZ,IAA2B;AACzB,WAAO,KAAK,cAAL,CAAP;AACD;;AAED,EAAA,WAAA,CAAY,KAAZ,EAA+B,QAA/B,EAAiD;AAC/C,UAAM,KAAN,EAAa,QAAb;AACD;;AAED,MAAI,eAAJ,GAAmB;AACjB,UAAM,QAAQ,GAAG,KAAK,cAAL,CAAjB;;AACA,QAAI,QAAQ,CAAC,KAAb,EAAoB;AAClB,aAAO,CAAC,GAAG,QAAQ,CAAC,KAAT,CAAe,OAAf,EAAJ,EAA8B,QAAQ,CAAC,OAAvC,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP;AACD;AACF;;AAED,MAAI,eAAJ,CAAoB,KAApB,EAA+B;AAC7B,SAAK,cAAL,EAAqB,KAArB,CAA2B,SAA3B,CAAqC,KAArC;AACA,SAAK,cAAL,EAAqB,OAArB,GAA+B,KAAK,CAAC,CAAD,CAApC;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,UAAM,UAAU,GAA4C,MAAM,MAAN,EAA5D;AACA,IAAA,UAAU,CAAC,eAAX,GAA6B,KAAK,eAAlC;AACA,WAAO,UAAP;AACD;;AA5BsD","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Material} from 'three';\nimport {MeshStandardMaterial} from 'three';\n\nimport {RGBA} from '../../api.js';\nimport {SerializedPBRMetallicRoughness} from '../../protocol.js';\nimport {PBRMetallicRoughness as PBRMetallicRoughnessInterface} from '../api.js';\n\nimport {ModelGraft} from './model-graft.js';\nimport {$relatedObject, ThreeDOMElement} from './three-dom-element.js';\n\nconst $threeMaterial = Symbol('threeMaterial');\n\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement implements\n    PBRMetallicRoughnessInterface {\n  private get[$threeMaterial](): MeshStandardMaterial {\n    return this[$relatedObject] as MeshStandardMaterial;\n  }\n\n  constructor(graft: ModelGraft, material: Material) {\n    super(graft, material);\n  }\n\n  get baseColorFactor(): RGBA {\n    const material = this[$threeMaterial];\n    if (material.color) {\n      return [...material.color.toArray(), material.opacity] as RGBA;\n    } else {\n      return [1, 1, 1, 1];\n    }\n  }\n\n  set baseColorFactor(value: RGBA) {\n    this[$threeMaterial].color.fromArray(value);\n    this[$threeMaterial].opacity = value[3];\n  }\n\n  toJSON(): SerializedPBRMetallicRoughness {\n    const serialized: Partial<SerializedPBRMetallicRoughness> = super.toJSON();\n    serialized.baseColorFactor = this.baseColorFactor;\n    return serialized as SerializedPBRMetallicRoughness;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}