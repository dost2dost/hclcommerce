{"ast":null,"code":"var registerGeometry = require('../core/geometry').registerGeometry;\n\nvar THREE = require('../lib/three');\n\nvar degToRad = THREE.Math.degToRad;\nregisterGeometry('sphere', {\n  schema: {\n    radius: {\n      default: 1,\n      min: 0\n    },\n    phiLength: {\n      default: 360\n    },\n    phiStart: {\n      default: 0,\n      min: 0\n    },\n    thetaLength: {\n      default: 180,\n      min: 0\n    },\n    thetaStart: {\n      default: 0\n    },\n    segmentsHeight: {\n      default: 18,\n      min: 2,\n      type: 'int'\n    },\n    segmentsWidth: {\n      default: 36,\n      min: 3,\n      type: 'int'\n    }\n  },\n  init: function (data) {\n    this.geometry = new THREE.SphereGeometry(data.radius, data.segmentsWidth, data.segmentsHeight, degToRad(data.phiStart), degToRad(data.phiLength), degToRad(data.thetaStart), degToRad(data.thetaLength));\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/geometries/sphere.js"],"names":["registerGeometry","require","THREE","degToRad","Math","schema","radius","default","min","phiLength","phiStart","thetaLength","thetaStart","segmentsHeight","type","segmentsWidth","init","data","geometry","SphereGeometry"],"mappings":"AAAA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BD,gBAAnD;;AACA,IAAIE,KAAK,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AAEA,IAAIE,QAAQ,GAAGD,KAAK,CAACE,IAAN,CAAWD,QAA1B;AAEAH,gBAAgB,CAAC,QAAD,EAAW;AACzBK,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE;AAACC,MAAAA,OAAO,EAAE,CAAV;AAAaC,MAAAA,GAAG,EAAE;AAAlB,KADF;AAENC,IAAAA,SAAS,EAAE;AAACF,MAAAA,OAAO,EAAE;AAAV,KAFL;AAGNG,IAAAA,QAAQ,EAAE;AAACH,MAAAA,OAAO,EAAE,CAAV;AAAaC,MAAAA,GAAG,EAAE;AAAlB,KAHJ;AAING,IAAAA,WAAW,EAAE;AAACJ,MAAAA,OAAO,EAAE,GAAV;AAAeC,MAAAA,GAAG,EAAE;AAApB,KAJP;AAKNI,IAAAA,UAAU,EAAE;AAACL,MAAAA,OAAO,EAAE;AAAV,KALN;AAMNM,IAAAA,cAAc,EAAE;AAACN,MAAAA,OAAO,EAAE,EAAV;AAAcC,MAAAA,GAAG,EAAE,CAAnB;AAAsBM,MAAAA,IAAI,EAAE;AAA5B,KANV;AAONC,IAAAA,aAAa,EAAE;AAACR,MAAAA,OAAO,EAAE,EAAV;AAAcC,MAAAA,GAAG,EAAE,CAAnB;AAAsBM,MAAAA,IAAI,EAAE;AAA5B;AAPT,GADiB;AAWzBE,EAAAA,IAAI,EAAE,UAAUC,IAAV,EAAgB;AACpB,SAAKC,QAAL,GAAgB,IAAIhB,KAAK,CAACiB,cAAV,CACdF,IAAI,CAACX,MADS,EACDW,IAAI,CAACF,aADJ,EACmBE,IAAI,CAACJ,cADxB,EACwCV,QAAQ,CAACc,IAAI,CAACP,QAAN,CADhD,EAEdP,QAAQ,CAACc,IAAI,CAACR,SAAN,CAFM,EAEYN,QAAQ,CAACc,IAAI,CAACL,UAAN,CAFpB,EAEuCT,QAAQ,CAACc,IAAI,CAACN,WAAN,CAF/C,CAAhB;AAGD;AAfwB,CAAX,CAAhB","sourcesContent":["var registerGeometry = require('../core/geometry').registerGeometry;\nvar THREE = require('../lib/three');\n\nvar degToRad = THREE.Math.degToRad;\n\nregisterGeometry('sphere', {\n  schema: {\n    radius: {default: 1, min: 0},\n    phiLength: {default: 360},\n    phiStart: {default: 0, min: 0},\n    thetaLength: {default: 180, min: 0},\n    thetaStart: {default: 0},\n    segmentsHeight: {default: 18, min: 2, type: 'int'},\n    segmentsWidth: {default: 36, min: 3, type: 'int'}\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.SphereGeometry(\n      data.radius, data.segmentsWidth, data.segmentsHeight, degToRad(data.phiStart),\n      degToRad(data.phiLength), degToRad(data.thetaStart), degToRad(data.thetaLength));\n  }\n});\n"]},"metadata":{},"sourceType":"script"}