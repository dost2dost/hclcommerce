{"ast":null,"code":"var debug = require('../utils/debug');\n\nvar registerComponent = require('../core/component').registerComponent;\n\nvar THREE = require('../lib/three');\n\nvar warn = debug('components:obj-model:warn');\nmodule.exports.Component = registerComponent('obj-model', {\n  schema: {\n    mtl: {\n      type: 'model'\n    },\n    obj: {\n      type: 'model'\n    }\n  },\n  init: function () {\n    var self = this;\n    this.model = null;\n    this.objLoader = new THREE.OBJLoader();\n    this.mtlLoader = new THREE.MTLLoader(this.objLoader.manager); // Allow cross-origin images to be loaded.\n\n    this.mtlLoader.crossOrigin = '';\n    this.el.addEventListener('componentinitialized', function (evt) {\n      if (!self.model) {\n        return;\n      }\n\n      if (evt.detail.name !== 'material') {\n        return;\n      }\n\n      self.applyMaterial();\n    });\n  },\n  update: function () {\n    var data = this.data;\n\n    if (!data.obj) {\n      return;\n    }\n\n    this.resetMesh();\n    this.loadObj(data.obj, data.mtl);\n  },\n  remove: function () {\n    if (!this.model) {\n      return;\n    }\n\n    this.resetMesh();\n  },\n  resetMesh: function () {\n    this.el.removeObject3D('mesh');\n  },\n  loadObj: function (objUrl, mtlUrl) {\n    var self = this;\n    var el = this.el;\n    var mtlLoader = this.mtlLoader;\n    var objLoader = this.objLoader;\n    var rendererSystem = this.el.sceneEl.systems.renderer;\n    var BASE_PATH = mtlUrl.substr(0, mtlUrl.lastIndexOf('/') + 1);\n\n    if (mtlUrl) {\n      // .OBJ with an .MTL.\n      if (el.hasAttribute('material')) {\n        warn('Material component properties are ignored when a .MTL is provided');\n      }\n\n      mtlLoader.setResourcePath(BASE_PATH);\n      mtlLoader.load(mtlUrl, function (materials) {\n        materials.preload();\n        objLoader.setMaterials(materials);\n        objLoader.load(objUrl, function (objModel) {\n          self.model = objModel;\n          self.model.traverse(function (object) {\n            if (object.isMesh) {\n              var material = object.material;\n              if (material.color) rendererSystem.applyColorCorrection(material.color);\n              if (material.map) rendererSystem.applyColorCorrection(material.map);\n              if (material.emissive) rendererSystem.applyColorCorrection(material.emissive);\n              if (material.emissiveMap) rendererSystem.applyColorCorrection(material.emissiveMap);\n            }\n          });\n          el.setObject3D('mesh', objModel);\n          el.emit('model-loaded', {\n            format: 'obj',\n            model: objModel\n          });\n        });\n      });\n      return;\n    } // .OBJ only.\n\n\n    objLoader.load(objUrl, function loadObjOnly(objModel) {\n      self.model = objModel;\n      self.applyMaterial();\n      el.setObject3D('mesh', objModel);\n      el.emit('model-loaded', {\n        format: 'obj',\n        model: objModel\n      });\n    });\n  },\n\n  /**\n   * Apply material from material component recursively.\n   */\n  applyMaterial: function () {\n    var material = this.el.components.material;\n\n    if (!material) {\n      return;\n    }\n\n    this.model.traverse(function (child) {\n      if (child instanceof THREE.Mesh) {\n        child.material = material.material;\n      }\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/obj-model.js"],"names":["debug","require","registerComponent","THREE","warn","module","exports","Component","schema","mtl","type","obj","init","self","model","objLoader","OBJLoader","mtlLoader","MTLLoader","manager","crossOrigin","el","addEventListener","evt","detail","name","applyMaterial","update","data","resetMesh","loadObj","remove","removeObject3D","objUrl","mtlUrl","rendererSystem","sceneEl","systems","renderer","BASE_PATH","substr","lastIndexOf","hasAttribute","setResourcePath","load","materials","preload","setMaterials","objModel","traverse","object","isMesh","material","color","applyColorCorrection","map","emissive","emissiveMap","setObject3D","emit","format","loadObjOnly","components","child","Mesh"],"mappings":"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","sourcesContent":["var debug = require('../utils/debug');\nvar registerComponent = require('../core/component').registerComponent;\nvar THREE = require('../lib/three');\n\nvar warn = debug('components:obj-model:warn');\n\nmodule.exports.Component = registerComponent('obj-model', {\n  schema: {\n    mtl: {type: 'model'},\n    obj: {type: 'model'}\n  },\n\n  init: function () {\n    var self = this;\n\n    this.model = null;\n    this.objLoader = new THREE.OBJLoader();\n    this.mtlLoader = new THREE.MTLLoader(this.objLoader.manager);\n    // Allow cross-origin images to be loaded.\n    this.mtlLoader.crossOrigin = '';\n\n    this.el.addEventListener('componentinitialized', function (evt) {\n      if (!self.model) { return; }\n      if (evt.detail.name !== 'material') { return; }\n      self.applyMaterial();\n    });\n  },\n\n  update: function () {\n    var data = this.data;\n    if (!data.obj) { return; }\n    this.resetMesh();\n    this.loadObj(data.obj, data.mtl);\n  },\n\n  remove: function () {\n    if (!this.model) { return; }\n    this.resetMesh();\n  },\n\n  resetMesh: function () {\n    this.el.removeObject3D('mesh');\n  },\n\n  loadObj: function (objUrl, mtlUrl) {\n    var self = this;\n    var el = this.el;\n    var mtlLoader = this.mtlLoader;\n    var objLoader = this.objLoader;\n    var rendererSystem = this.el.sceneEl.systems.renderer;\n    var BASE_PATH = mtlUrl.substr(0, mtlUrl.lastIndexOf('/') + 1);\n\n    if (mtlUrl) {\n      // .OBJ with an .MTL.\n      if (el.hasAttribute('material')) {\n        warn('Material component properties are ignored when a .MTL is provided');\n      }\n      mtlLoader.setResourcePath(BASE_PATH);\n      mtlLoader.load(mtlUrl, function (materials) {\n        materials.preload();\n        objLoader.setMaterials(materials);\n        objLoader.load(objUrl, function (objModel) {\n          self.model = objModel;\n          self.model.traverse(function (object) {\n            if (object.isMesh) {\n              var material = object.material;\n              if (material.color) rendererSystem.applyColorCorrection(material.color);\n              if (material.map) rendererSystem.applyColorCorrection(material.map);\n              if (material.emissive) rendererSystem.applyColorCorrection(material.emissive);\n              if (material.emissiveMap) rendererSystem.applyColorCorrection(material.emissiveMap);\n            }\n          });\n          el.setObject3D('mesh', objModel);\n          el.emit('model-loaded', {format: 'obj', model: objModel});\n        });\n      });\n      return;\n    }\n\n    // .OBJ only.\n    objLoader.load(objUrl, function loadObjOnly (objModel) {\n      self.model = objModel;\n      self.applyMaterial();\n      el.setObject3D('mesh', objModel);\n      el.emit('model-loaded', {format: 'obj', model: objModel});\n    });\n  },\n\n  /**\n   * Apply material from material component recursively.\n   */\n  applyMaterial: function () {\n    var material = this.el.components.material;\n    if (!material) { return; }\n    this.model.traverse(function (child) {\n      if (child instanceof THREE.Mesh) {\n        child.material = material.material;\n      }\n    });\n  }\n});\n"]},"metadata":{},"sourceType":"script"}