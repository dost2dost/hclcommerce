{"ast":null,"code":"var wordWrap = require('word-wrapper');\n\nvar xtend = require('xtend');\n\nvar number = require('as-number');\n\nvar X_HEIGHTS = ['x', 'e', 'a', 'o', 'n', 's', 'r', 'c', 'u', 'm', 'v', 'w', 'z'];\nvar M_WIDTHS = ['m', 'w'];\nvar CAP_HEIGHTS = ['H', 'I', 'N', 'E', 'F', 'K', 'L', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\nvar TAB_ID = '\\t'.charCodeAt(0);\nvar SPACE_ID = ' '.charCodeAt(0);\nvar ALIGN_LEFT = 0,\n    ALIGN_CENTER = 1,\n    ALIGN_RIGHT = 2;\n\nmodule.exports = function createLayout(opt) {\n  return new TextLayout(opt);\n};\n\nfunction TextLayout(opt) {\n  this.glyphs = [];\n  this._measure = this.computeMetrics.bind(this);\n  this.update(opt);\n}\n\nTextLayout.prototype.update = function (opt) {\n  opt = xtend({\n    measure: this._measure\n  }, opt);\n  this._opt = opt;\n  this._opt.tabSize = number(this._opt.tabSize, 4);\n  if (!opt.font) throw new Error('must provide a valid bitmap font');\n  var glyphs = this.glyphs;\n  var text = opt.text || '';\n  var font = opt.font;\n\n  this._setupSpaceGlyphs(font);\n\n  var lines = wordWrap.lines(text, opt);\n  var minWidth = opt.width || 0; //clear glyphs\n\n  glyphs.length = 0; //get max line width\n\n  var maxLineWidth = lines.reduce(function (prev, line) {\n    return Math.max(prev, line.width, minWidth);\n  }, 0); //the pen position\n\n  var x = 0;\n  var y = 0;\n  var lineHeight = number(opt.lineHeight, font.common.lineHeight);\n  var baseline = font.common.base;\n  var descender = lineHeight - baseline;\n  var letterSpacing = opt.letterSpacing || 0;\n  var height = lineHeight * lines.length - descender;\n  var align = getAlignType(this._opt.align); //draw text along baseline\n\n  y -= height; //the metrics for this text layout\n\n  this._width = maxLineWidth;\n  this._height = height;\n  this._descender = lineHeight - baseline;\n  this._baseline = baseline;\n  this._xHeight = getXHeight(font);\n  this._capHeight = getCapHeight(font);\n  this._lineHeight = lineHeight;\n  this._ascender = lineHeight - descender - this._xHeight; //layout each glyph\n\n  var self = this;\n  lines.forEach(function (line, lineIndex) {\n    var start = line.start;\n    var end = line.end;\n    var lineWidth = line.width;\n    var lastGlyph; //for each glyph in that line...\n\n    for (var i = start; i < end; i++) {\n      var id = text.charCodeAt(i);\n      var glyph = self.getGlyph(font, id);\n\n      if (glyph) {\n        if (lastGlyph) x += getKerning(font, lastGlyph.id, glyph.id);\n        var tx = x;\n        if (align === ALIGN_CENTER) tx += (maxLineWidth - lineWidth) / 2;else if (align === ALIGN_RIGHT) tx += maxLineWidth - lineWidth;\n        glyphs.push({\n          position: [tx, y],\n          data: glyph,\n          index: i,\n          line: lineIndex\n        }); //move pen forward\n\n        x += glyph.xadvance + letterSpacing;\n        lastGlyph = glyph;\n      }\n    } //next line down\n\n\n    y += lineHeight;\n    x = 0;\n  });\n  this._linesTotal = lines.length;\n};\n\nTextLayout.prototype._setupSpaceGlyphs = function (font) {\n  //These are fallbacks, when the font doesn't include\n  //' ' or '\\t' glyphs\n  this._fallbackSpaceGlyph = null;\n  this._fallbackTabGlyph = null;\n  if (!font.chars || font.chars.length === 0) return; //try to get space glyph\n  //then fall back to the 'm' or 'w' glyphs\n  //then fall back to the first glyph available\n\n  var space = getGlyphById(font, SPACE_ID) || getMGlyph(font) || font.chars[0]; //and create a fallback for tab\n\n  var tabWidth = this._opt.tabSize * space.xadvance;\n  this._fallbackSpaceGlyph = space;\n  this._fallbackTabGlyph = xtend(space, {\n    x: 0,\n    y: 0,\n    xadvance: tabWidth,\n    id: TAB_ID,\n    xoffset: 0,\n    yoffset: 0,\n    width: 0,\n    height: 0\n  });\n};\n\nTextLayout.prototype.getGlyph = function (font, id) {\n  var glyph = getGlyphById(font, id);\n  if (glyph) return glyph;else if (id === TAB_ID) return this._fallbackTabGlyph;else if (id === SPACE_ID) return this._fallbackSpaceGlyph;\n  return null;\n};\n\nTextLayout.prototype.computeMetrics = function (text, start, end, width) {\n  var letterSpacing = this._opt.letterSpacing || 0;\n  var font = this._opt.font;\n  var curPen = 0;\n  var curWidth = 0;\n  var count = 0;\n  var glyph;\n  var lastGlyph;\n\n  if (!font.chars || font.chars.length === 0) {\n    return {\n      start: start,\n      end: start,\n      width: 0\n    };\n  }\n\n  end = Math.min(text.length, end);\n\n  for (var i = start; i < end; i++) {\n    var id = text.charCodeAt(i);\n    var glyph = this.getGlyph(font, id);\n\n    if (glyph) {\n      //move pen forward\n      var xoff = glyph.xoffset;\n      var kern = lastGlyph ? getKerning(font, lastGlyph.id, glyph.id) : 0;\n      curPen += kern;\n      var nextPen = curPen + glyph.xadvance + letterSpacing;\n      var nextWidth = curPen + glyph.width; //we've hit our limit; we can't move onto the next glyph\n\n      if (nextWidth >= width || nextPen >= width) break; //otherwise continue along our line\n\n      curPen = nextPen;\n      curWidth = nextWidth;\n      lastGlyph = glyph;\n    }\n\n    count++;\n  } //make sure rightmost edge lines up with rendered glyphs\n\n\n  if (lastGlyph) curWidth += lastGlyph.xoffset;\n  return {\n    start: start,\n    end: start + count,\n    width: curWidth\n  };\n} //getters for the private vars\n;\n\n['width', 'height', 'descender', 'ascender', 'xHeight', 'baseline', 'capHeight', 'lineHeight'].forEach(addGetter);\n\nfunction addGetter(name) {\n  Object.defineProperty(TextLayout.prototype, name, {\n    get: wrapper(name),\n    configurable: true\n  });\n} //create lookups for private vars\n\n\nfunction wrapper(name) {\n  return new Function(['return function ' + name + '() {', '  return this._' + name, '}'].join('\\n'))();\n}\n\nfunction getGlyphById(font, id) {\n  if (!font.chars || font.chars.length === 0) return null;\n  var glyphIdx = findChar(font.chars, id);\n  if (glyphIdx >= 0) return font.chars[glyphIdx];\n  return null;\n}\n\nfunction getXHeight(font) {\n  for (var i = 0; i < X_HEIGHTS.length; i++) {\n    var id = X_HEIGHTS[i].charCodeAt(0);\n    var idx = findChar(font.chars, id);\n    if (idx >= 0) return font.chars[idx].height;\n  }\n\n  return 0;\n}\n\nfunction getMGlyph(font) {\n  for (var i = 0; i < M_WIDTHS.length; i++) {\n    var id = M_WIDTHS[i].charCodeAt(0);\n    var idx = findChar(font.chars, id);\n    if (idx >= 0) return font.chars[idx];\n  }\n\n  return 0;\n}\n\nfunction getCapHeight(font) {\n  for (var i = 0; i < CAP_HEIGHTS.length; i++) {\n    var id = CAP_HEIGHTS[i].charCodeAt(0);\n    var idx = findChar(font.chars, id);\n    if (idx >= 0) return font.chars[idx].height;\n  }\n\n  return 0;\n}\n\nfunction getKerning(font, left, right) {\n  if (!font.kernings || font.kernings.length === 0) return 0;\n  var table = font.kernings;\n\n  for (var i = 0; i < table.length; i++) {\n    var kern = table[i];\n    if (kern.first === left && kern.second === right) return kern.amount;\n  }\n\n  return 0;\n}\n\nfunction getAlignType(align) {\n  if (align === 'center') return ALIGN_CENTER;else if (align === 'right') return ALIGN_RIGHT;\n  return ALIGN_LEFT;\n}\n\nfunction findChar(array, value, start) {\n  start = start || 0;\n\n  for (var i = start; i < array.length; i++) {\n    if (array[i].id === value) {\n      return i;\n    }\n  }\n\n  return -1;\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/layout-bmfont-text/index.js"],"names":["wordWrap","require","xtend","number","X_HEIGHTS","M_WIDTHS","CAP_HEIGHTS","TAB_ID","charCodeAt","SPACE_ID","ALIGN_LEFT","ALIGN_CENTER","ALIGN_RIGHT","module","exports","createLayout","opt","TextLayout","glyphs","_measure","computeMetrics","bind","update","prototype","measure","_opt","tabSize","font","Error","text","_setupSpaceGlyphs","lines","minWidth","width","length","maxLineWidth","reduce","prev","line","Math","max","x","y","lineHeight","common","baseline","base","descender","letterSpacing","height","align","getAlignType","_width","_height","_descender","_baseline","_xHeight","getXHeight","_capHeight","getCapHeight","_lineHeight","_ascender","self","forEach","lineIndex","start","end","lineWidth","lastGlyph","i","id","glyph","getGlyph","getKerning","tx","push","position","data","index","xadvance","_linesTotal","_fallbackSpaceGlyph","_fallbackTabGlyph","chars","space","getGlyphById","getMGlyph","tabWidth","xoffset","yoffset","curPen","curWidth","count","min","xoff","kern","nextPen","nextWidth","addGetter","name","Object","defineProperty","get","wrapper","configurable","Function","join","glyphIdx","findChar","idx","left","right","kernings","table","first","second","amount","array","value"],"mappings":"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","sourcesContent":["var wordWrap = require('word-wrapper')\nvar xtend = require('xtend')\nvar number = require('as-number')\n\nvar X_HEIGHTS = ['x', 'e', 'a', 'o', 'n', 's', 'r', 'c', 'u', 'm', 'v', 'w', 'z']\nvar M_WIDTHS = ['m', 'w']\nvar CAP_HEIGHTS = ['H', 'I', 'N', 'E', 'F', 'K', 'L', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\n\nvar TAB_ID = '\\t'.charCodeAt(0)\nvar SPACE_ID = ' '.charCodeAt(0)\nvar ALIGN_LEFT = 0, \n    ALIGN_CENTER = 1, \n    ALIGN_RIGHT = 2\n\nmodule.exports = function createLayout(opt) {\n  return new TextLayout(opt)\n}\n\nfunction TextLayout(opt) {\n  this.glyphs = []\n  this._measure = this.computeMetrics.bind(this)\n  this.update(opt)\n}\n\nTextLayout.prototype.update = function(opt) {\n  opt = xtend({\n    measure: this._measure\n  }, opt)\n  this._opt = opt\n  this._opt.tabSize = number(this._opt.tabSize, 4)\n\n  if (!opt.font)\n    throw new Error('must provide a valid bitmap font')\n\n  var glyphs = this.glyphs\n  var text = opt.text||'' \n  var font = opt.font\n  this._setupSpaceGlyphs(font)\n  \n  var lines = wordWrap.lines(text, opt)\n  var minWidth = opt.width || 0\n\n  //clear glyphs\n  glyphs.length = 0\n\n  //get max line width\n  var maxLineWidth = lines.reduce(function(prev, line) {\n    return Math.max(prev, line.width, minWidth)\n  }, 0)\n\n  //the pen position\n  var x = 0\n  var y = 0\n  var lineHeight = number(opt.lineHeight, font.common.lineHeight)\n  var baseline = font.common.base\n  var descender = lineHeight-baseline\n  var letterSpacing = opt.letterSpacing || 0\n  var height = lineHeight * lines.length - descender\n  var align = getAlignType(this._opt.align)\n\n  //draw text along baseline\n  y -= height\n  \n  //the metrics for this text layout\n  this._width = maxLineWidth\n  this._height = height\n  this._descender = lineHeight - baseline\n  this._baseline = baseline\n  this._xHeight = getXHeight(font)\n  this._capHeight = getCapHeight(font)\n  this._lineHeight = lineHeight\n  this._ascender = lineHeight - descender - this._xHeight\n    \n  //layout each glyph\n  var self = this\n  lines.forEach(function(line, lineIndex) {\n    var start = line.start\n    var end = line.end\n    var lineWidth = line.width\n    var lastGlyph\n    \n    //for each glyph in that line...\n    for (var i=start; i<end; i++) {\n      var id = text.charCodeAt(i)\n      var glyph = self.getGlyph(font, id)\n      if (glyph) {\n        if (lastGlyph) \n          x += getKerning(font, lastGlyph.id, glyph.id)\n\n        var tx = x\n        if (align === ALIGN_CENTER) \n          tx += (maxLineWidth-lineWidth)/2\n        else if (align === ALIGN_RIGHT)\n          tx += (maxLineWidth-lineWidth)\n\n        glyphs.push({\n          position: [tx, y],\n          data: glyph,\n          index: i,\n          line: lineIndex\n        })  \n\n        //move pen forward\n        x += glyph.xadvance + letterSpacing\n        lastGlyph = glyph\n      }\n    }\n\n    //next line down\n    y += lineHeight\n    x = 0\n  })\n  this._linesTotal = lines.length;\n}\n\nTextLayout.prototype._setupSpaceGlyphs = function(font) {\n  //These are fallbacks, when the font doesn't include\n  //' ' or '\\t' glyphs\n  this._fallbackSpaceGlyph = null\n  this._fallbackTabGlyph = null\n\n  if (!font.chars || font.chars.length === 0)\n    return\n\n  //try to get space glyph\n  //then fall back to the 'm' or 'w' glyphs\n  //then fall back to the first glyph available\n  var space = getGlyphById(font, SPACE_ID) \n          || getMGlyph(font) \n          || font.chars[0]\n\n  //and create a fallback for tab\n  var tabWidth = this._opt.tabSize * space.xadvance\n  this._fallbackSpaceGlyph = space\n  this._fallbackTabGlyph = xtend(space, {\n    x: 0, y: 0, xadvance: tabWidth, id: TAB_ID, \n    xoffset: 0, yoffset: 0, width: 0, height: 0\n  })\n}\n\nTextLayout.prototype.getGlyph = function(font, id) {\n  var glyph = getGlyphById(font, id)\n  if (glyph)\n    return glyph\n  else if (id === TAB_ID) \n    return this._fallbackTabGlyph\n  else if (id === SPACE_ID) \n    return this._fallbackSpaceGlyph\n  return null\n}\n\nTextLayout.prototype.computeMetrics = function(text, start, end, width) {\n  var letterSpacing = this._opt.letterSpacing || 0\n  var font = this._opt.font\n  var curPen = 0\n  var curWidth = 0\n  var count = 0\n  var glyph\n  var lastGlyph\n\n  if (!font.chars || font.chars.length === 0) {\n    return {\n      start: start,\n      end: start,\n      width: 0\n    }\n  }\n\n  end = Math.min(text.length, end)\n  for (var i=start; i < end; i++) {\n    var id = text.charCodeAt(i)\n    var glyph = this.getGlyph(font, id)\n\n    if (glyph) {\n      //move pen forward\n      var xoff = glyph.xoffset\n      var kern = lastGlyph ? getKerning(font, lastGlyph.id, glyph.id) : 0\n      curPen += kern\n\n      var nextPen = curPen + glyph.xadvance + letterSpacing\n      var nextWidth = curPen + glyph.width\n\n      //we've hit our limit; we can't move onto the next glyph\n      if (nextWidth >= width || nextPen >= width)\n        break\n\n      //otherwise continue along our line\n      curPen = nextPen\n      curWidth = nextWidth\n      lastGlyph = glyph\n    }\n    count++\n  }\n  \n  //make sure rightmost edge lines up with rendered glyphs\n  if (lastGlyph)\n    curWidth += lastGlyph.xoffset\n\n  return {\n    start: start,\n    end: start + count,\n    width: curWidth\n  }\n}\n\n//getters for the private vars\n;['width', 'height', \n  'descender', 'ascender',\n  'xHeight', 'baseline',\n  'capHeight',\n  'lineHeight' ].forEach(addGetter)\n\nfunction addGetter(name) {\n  Object.defineProperty(TextLayout.prototype, name, {\n    get: wrapper(name),\n    configurable: true\n  })\n}\n\n//create lookups for private vars\nfunction wrapper(name) {\n  return (new Function([\n    'return function '+name+'() {',\n    '  return this._'+name,\n    '}'\n  ].join('\\n')))()\n}\n\nfunction getGlyphById(font, id) {\n  if (!font.chars || font.chars.length === 0)\n    return null\n\n  var glyphIdx = findChar(font.chars, id)\n  if (glyphIdx >= 0)\n    return font.chars[glyphIdx]\n  return null\n}\n\nfunction getXHeight(font) {\n  for (var i=0; i<X_HEIGHTS.length; i++) {\n    var id = X_HEIGHTS[i].charCodeAt(0)\n    var idx = findChar(font.chars, id)\n    if (idx >= 0) \n      return font.chars[idx].height\n  }\n  return 0\n}\n\nfunction getMGlyph(font) {\n  for (var i=0; i<M_WIDTHS.length; i++) {\n    var id = M_WIDTHS[i].charCodeAt(0)\n    var idx = findChar(font.chars, id)\n    if (idx >= 0) \n      return font.chars[idx]\n  }\n  return 0\n}\n\nfunction getCapHeight(font) {\n  for (var i=0; i<CAP_HEIGHTS.length; i++) {\n    var id = CAP_HEIGHTS[i].charCodeAt(0)\n    var idx = findChar(font.chars, id)\n    if (idx >= 0) \n      return font.chars[idx].height\n  }\n  return 0\n}\n\nfunction getKerning(font, left, right) {\n  if (!font.kernings || font.kernings.length === 0)\n    return 0\n\n  var table = font.kernings\n  for (var i=0; i<table.length; i++) {\n    var kern = table[i]\n    if (kern.first === left && kern.second === right)\n      return kern.amount\n  }\n  return 0\n}\n\nfunction getAlignType(align) {\n  if (align === 'center')\n    return ALIGN_CENTER\n  else if (align === 'right')\n    return ALIGN_RIGHT\n  return ALIGN_LEFT\n}\n\nfunction findChar (array, value, start) {\n  start = start || 0\n  for (var i = start; i < array.length; i++) {\n    if (array[i].id === value) {\n      return i\n    }\n  }\n  return -1\n}"]},"metadata":{},"sourceType":"script"}