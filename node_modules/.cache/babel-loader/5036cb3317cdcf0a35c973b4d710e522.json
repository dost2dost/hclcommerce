{"ast":null,"code":"var registerGeometry = require('../core/geometry').registerGeometry;\n\nvar THREE = require('../lib/three');\n\nvar quaternion = new THREE.Quaternion();\nvar rotateVector = new THREE.Vector3(0, 0, 1);\nvar uvMinVector = new THREE.Vector2();\nvar uvMaxVector = new THREE.Vector2();\nvar uvScaleVector = new THREE.Vector2();\nregisterGeometry('triangle', {\n  schema: {\n    vertexA: {\n      type: 'vec3',\n      default: {\n        x: 0,\n        y: 0.5,\n        z: 0\n      }\n    },\n    vertexB: {\n      type: 'vec3',\n      default: {\n        x: -0.5,\n        y: -0.5,\n        z: 0\n      }\n    },\n    vertexC: {\n      type: 'vec3',\n      default: {\n        x: 0.5,\n        y: -0.5,\n        z: 0\n      }\n    }\n  },\n  init: function (data) {\n    var geometry;\n    var normal;\n    var triangle;\n    var uvA;\n    var uvB;\n    var uvC;\n    triangle = new THREE.Triangle();\n    triangle.a.set(data.vertexA.x, data.vertexA.y, data.vertexA.z);\n    triangle.b.set(data.vertexB.x, data.vertexB.y, data.vertexB.z);\n    triangle.c.set(data.vertexC.x, data.vertexC.y, data.vertexC.z);\n    normal = triangle.getNormal(new THREE.Vector3()); // Rotate the 3D triangle to be parallel to XY plane.\n\n    quaternion.setFromUnitVectors(normal, rotateVector);\n    uvA = triangle.a.clone().applyQuaternion(quaternion);\n    uvB = triangle.b.clone().applyQuaternion(quaternion);\n    uvC = triangle.c.clone().applyQuaternion(quaternion); // Compute UVs.\n    // Normalize x/y values of UV so they are within 0 to 1.\n\n    uvMinVector.set(Math.min(uvA.x, uvB.x, uvC.x), Math.min(uvA.y, uvB.y, uvC.y));\n    uvMaxVector.set(Math.max(uvA.x, uvB.x, uvC.x), Math.max(uvA.y, uvB.y, uvC.y));\n    uvScaleVector.set(0, 0).subVectors(uvMaxVector, uvMinVector);\n    uvA = new THREE.Vector2().subVectors(uvA, uvMinVector).divide(uvScaleVector);\n    uvB = new THREE.Vector2().subVectors(uvB, uvMinVector).divide(uvScaleVector);\n    uvC = new THREE.Vector2().subVectors(uvC, uvMinVector).divide(uvScaleVector);\n    geometry = this.geometry = new THREE.Geometry();\n    geometry.vertices.push(triangle.a);\n    geometry.vertices.push(triangle.b);\n    geometry.vertices.push(triangle.c);\n    geometry.faces.push(new THREE.Face3(0, 1, 2, normal));\n    geometry.faceVertexUvs[0] = [[uvA, uvB, uvC]];\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/geometries/triangle.js"],"names":["registerGeometry","require","THREE","quaternion","Quaternion","rotateVector","Vector3","uvMinVector","Vector2","uvMaxVector","uvScaleVector","schema","vertexA","type","default","x","y","z","vertexB","vertexC","init","data","geometry","normal","triangle","uvA","uvB","uvC","Triangle","a","set","b","c","getNormal","setFromUnitVectors","clone","applyQuaternion","Math","min","max","subVectors","divide","Geometry","vertices","push","faces","Face3","faceVertexUvs"],"mappings":"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","sourcesContent":["var registerGeometry = require('../core/geometry').registerGeometry;\nvar THREE = require('../lib/three');\n\nvar quaternion = new THREE.Quaternion();\nvar rotateVector = new THREE.Vector3(0, 0, 1);\nvar uvMinVector = new THREE.Vector2();\nvar uvMaxVector = new THREE.Vector2();\nvar uvScaleVector = new THREE.Vector2();\n\nregisterGeometry('triangle', {\n  schema: {\n    vertexA: {type: 'vec3', default: {x: 0, y: 0.5, z: 0}},\n    vertexB: {type: 'vec3', default: {x: -0.5, y: -0.5, z: 0}},\n    vertexC: {type: 'vec3', default: {x: 0.5, y: -0.5, z: 0}}\n  },\n\n  init: function (data) {\n    var geometry;\n    var normal;\n    var triangle;\n    var uvA;\n    var uvB;\n    var uvC;\n\n    triangle = new THREE.Triangle();\n    triangle.a.set(data.vertexA.x, data.vertexA.y, data.vertexA.z);\n    triangle.b.set(data.vertexB.x, data.vertexB.y, data.vertexB.z);\n    triangle.c.set(data.vertexC.x, data.vertexC.y, data.vertexC.z);\n    normal = triangle.getNormal(new THREE.Vector3());\n\n    // Rotate the 3D triangle to be parallel to XY plane.\n    quaternion.setFromUnitVectors(normal, rotateVector);\n    uvA = triangle.a.clone().applyQuaternion(quaternion);\n    uvB = triangle.b.clone().applyQuaternion(quaternion);\n    uvC = triangle.c.clone().applyQuaternion(quaternion);\n\n    // Compute UVs.\n    // Normalize x/y values of UV so they are within 0 to 1.\n    uvMinVector.set(Math.min(uvA.x, uvB.x, uvC.x), Math.min(uvA.y, uvB.y, uvC.y));\n    uvMaxVector.set(Math.max(uvA.x, uvB.x, uvC.x), Math.max(uvA.y, uvB.y, uvC.y));\n    uvScaleVector.set(0, 0).subVectors(uvMaxVector, uvMinVector);\n    uvA = new THREE.Vector2().subVectors(uvA, uvMinVector).divide(uvScaleVector);\n    uvB = new THREE.Vector2().subVectors(uvB, uvMinVector).divide(uvScaleVector);\n    uvC = new THREE.Vector2().subVectors(uvC, uvMinVector).divide(uvScaleVector);\n\n    geometry = this.geometry = new THREE.Geometry();\n    geometry.vertices.push(triangle.a);\n    geometry.vertices.push(triangle.b);\n    geometry.vertices.push(triangle.c);\n    geometry.faces.push(new THREE.Face3(0, 1, 2, normal));\n    geometry.faceVertexUvs[0] = [[uvA, uvB, uvC]];\n  }\n});\n"]},"metadata":{},"sourceType":"script"}