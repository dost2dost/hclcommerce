{"ast":null,"code":"var createLayout = require('layout-bmfont-text');\n\nvar inherits = require('inherits');\n\nvar createIndices = require('quad-indices');\n\nvar buffer = require('three-buffer-vertex-data');\n\nvar assign = require('object-assign');\n\nvar vertices = require('./lib/vertices');\n\nvar utils = require('./lib/utils');\n\nvar Base = THREE.BufferGeometry;\n\nmodule.exports = function createTextGeometry(opt) {\n  return new TextGeometry(opt);\n};\n\nfunction TextGeometry(opt) {\n  Base.call(this);\n\n  if (typeof opt === 'string') {\n    opt = {\n      text: opt\n    };\n  } // use these as default values for any subsequent\n  // calls to update()\n\n\n  this._opt = assign({}, opt); // also do an initial setup...\n\n  if (opt) this.update(opt);\n}\n\ninherits(TextGeometry, Base);\n\nTextGeometry.prototype.update = function (opt) {\n  if (typeof opt === 'string') {\n    opt = {\n      text: opt\n    };\n  } // use constructor defaults\n\n\n  opt = assign({}, this._opt, opt);\n\n  if (!opt.font) {\n    throw new TypeError('must specify a { font } in options');\n  }\n\n  this.layout = createLayout(opt); // get vec2 texcoords\n\n  var flipY = opt.flipY !== false; // the desired BMFont data\n\n  var font = opt.font; // determine texture size from font file\n\n  var texWidth = font.common.scaleW;\n  var texHeight = font.common.scaleH; // get visible glyphs\n\n  var glyphs = this.layout.glyphs.filter(function (glyph) {\n    var bitmap = glyph.data;\n    return bitmap.width * bitmap.height > 0;\n  }); // provide visible glyphs for convenience\n\n  this.visibleGlyphs = glyphs; // get common vertex data\n\n  var positions = vertices.positions(glyphs);\n  var uvs = vertices.uvs(glyphs, texWidth, texHeight, flipY);\n  var indices = createIndices({\n    clockwise: true,\n    type: 'uint16',\n    count: glyphs.length\n  }); // update vertex data\n\n  buffer.index(this, indices, 1, 'uint16');\n  buffer.attr(this, 'position', positions, 2);\n  buffer.attr(this, 'uv', uvs, 2); // update multipage data\n\n  if (!opt.multipage && 'page' in this.attributes) {\n    // disable multipage rendering\n    this.removeAttribute('page');\n  } else if (opt.multipage) {\n    var pages = vertices.pages(glyphs); // enable multipage rendering\n\n    buffer.attr(this, 'page', pages, 1);\n  }\n};\n\nTextGeometry.prototype.computeBoundingSphere = function () {\n  if (this.boundingSphere === null) {\n    this.boundingSphere = new THREE.Sphere();\n  }\n\n  var positions = this.attributes.position.array;\n  var itemSize = this.attributes.position.itemSize;\n\n  if (!positions || !itemSize || positions.length < 2) {\n    this.boundingSphere.radius = 0;\n    this.boundingSphere.center.set(0, 0, 0);\n    return;\n  }\n\n  utils.computeSphere(positions, this.boundingSphere);\n\n  if (isNaN(this.boundingSphere.radius)) {\n    console.error('THREE.BufferGeometry.computeBoundingSphere(): ' + 'Computed radius is NaN. The ' + '\"position\" attribute is likely to have NaN values.');\n  }\n};\n\nTextGeometry.prototype.computeBoundingBox = function () {\n  if (this.boundingBox === null) {\n    this.boundingBox = new THREE.Box3();\n  }\n\n  var bbox = this.boundingBox;\n  var positions = this.attributes.position.array;\n  var itemSize = this.attributes.position.itemSize;\n\n  if (!positions || !itemSize || positions.length < 2) {\n    bbox.makeEmpty();\n    return;\n  }\n\n  utils.computeBox(positions, bbox);\n};","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/three-bmfont-text/index.js"],"names":["createLayout","require","inherits","createIndices","buffer","assign","vertices","utils","Base","THREE","BufferGeometry","module","exports","createTextGeometry","opt","TextGeometry","call","text","_opt","update","prototype","font","TypeError","layout","flipY","texWidth","common","scaleW","texHeight","scaleH","glyphs","filter","glyph","bitmap","data","width","height","visibleGlyphs","positions","uvs","indices","clockwise","type","count","length","index","attr","multipage","attributes","removeAttribute","pages","computeBoundingSphere","boundingSphere","Sphere","position","array","itemSize","radius","center","set","computeSphere","isNaN","console","error","computeBoundingBox","boundingBox","Box3","bbox","makeEmpty","computeBox"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA1B;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,cAAD,CAA3B;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,0BAAD,CAApB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,eAAD,CAApB;;AAEA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,gBAAD,CAAtB;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,aAAD,CAAnB;;AAEA,IAAIO,IAAI,GAAGC,KAAK,CAACC,cAAjB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA6BC,GAA7B,EAAkC;AACjD,SAAO,IAAIC,YAAJ,CAAiBD,GAAjB,CAAP;AACD,CAFD;;AAIA,SAASC,YAAT,CAAuBD,GAAvB,EAA4B;AAC1BN,EAAAA,IAAI,CAACQ,IAAL,CAAU,IAAV;;AAEA,MAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAG;AAAEG,MAAAA,IAAI,EAAEH;AAAR,KAAN;AACD,GALyB,CAO1B;AACA;;;AACA,OAAKI,IAAL,GAAYb,MAAM,CAAC,EAAD,EAAKS,GAAL,CAAlB,CAT0B,CAW1B;;AACA,MAAIA,GAAJ,EAAS,KAAKK,MAAL,CAAYL,GAAZ;AACV;;AAEDZ,QAAQ,CAACa,YAAD,EAAeP,IAAf,CAAR;;AAEAO,YAAY,CAACK,SAAb,CAAuBD,MAAvB,GAAgC,UAAUL,GAAV,EAAe;AAC7C,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAG;AAAEG,MAAAA,IAAI,EAAEH;AAAR,KAAN;AACD,GAH4C,CAK7C;;;AACAA,EAAAA,GAAG,GAAGT,MAAM,CAAC,EAAD,EAAK,KAAKa,IAAV,EAAgBJ,GAAhB,CAAZ;;AAEA,MAAI,CAACA,GAAG,CAACO,IAAT,EAAe;AACb,UAAM,IAAIC,SAAJ,CAAc,oCAAd,CAAN;AACD;;AAED,OAAKC,MAAL,GAAcvB,YAAY,CAACc,GAAD,CAA1B,CAZ6C,CAc7C;;AACA,MAAIU,KAAK,GAAGV,GAAG,CAACU,KAAJ,KAAc,KAA1B,CAf6C,CAiB7C;;AACA,MAAIH,IAAI,GAAGP,GAAG,CAACO,IAAf,CAlB6C,CAoB7C;;AACA,MAAII,QAAQ,GAAGJ,IAAI,CAACK,MAAL,CAAYC,MAA3B;AACA,MAAIC,SAAS,GAAGP,IAAI,CAACK,MAAL,CAAYG,MAA5B,CAtB6C,CAwB7C;;AACA,MAAIC,MAAM,GAAG,KAAKP,MAAL,CAAYO,MAAZ,CAAmBC,MAAnB,CAA0B,UAAUC,KAAV,EAAiB;AACtD,QAAIC,MAAM,GAAGD,KAAK,CAACE,IAAnB;AACA,WAAOD,MAAM,CAACE,KAAP,GAAeF,MAAM,CAACG,MAAtB,GAA+B,CAAtC;AACD,GAHY,CAAb,CAzB6C,CA8B7C;;AACA,OAAKC,aAAL,GAAqBP,MAArB,CA/B6C,CAiC7C;;AACA,MAAIQ,SAAS,GAAGhC,QAAQ,CAACgC,SAAT,CAAmBR,MAAnB,CAAhB;AACA,MAAIS,GAAG,GAAGjC,QAAQ,CAACiC,GAAT,CAAaT,MAAb,EAAqBL,QAArB,EAA+BG,SAA/B,EAA0CJ,KAA1C,CAAV;AACA,MAAIgB,OAAO,GAAGrC,aAAa,CAAC;AAC1BsC,IAAAA,SAAS,EAAE,IADe;AAE1BC,IAAAA,IAAI,EAAE,QAFoB;AAG1BC,IAAAA,KAAK,EAAEb,MAAM,CAACc;AAHY,GAAD,CAA3B,CApC6C,CA0C7C;;AACAxC,EAAAA,MAAM,CAACyC,KAAP,CAAa,IAAb,EAAmBL,OAAnB,EAA4B,CAA5B,EAA+B,QAA/B;AACApC,EAAAA,MAAM,CAAC0C,IAAP,CAAY,IAAZ,EAAkB,UAAlB,EAA8BR,SAA9B,EAAyC,CAAzC;AACAlC,EAAAA,MAAM,CAAC0C,IAAP,CAAY,IAAZ,EAAkB,IAAlB,EAAwBP,GAAxB,EAA6B,CAA7B,EA7C6C,CA+C7C;;AACA,MAAI,CAACzB,GAAG,CAACiC,SAAL,IAAkB,UAAU,KAAKC,UAArC,EAAiD;AAC/C;AACA,SAAKC,eAAL,CAAqB,MAArB;AACD,GAHD,MAGO,IAAInC,GAAG,CAACiC,SAAR,EAAmB;AACxB,QAAIG,KAAK,GAAG5C,QAAQ,CAAC4C,KAAT,CAAepB,MAAf,CAAZ,CADwB,CAExB;;AACA1B,IAAAA,MAAM,CAAC0C,IAAP,CAAY,IAAZ,EAAkB,MAAlB,EAA0BI,KAA1B,EAAiC,CAAjC;AACD;AACF,CAxDD;;AA0DAnC,YAAY,CAACK,SAAb,CAAuB+B,qBAAvB,GAA+C,YAAY;AACzD,MAAI,KAAKC,cAAL,KAAwB,IAA5B,EAAkC;AAChC,SAAKA,cAAL,GAAsB,IAAI3C,KAAK,CAAC4C,MAAV,EAAtB;AACD;;AAED,MAAIf,SAAS,GAAG,KAAKU,UAAL,CAAgBM,QAAhB,CAAyBC,KAAzC;AACA,MAAIC,QAAQ,GAAG,KAAKR,UAAL,CAAgBM,QAAhB,CAAyBE,QAAxC;;AACA,MAAI,CAAClB,SAAD,IAAc,CAACkB,QAAf,IAA2BlB,SAAS,CAACM,MAAV,GAAmB,CAAlD,EAAqD;AACnD,SAAKQ,cAAL,CAAoBK,MAApB,GAA6B,CAA7B;AACA,SAAKL,cAAL,CAAoBM,MAApB,CAA2BC,GAA3B,CAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC;AACA;AACD;;AACDpD,EAAAA,KAAK,CAACqD,aAAN,CAAoBtB,SAApB,EAA+B,KAAKc,cAApC;;AACA,MAAIS,KAAK,CAAC,KAAKT,cAAL,CAAoBK,MAArB,CAAT,EAAuC;AACrCK,IAAAA,OAAO,CAACC,KAAR,CAAc,mDACZ,8BADY,GAEZ,oDAFF;AAGD;AACF,CAlBD;;AAoBAhD,YAAY,CAACK,SAAb,CAAuB4C,kBAAvB,GAA4C,YAAY;AACtD,MAAI,KAAKC,WAAL,KAAqB,IAAzB,EAA+B;AAC7B,SAAKA,WAAL,GAAmB,IAAIxD,KAAK,CAACyD,IAAV,EAAnB;AACD;;AAED,MAAIC,IAAI,GAAG,KAAKF,WAAhB;AACA,MAAI3B,SAAS,GAAG,KAAKU,UAAL,CAAgBM,QAAhB,CAAyBC,KAAzC;AACA,MAAIC,QAAQ,GAAG,KAAKR,UAAL,CAAgBM,QAAhB,CAAyBE,QAAxC;;AACA,MAAI,CAAClB,SAAD,IAAc,CAACkB,QAAf,IAA2BlB,SAAS,CAACM,MAAV,GAAmB,CAAlD,EAAqD;AACnDuB,IAAAA,IAAI,CAACC,SAAL;AACA;AACD;;AACD7D,EAAAA,KAAK,CAAC8D,UAAN,CAAiB/B,SAAjB,EAA4B6B,IAA5B;AACD,CAbD","sourcesContent":["var createLayout = require('layout-bmfont-text')\nvar inherits = require('inherits')\nvar createIndices = require('quad-indices')\nvar buffer = require('three-buffer-vertex-data')\nvar assign = require('object-assign')\n\nvar vertices = require('./lib/vertices')\nvar utils = require('./lib/utils')\n\nvar Base = THREE.BufferGeometry\n\nmodule.exports = function createTextGeometry (opt) {\n  return new TextGeometry(opt)\n}\n\nfunction TextGeometry (opt) {\n  Base.call(this)\n\n  if (typeof opt === 'string') {\n    opt = { text: opt }\n  }\n\n  // use these as default values for any subsequent\n  // calls to update()\n  this._opt = assign({}, opt)\n\n  // also do an initial setup...\n  if (opt) this.update(opt)\n}\n\ninherits(TextGeometry, Base)\n\nTextGeometry.prototype.update = function (opt) {\n  if (typeof opt === 'string') {\n    opt = { text: opt }\n  }\n\n  // use constructor defaults\n  opt = assign({}, this._opt, opt)\n\n  if (!opt.font) {\n    throw new TypeError('must specify a { font } in options')\n  }\n\n  this.layout = createLayout(opt)\n\n  // get vec2 texcoords\n  var flipY = opt.flipY !== false\n\n  // the desired BMFont data\n  var font = opt.font\n\n  // determine texture size from font file\n  var texWidth = font.common.scaleW\n  var texHeight = font.common.scaleH\n\n  // get visible glyphs\n  var glyphs = this.layout.glyphs.filter(function (glyph) {\n    var bitmap = glyph.data\n    return bitmap.width * bitmap.height > 0\n  })\n\n  // provide visible glyphs for convenience\n  this.visibleGlyphs = glyphs\n\n  // get common vertex data\n  var positions = vertices.positions(glyphs)\n  var uvs = vertices.uvs(glyphs, texWidth, texHeight, flipY)\n  var indices = createIndices({\n    clockwise: true,\n    type: 'uint16',\n    count: glyphs.length\n  })\n\n  // update vertex data\n  buffer.index(this, indices, 1, 'uint16')\n  buffer.attr(this, 'position', positions, 2)\n  buffer.attr(this, 'uv', uvs, 2)\n\n  // update multipage data\n  if (!opt.multipage && 'page' in this.attributes) {\n    // disable multipage rendering\n    this.removeAttribute('page')\n  } else if (opt.multipage) {\n    var pages = vertices.pages(glyphs)\n    // enable multipage rendering\n    buffer.attr(this, 'page', pages, 1)\n  }\n}\n\nTextGeometry.prototype.computeBoundingSphere = function () {\n  if (this.boundingSphere === null) {\n    this.boundingSphere = new THREE.Sphere()\n  }\n\n  var positions = this.attributes.position.array\n  var itemSize = this.attributes.position.itemSize\n  if (!positions || !itemSize || positions.length < 2) {\n    this.boundingSphere.radius = 0\n    this.boundingSphere.center.set(0, 0, 0)\n    return\n  }\n  utils.computeSphere(positions, this.boundingSphere)\n  if (isNaN(this.boundingSphere.radius)) {\n    console.error('THREE.BufferGeometry.computeBoundingSphere(): ' +\n      'Computed radius is NaN. The ' +\n      '\"position\" attribute is likely to have NaN values.')\n  }\n}\n\nTextGeometry.prototype.computeBoundingBox = function () {\n  if (this.boundingBox === null) {\n    this.boundingBox = new THREE.Box3()\n  }\n\n  var bbox = this.boundingBox\n  var positions = this.attributes.position.array\n  var itemSize = this.attributes.position.itemSize\n  if (!positions || !itemSize || positions.length < 2) {\n    bbox.makeEmpty()\n    return\n  }\n  utils.computeBox(positions, bbox)\n}\n"]},"metadata":{},"sourceType":"script"}