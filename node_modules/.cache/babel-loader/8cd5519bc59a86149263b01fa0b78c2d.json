{"ast":null,"code":"var component = require('../core/component');\n\nvar THREE = require('../lib/three');\n\nvar bind = require('../utils/bind');\n\nvar registerComponent = component.registerComponent;\n/**\n * Shadow component.\n *\n * When applied to an entity, that entity's geometry and any descendants will cast or receive\n * shadows as specified by the `cast` and `receive` properties.\n */\n\nmodule.exports.Component = registerComponent('shadow', {\n  schema: {\n    cast: {\n      default: true\n    },\n    receive: {\n      default: true\n    }\n  },\n  init: function () {\n    this.onMeshChanged = bind(this.update, this);\n    this.el.addEventListener('object3dset', this.onMeshChanged);\n    this.system.setShadowMapEnabled(true);\n  },\n  update: function () {\n    var data = this.data;\n    this.updateDescendants(data.cast, data.receive);\n  },\n  remove: function () {\n    var el = this.el;\n    el.removeEventListener('object3dset', this.onMeshChanged);\n    this.updateDescendants(false, false);\n  },\n  updateDescendants: function (cast, receive) {\n    var sceneEl = this.el.sceneEl;\n    this.el.object3D.traverse(function (node) {\n      if (!(node instanceof THREE.Mesh)) {\n        return;\n      }\n\n      node.castShadow = cast;\n      node.receiveShadow = receive; // If scene has already rendered, materials must be updated.\n\n      if (sceneEl.hasLoaded && node.material) {\n        var materials = Array.isArray(node.material) ? node.material : [node.material];\n\n        for (var i = 0; i < materials.length; i++) {\n          materials[i].needsUpdate = true;\n        }\n      }\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/shadow.js"],"names":["component","require","THREE","bind","registerComponent","module","exports","Component","schema","cast","default","receive","init","onMeshChanged","update","el","addEventListener","system","setShadowMapEnabled","data","updateDescendants","remove","removeEventListener","sceneEl","object3D","traverse","node","Mesh","castShadow","receiveShadow","hasLoaded","material","materials","Array","isArray","i","length","needsUpdate"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,mBAAD,CAAvB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAIG,iBAAiB,GAAGJ,SAAS,CAACI,iBAAlC;AAEA;;;;;;;AAMAC,MAAM,CAACC,OAAP,CAAeC,SAAf,GAA2BH,iBAAiB,CAAC,QAAD,EAAW;AACrDI,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV,KADA;AAENC,IAAAA,OAAO,EAAE;AAACD,MAAAA,OAAO,EAAE;AAAV;AAFH,GAD6C;AAMrDE,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,aAAL,GAAqBV,IAAI,CAAC,KAAKW,MAAN,EAAc,IAAd,CAAzB;AACA,SAAKC,EAAL,CAAQC,gBAAR,CAAyB,aAAzB,EAAwC,KAAKH,aAA7C;AACA,SAAKI,MAAL,CAAYC,mBAAZ,CAAgC,IAAhC;AACD,GAVoD;AAYrDJ,EAAAA,MAAM,EAAE,YAAY;AAClB,QAAIK,IAAI,GAAG,KAAKA,IAAhB;AACA,SAAKC,iBAAL,CAAuBD,IAAI,CAACV,IAA5B,EAAkCU,IAAI,CAACR,OAAvC;AACD,GAfoD;AAiBrDU,EAAAA,MAAM,EAAE,YAAY;AAClB,QAAIN,EAAE,GAAG,KAAKA,EAAd;AACAA,IAAAA,EAAE,CAACO,mBAAH,CAAuB,aAAvB,EAAsC,KAAKT,aAA3C;AACA,SAAKO,iBAAL,CAAuB,KAAvB,EAA8B,KAA9B;AACD,GArBoD;AAuBrDA,EAAAA,iBAAiB,EAAE,UAAUX,IAAV,EAAgBE,OAAhB,EAAyB;AAC1C,QAAIY,OAAO,GAAG,KAAKR,EAAL,CAAQQ,OAAtB;AACA,SAAKR,EAAL,CAAQS,QAAR,CAAiBC,QAAjB,CAA0B,UAAUC,IAAV,EAAgB;AACxC,UAAI,EAAEA,IAAI,YAAYxB,KAAK,CAACyB,IAAxB,CAAJ,EAAmC;AAAE;AAAS;;AAE9CD,MAAAA,IAAI,CAACE,UAAL,GAAkBnB,IAAlB;AACAiB,MAAAA,IAAI,CAACG,aAAL,GAAqBlB,OAArB,CAJwC,CAMxC;;AACA,UAAIY,OAAO,CAACO,SAAR,IAAqBJ,IAAI,CAACK,QAA9B,EAAwC;AACtC,YAAIC,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcR,IAAI,CAACK,QAAnB,IAA+BL,IAAI,CAACK,QAApC,GAA+C,CAACL,IAAI,CAACK,QAAN,CAA/D;;AACA,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCH,UAAAA,SAAS,CAACG,CAAD,CAAT,CAAaE,WAAb,GAA2B,IAA3B;AACD;AACF;AACF,KAbD;AAcD;AAvCoD,CAAX,CAA5C","sourcesContent":["var component = require('../core/component');\nvar THREE = require('../lib/three');\nvar bind = require('../utils/bind');\nvar registerComponent = component.registerComponent;\n\n/**\n * Shadow component.\n *\n * When applied to an entity, that entity's geometry and any descendants will cast or receive\n * shadows as specified by the `cast` and `receive` properties.\n */\nmodule.exports.Component = registerComponent('shadow', {\n  schema: {\n    cast: {default: true},\n    receive: {default: true}\n  },\n\n  init: function () {\n    this.onMeshChanged = bind(this.update, this);\n    this.el.addEventListener('object3dset', this.onMeshChanged);\n    this.system.setShadowMapEnabled(true);\n  },\n\n  update: function () {\n    var data = this.data;\n    this.updateDescendants(data.cast, data.receive);\n  },\n\n  remove: function () {\n    var el = this.el;\n    el.removeEventListener('object3dset', this.onMeshChanged);\n    this.updateDescendants(false, false);\n  },\n\n  updateDescendants: function (cast, receive) {\n    var sceneEl = this.el.sceneEl;\n    this.el.object3D.traverse(function (node) {\n      if (!(node instanceof THREE.Mesh)) { return; }\n\n      node.castShadow = cast;\n      node.receiveShadow = receive;\n\n      // If scene has already rendered, materials must be updated.\n      if (sceneEl.hasLoaded && node.material) {\n        var materials = Array.isArray(node.material) ? node.material : [node.material];\n        for (var i = 0; i < materials.length; i++) {\n          materials[i].needsUpdate = true;\n        }\n      }\n    });\n  }\n});\n"]},"metadata":{},"sourceType":"script"}