{"ast":null,"code":"var registerComponent = require('../core/component').registerComponent;\n\nvar THREE = require('../lib/three');\n/**\n * Camera component.\n * Pairs along with camera system to handle tracking the active camera.\n */\n\n\nmodule.exports.Component = registerComponent('camera', {\n  schema: {\n    active: {\n      default: true\n    },\n    far: {\n      default: 10000\n    },\n    fov: {\n      default: 80,\n      min: 0\n    },\n    near: {\n      default: 0.005,\n      min: 0\n    },\n    spectator: {\n      default: false\n    },\n    zoom: {\n      default: 1,\n      min: 0\n    }\n  },\n\n  /**\n   * Initialize three.js camera and add it to the entity.\n   * Add reference from scene to this entity as the camera.\n   */\n  init: function () {\n    var camera;\n    var el = this.el; // Create camera.\n\n    camera = this.camera = new THREE.PerspectiveCamera();\n    el.setObject3D('camera', camera);\n  },\n\n  /**\n   * Update three.js camera.\n   */\n  update: function (oldData) {\n    var data = this.data;\n    var camera = this.camera; // Update properties.\n\n    camera.aspect = data.aspect || window.innerWidth / window.innerHeight;\n    camera.far = data.far;\n    camera.fov = data.fov;\n    camera.near = data.near;\n    camera.zoom = data.zoom;\n    camera.updateProjectionMatrix();\n    this.updateActiveCamera(oldData);\n    this.updateSpectatorCamera(oldData);\n  },\n  updateActiveCamera: function (oldData) {\n    var data = this.data;\n    var el = this.el;\n    var system = this.system; // Active property did not change.\n\n    if (oldData && oldData.active === data.active || data.spectator) {\n      return;\n    } // If `active` property changes, or first update, handle active camera with system.\n\n\n    if (data.active && system.activeCameraEl !== el) {\n      // Camera enabled. Set camera to this camera.\n      system.setActiveCamera(el);\n    } else if (!data.active && system.activeCameraEl === el) {\n      // Camera disabled. Set camera to another camera.\n      system.disableActiveCamera();\n    }\n  },\n  updateSpectatorCamera: function (oldData) {\n    var data = this.data;\n    var el = this.el;\n    var system = this.system; // spectator property did not change.\n\n    if (oldData && oldData.spectator === data.spectator) {\n      return;\n    } // If `spectator` property changes, or first update, handle spectator camera with system.\n\n\n    if (data.spectator && system.spectatorCameraEl !== el) {\n      // Camera enabled. Set camera to this camera.\n      system.setSpectatorCamera(el);\n    } else if (!data.spectator && system.spectatorCameraEl === el) {\n      // Camera disabled. Set camera to another camera.\n      system.disableSpectatorCamera();\n    }\n  },\n\n  /**\n   * Remove camera on remove (callback).\n   */\n  remove: function () {\n    this.el.removeObject3D('camera');\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/camera.js"],"names":["registerComponent","require","THREE","module","exports","Component","schema","active","default","far","fov","min","near","spectator","zoom","init","camera","el","PerspectiveCamera","setObject3D","update","oldData","data","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","updateActiveCamera","updateSpectatorCamera","system","activeCameraEl","setActiveCamera","disableActiveCamera","spectatorCameraEl","setSpectatorCamera","disableSpectatorCamera","remove","removeObject3D"],"mappings":"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","sourcesContent":["var registerComponent = require('../core/component').registerComponent;\nvar THREE = require('../lib/three');\n\n/**\n * Camera component.\n * Pairs along with camera system to handle tracking the active camera.\n */\nmodule.exports.Component = registerComponent('camera', {\n  schema: {\n    active: {default: true},\n    far: {default: 10000},\n    fov: {default: 80, min: 0},\n    near: {default: 0.005, min: 0},\n    spectator: {default: false},\n    zoom: {default: 1, min: 0}\n  },\n\n  /**\n   * Initialize three.js camera and add it to the entity.\n   * Add reference from scene to this entity as the camera.\n   */\n  init: function () {\n    var camera;\n    var el = this.el;\n\n    // Create camera.\n    camera = this.camera = new THREE.PerspectiveCamera();\n    el.setObject3D('camera', camera);\n  },\n\n  /**\n   * Update three.js camera.\n   */\n  update: function (oldData) {\n    var data = this.data;\n    var camera = this.camera;\n\n    // Update properties.\n    camera.aspect = data.aspect || (window.innerWidth / window.innerHeight);\n    camera.far = data.far;\n    camera.fov = data.fov;\n    camera.near = data.near;\n    camera.zoom = data.zoom;\n    camera.updateProjectionMatrix();\n\n    this.updateActiveCamera(oldData);\n    this.updateSpectatorCamera(oldData);\n  },\n\n  updateActiveCamera: function (oldData) {\n    var data = this.data;\n    var el = this.el;\n    var system = this.system;\n    // Active property did not change.\n    if (oldData && oldData.active === data.active || data.spectator) { return; }\n\n    // If `active` property changes, or first update, handle active camera with system.\n    if (data.active && system.activeCameraEl !== el) {\n      // Camera enabled. Set camera to this camera.\n      system.setActiveCamera(el);\n    } else if (!data.active && system.activeCameraEl === el) {\n      // Camera disabled. Set camera to another camera.\n      system.disableActiveCamera();\n    }\n  },\n\n  updateSpectatorCamera: function (oldData) {\n    var data = this.data;\n    var el = this.el;\n    var system = this.system;\n    // spectator property did not change.\n    if (oldData && oldData.spectator === data.spectator) { return; }\n\n    // If `spectator` property changes, or first update, handle spectator camera with system.\n    if (data.spectator && system.spectatorCameraEl !== el) {\n      // Camera enabled. Set camera to this camera.\n      system.setSpectatorCamera(el);\n    } else if (!data.spectator && system.spectatorCameraEl === el) {\n      // Camera disabled. Set camera to another camera.\n      system.disableSpectatorCamera();\n    }\n  },\n\n  /**\n   * Remove camera on remove (callback).\n   */\n  remove: function () {\n    this.el.removeObject3D('camera');\n  }\n});\n"]},"metadata":{},"sourceType":"script"}