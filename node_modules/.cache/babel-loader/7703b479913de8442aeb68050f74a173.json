{"ast":null,"code":"var dtype = require('dtype');\n\nvar anArray = require('an-array');\n\nvar isBuffer = require('is-buffer');\n\nvar CW = [0, 2, 3];\nvar CCW = [2, 1, 3];\n\nmodule.exports = function createQuadElements(array, opt) {\n  //if user didn't specify an output array\n  if (!array || !(anArray(array) || isBuffer(array))) {\n    opt = array || {};\n    array = null;\n  }\n\n  if (typeof opt === 'number') //backwards-compatible\n    opt = {\n      count: opt\n    };else opt = opt || {};\n  var type = typeof opt.type === 'string' ? opt.type : 'uint16';\n  var count = typeof opt.count === 'number' ? opt.count : 1;\n  var start = opt.start || 0;\n  var dir = opt.clockwise !== false ? CW : CCW,\n      a = dir[0],\n      b = dir[1],\n      c = dir[2];\n  var numIndices = count * 6;\n  var indices = array || new (dtype(type))(numIndices);\n\n  for (var i = 0, j = 0; i < numIndices; i += 6, j += 4) {\n    var x = i + start;\n    indices[x + 0] = j + 0;\n    indices[x + 1] = j + 1;\n    indices[x + 2] = j + 2;\n    indices[x + 3] = j + a;\n    indices[x + 4] = j + b;\n    indices[x + 5] = j + c;\n  }\n\n  return indices;\n};","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/quad-indices/index.js"],"names":["dtype","require","anArray","isBuffer","CW","CCW","module","exports","createQuadElements","array","opt","count","type","start","dir","clockwise","a","b","c","numIndices","indices","i","j","x"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAIG,EAAE,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAT;AACA,IAAIC,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,GAAnC,EAAwC;AACrD;AACA,MAAI,CAACD,KAAD,IAAU,EAAEP,OAAO,CAACO,KAAD,CAAP,IAAkBN,QAAQ,CAACM,KAAD,CAA5B,CAAd,EAAoD;AAChDC,IAAAA,GAAG,GAAGD,KAAK,IAAI,EAAf;AACAA,IAAAA,KAAK,GAAG,IAAR;AACH;;AAED,MAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAG;AAAEC,MAAAA,KAAK,EAAED;AAAT,KAAN,CADJ,KAGIA,GAAG,GAAGA,GAAG,IAAI,EAAb;AAEJ,MAAIE,IAAI,GAAG,OAAOF,GAAG,CAACE,IAAX,KAAoB,QAApB,GAA+BF,GAAG,CAACE,IAAnC,GAA0C,QAArD;AACA,MAAID,KAAK,GAAG,OAAOD,GAAG,CAACC,KAAX,KAAqB,QAArB,GAAgCD,GAAG,CAACC,KAApC,GAA4C,CAAxD;AACA,MAAIE,KAAK,GAAIH,GAAG,CAACG,KAAJ,IAAa,CAA1B;AAEA,MAAIC,GAAG,GAAGJ,GAAG,CAACK,SAAJ,KAAkB,KAAlB,GAA0BX,EAA1B,GAA+BC,GAAzC;AAAA,MACIW,CAAC,GAAGF,GAAG,CAAC,CAAD,CADX;AAAA,MAEIG,CAAC,GAAGH,GAAG,CAAC,CAAD,CAFX;AAAA,MAGII,CAAC,GAAGJ,GAAG,CAAC,CAAD,CAHX;AAKA,MAAIK,UAAU,GAAGR,KAAK,GAAG,CAAzB;AAEA,MAAIS,OAAO,GAAGX,KAAK,IAAI,KAAKT,KAAK,CAACY,IAAD,CAAV,EAAkBO,UAAlB,CAAvB;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAApB,EAAuBD,CAAC,GAAGF,UAA3B,EAAuCE,CAAC,IAAI,CAAL,EAAQC,CAAC,IAAI,CAApD,EAAuD;AACnD,QAAIC,CAAC,GAAGF,CAAC,GAAGR,KAAZ;AACAO,IAAAA,OAAO,CAACG,CAAC,GAAG,CAAL,CAAP,GAAiBD,CAAC,GAAG,CAArB;AACAF,IAAAA,OAAO,CAACG,CAAC,GAAG,CAAL,CAAP,GAAiBD,CAAC,GAAG,CAArB;AACAF,IAAAA,OAAO,CAACG,CAAC,GAAG,CAAL,CAAP,GAAiBD,CAAC,GAAG,CAArB;AACAF,IAAAA,OAAO,CAACG,CAAC,GAAG,CAAL,CAAP,GAAiBD,CAAC,GAAGN,CAArB;AACAI,IAAAA,OAAO,CAACG,CAAC,GAAG,CAAL,CAAP,GAAiBD,CAAC,GAAGL,CAArB;AACAG,IAAAA,OAAO,CAACG,CAAC,GAAG,CAAL,CAAP,GAAiBD,CAAC,GAAGJ,CAArB;AACH;;AACD,SAAOE,OAAP;AACH,CAlCD","sourcesContent":["var dtype = require('dtype')\nvar anArray = require('an-array')\nvar isBuffer = require('is-buffer')\n\nvar CW = [0, 2, 3]\nvar CCW = [2, 1, 3]\n\nmodule.exports = function createQuadElements(array, opt) {\n    //if user didn't specify an output array\n    if (!array || !(anArray(array) || isBuffer(array))) {\n        opt = array || {}\n        array = null\n    }\n\n    if (typeof opt === 'number') //backwards-compatible\n        opt = { count: opt }\n    else\n        opt = opt || {}\n\n    var type = typeof opt.type === 'string' ? opt.type : 'uint16'\n    var count = typeof opt.count === 'number' ? opt.count : 1\n    var start = (opt.start || 0) \n\n    var dir = opt.clockwise !== false ? CW : CCW,\n        a = dir[0], \n        b = dir[1],\n        c = dir[2]\n\n    var numIndices = count * 6\n\n    var indices = array || new (dtype(type))(numIndices)\n    for (var i = 0, j = 0; i < numIndices; i += 6, j += 4) {\n        var x = i + start\n        indices[x + 0] = j + 0\n        indices[x + 1] = j + 1\n        indices[x + 2] = j + 2\n        indices[x + 3] = j + a\n        indices[x + 4] = j + b\n        indices[x + 5] = j + c\n    }\n    return indices\n}"]},"metadata":{},"sourceType":"script"}