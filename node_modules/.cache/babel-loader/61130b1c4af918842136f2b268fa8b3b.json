{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ThreeDOMMessageType } from '../protocol.js';\n/**\n * A function that will be stringified and appended the a runtime-generated\n * execution context script to initialize the scene graph execution context.\n *\n * The sole reason for using this pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n */\n\nfunction initialize(ModelKernel, preservedContext) {\n  let currentKernel = null;\n  preservedContext.addEventListener('message', event => {\n    const data = event.data;\n\n    if (data && data.type && data.type === ThreeDOMMessageType.HANDSHAKE) {\n      const globalPort = event.ports[0];\n      globalPort.addEventListener('message', event => {\n        const data = event.data;\n\n        if (data && data.type) {\n          switch (data.type) {\n            // Instantiate a new ModelKernel, and notify the execution context\n            // of the new Model with a 'model-change' event:\n            case ThreeDOMMessageType.MODEL_CHANGE:\n              {\n                const previousModel = currentKernel != null ? currentKernel.model : undefined;\n                const serialized = data.model;\n                const port = event.ports[0];\n\n                if (currentKernel != null) {\n                  currentKernel.deactivate();\n                } else if (serialized == null) {\n                  // Do not proceed if transitioning from null to null\n                  break;\n                }\n\n                if (serialized != null) {\n                  currentKernel = new ModelKernel(port, serialized);\n                  this.model = currentKernel.model;\n                } else {\n                  currentKernel = null;\n                  this.model = undefined;\n                }\n\n                const modelChangeEvent = new Event('model-change');\n                modelChangeEvent.previousModel = previousModel;\n                modelChangeEvent.model = this.model;\n                this.dispatchEvent(modelChangeEvent);\n                break;\n              }\n            // Import an external script into the execution context:\n\n            case ThreeDOMMessageType.IMPORT_SCRIPT:\n              {\n                const url = data.url;\n\n                if (url) {\n                  preservedContext.importScripts(url);\n                }\n\n                break;\n              }\n          }\n        }\n      });\n      globalPort.start(); // Notify the host execution context that the scene graph execution\n      // is ready:\n\n      globalPort.postMessage({\n        type: ThreeDOMMessageType.CONTEXT_INITIALIZED\n      });\n    }\n  });\n}\n/**\n * A factory that produces a stringified initializer function.\n */\n\n\nexport const generateInitializer = () => initialize.toString();","map":{"version":3,"sources":["../../src/context/generate-initializer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAiBA,SAAyB,mBAAzB,QAAmD,gBAAnD;AAiBA;;;;;;;;;AAQA,SAAS,UAAT,CAEI,WAFJ,EAGI,gBAHJ,EAGsC;AACpC,MAAI,aAAa,GAAqB,IAAtC;AAEA,EAAA,gBAAgB,CAAC,gBAAjB,CAAkC,SAAlC,EAA8C,KAAD,IAAwB;AAAA,UAC5D,IAD4D,GACpD,KADoD,CAC5D,IAD4D;;AAGnE,QAAI,IAAI,IAAI,IAAI,CAAC,IAAb,IAAqB,IAAI,CAAC,IAAL,KAAc,mBAAmB,CAAC,SAA3D,EAAsE;AACpE,YAAM,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAnB;AAEA,MAAA,UAAU,CAAC,gBAAX,CAA4B,SAA5B,EAAwC,KAAD,IAAwB;AAAA,cACtD,IADsD,GAC9C,KAD8C,CACtD,IADsD;;AAE7D,YAAI,IAAI,IAAI,IAAI,CAAC,IAAjB,EAAuB;AACrB,kBAAQ,IAAI,CAAC,IAAb;AACE;AACA;AACA,iBAAK,mBAAmB,CAAC,YAAzB;AAAuC;AACrC,sBAAM,aAAa,GACf,aAAa,IAAI,IAAjB,GAAwB,aAAa,CAAC,KAAtC,GAA8C,SADlD;AAEA,sBAAM,UAAU,GAAyB,IAAI,CAAC,KAA9C;AACA,sBAAM,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAb;;AAEA,oBAAI,aAAa,IAAI,IAArB,EAA2B;AACzB,kBAAA,aAAa,CAAC,UAAd;AACD,iBAFD,MAEO,IAAI,UAAU,IAAI,IAAlB,EAAwB;AAC7B;AACA;AACD;;AAED,oBAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,kBAAA,aAAa,GAAG,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,UAAtB,CAAhB;AACA,uBAAK,KAAL,GAAa,aAAa,CAAC,KAA3B;AACD,iBAHD,MAGO;AACL,kBAAA,aAAa,GAAG,IAAhB;AACA,uBAAK,KAAL,GAAa,SAAb;AACD;;AAED,sBAAM,gBAAgB,GAClB,IAAI,KAAJ,CAAU,cAAV,CADJ;AAGA,gBAAA,gBAAgB,CAAC,aAAjB,GAAiC,aAAjC;AACA,gBAAA,gBAAgB,CAAC,KAAjB,GAAyB,KAAK,KAA9B;AAEA,qBAAK,aAAL,CAAmB,gBAAnB;AAEA;AACD;AACD;;AACA,iBAAK,mBAAmB,CAAC,aAAzB;AAAwC;AACtC,sBAAM,GAAG,GAAG,IAAI,CAAC,GAAjB;;AAEA,oBAAI,GAAJ,EAAS;AACP,kBAAA,gBAAgB,CAAC,aAAjB,CAA+B,GAA/B;AACD;;AAED;AACD;AA3CH;AA6CD;AACF,OAjDD;AAmDA,MAAA,UAAU,CAAC,KAAX,GAtDoE,CAwDpE;AACA;;AACA,MAAA,UAAU,CAAC,WAAX,CAAuB;AAAC,QAAA,IAAI,EAAE,mBAAmB,CAAC;AAA3B,OAAvB;AACD;AACF,GA/DD;AAgED;AAED;;;;;AAGA,OAAO,MAAM,mBAAmB,GAAG,MAAM,UAAU,CAAC,QAAX,EAAlC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ModelChangeEvent, ThreeDOMGlobalScope} from '../api.js';\nimport {ModelKernel, ModelKernelConstructor} from '../api/model-kernel.js';\nimport {SerializedModel, ThreeDOMMessageType} from '../protocol.js';\n\n/**\n * The \"preserved\" context includes the original native implementations\n * of key APIs required to support cross-context communication and allowed\n * forms of otherwise unsafe script execution.\n *\n * These APIs are presumed to be patched by the surrounding execution context\n * script, and so unpatched versions are required by the initializer.\n */\nexport interface PreservedContext {\n  postMessage: typeof self.postMessage;\n  addEventListener: typeof self.addEventListener;\n  importScripts: (...scripts: Array<string>) => unknown;\n}\n\n\n/**\n * A function that will be stringified and appended the a runtime-generated\n * execution context script to initialize the scene graph execution context.\n *\n * The sole reason for using this pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n */\nfunction initialize(\n    this: ThreeDOMGlobalScope,\n    ModelKernel: ModelKernelConstructor,\n    preservedContext: PreservedContext) {\n  let currentKernel: ModelKernel|null = null;\n\n  preservedContext.addEventListener('message', (event: MessageEvent) => {\n    const {data} = event;\n\n    if (data && data.type && data.type === ThreeDOMMessageType.HANDSHAKE) {\n      const globalPort = event.ports[0];\n\n      globalPort.addEventListener('message', (event: MessageEvent) => {\n        const {data} = event;\n        if (data && data.type) {\n          switch (data.type) {\n            // Instantiate a new ModelKernel, and notify the execution context\n            // of the new Model with a 'model-change' event:\n            case ThreeDOMMessageType.MODEL_CHANGE: {\n              const previousModel =\n                  currentKernel != null ? currentKernel.model : undefined;\n              const serialized: SerializedModel|null = data.model;\n              const port = event.ports[0];\n\n              if (currentKernel != null) {\n                currentKernel.deactivate();\n              } else if (serialized == null) {\n                // Do not proceed if transitioning from null to null\n                break;\n              }\n\n              if (serialized != null) {\n                currentKernel = new ModelKernel(port, serialized);\n                this.model = currentKernel.model;\n              } else {\n                currentKernel = null;\n                this.model = undefined;\n              }\n\n              const modelChangeEvent: Partial<ModelChangeEvent> =\n                  new Event('model-change');\n\n              modelChangeEvent.previousModel = previousModel;\n              modelChangeEvent.model = this.model;\n\n              this.dispatchEvent(modelChangeEvent as ModelChangeEvent);\n\n              break;\n            }\n            // Import an external script into the execution context:\n            case ThreeDOMMessageType.IMPORT_SCRIPT: {\n              const url = data.url as string;\n\n              if (url) {\n                preservedContext.importScripts(url);\n              }\n\n              break;\n            }\n          }\n        }\n      });\n\n      globalPort.start();\n\n      // Notify the host execution context that the scene graph execution\n      // is ready:\n      globalPort.postMessage({type: ThreeDOMMessageType.CONTEXT_INITIALIZED});\n    }\n  });\n}\n\n/**\n * A factory that produces a stringified initializer function.\n */\nexport const generateInitializer = () => initialize.toString();\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}