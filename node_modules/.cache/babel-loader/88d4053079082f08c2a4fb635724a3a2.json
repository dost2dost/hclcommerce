{"ast":null,"code":"/* global THREE */\nvar registerComponent = require('../core/component').registerComponent;\n\nmodule.exports.Component = registerComponent('line', {\n  schema: {\n    start: {\n      type: 'vec3',\n      default: {\n        x: 0,\n        y: 0,\n        z: 0\n      }\n    },\n    end: {\n      type: 'vec3',\n      default: {\n        x: 0,\n        y: 0,\n        z: 0\n      }\n    },\n    color: {\n      type: 'color',\n      default: '#74BEC1'\n    },\n    opacity: {\n      type: 'number',\n      default: 1\n    },\n    visible: {\n      default: true\n    }\n  },\n  multiple: true,\n  init: function () {\n    var data = this.data;\n    var geometry;\n    var material;\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n    material = this.material = new THREE.LineBasicMaterial({\n      color: data.color,\n      opacity: data.opacity,\n      transparent: data.opacity < 1,\n      visible: data.visible\n    });\n    geometry = this.geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(2 * 3), 3));\n    this.rendererSystem.applyColorCorrection(material.color);\n    this.line = new THREE.Line(geometry, material);\n    this.el.setObject3D(this.attrName, this.line);\n  },\n  update: function (oldData) {\n    var data = this.data;\n    var geometry = this.geometry;\n    var geoNeedsUpdate = false;\n    var material = this.material;\n    var positionArray = geometry.attributes.position.array; // Update geometry.\n\n    if (!isEqualVec3(data.start, oldData.start)) {\n      positionArray[0] = data.start.x;\n      positionArray[1] = data.start.y;\n      positionArray[2] = data.start.z;\n      geoNeedsUpdate = true;\n    }\n\n    if (!isEqualVec3(data.end, oldData.end)) {\n      positionArray[3] = data.end.x;\n      positionArray[4] = data.end.y;\n      positionArray[5] = data.end.z;\n      geoNeedsUpdate = true;\n    }\n\n    if (geoNeedsUpdate) {\n      geometry.attributes.position.needsUpdate = true;\n      geometry.computeBoundingSphere();\n    }\n\n    material.color.setStyle(data.color);\n    this.rendererSystem.applyColorCorrection(material.color);\n    material.opacity = data.opacity;\n    material.transparent = data.opacity < 1;\n    material.visible = data.visible;\n  },\n  remove: function () {\n    this.el.removeObject3D('line', this.line);\n  }\n});\n\nfunction isEqualVec3(a, b) {\n  if (!a || !b) {\n    return false;\n  }\n\n  return a.x === b.x && a.y === b.y && a.z === b.z;\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/line.js"],"names":["registerComponent","require","module","exports","Component","schema","start","type","default","x","y","z","end","color","opacity","visible","multiple","init","data","geometry","material","rendererSystem","el","sceneEl","systems","renderer","THREE","LineBasicMaterial","transparent","BufferGeometry","addAttribute","BufferAttribute","Float32Array","applyColorCorrection","line","Line","setObject3D","attrName","update","oldData","geoNeedsUpdate","positionArray","attributes","position","array","isEqualVec3","needsUpdate","computeBoundingSphere","setStyle","remove","removeObject3D","a","b"],"mappings":"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","sourcesContent":["/* global THREE */\nvar registerComponent = require('../core/component').registerComponent;\n\nmodule.exports.Component = registerComponent('line', {\n  schema: {\n    start: {type: 'vec3', default: {x: 0, y: 0, z: 0}},\n    end: {type: 'vec3', default: {x: 0, y: 0, z: 0}},\n    color: {type: 'color', default: '#74BEC1'},\n    opacity: {type: 'number', default: 1},\n    visible: {default: true}\n  },\n\n  multiple: true,\n\n  init: function () {\n    var data = this.data;\n    var geometry;\n    var material;\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n    material = this.material = new THREE.LineBasicMaterial({\n      color: data.color,\n      opacity: data.opacity,\n      transparent: data.opacity < 1,\n      visible: data.visible\n    });\n    geometry = this.geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(2 * 3), 3));\n\n    this.rendererSystem.applyColorCorrection(material.color);\n    this.line = new THREE.Line(geometry, material);\n    this.el.setObject3D(this.attrName, this.line);\n  },\n\n  update: function (oldData) {\n    var data = this.data;\n    var geometry = this.geometry;\n    var geoNeedsUpdate = false;\n    var material = this.material;\n    var positionArray = geometry.attributes.position.array;\n\n    // Update geometry.\n    if (!isEqualVec3(data.start, oldData.start)) {\n      positionArray[0] = data.start.x;\n      positionArray[1] = data.start.y;\n      positionArray[2] = data.start.z;\n      geoNeedsUpdate = true;\n    }\n\n    if (!isEqualVec3(data.end, oldData.end)) {\n      positionArray[3] = data.end.x;\n      positionArray[4] = data.end.y;\n      positionArray[5] = data.end.z;\n      geoNeedsUpdate = true;\n    }\n\n    if (geoNeedsUpdate) {\n      geometry.attributes.position.needsUpdate = true;\n      geometry.computeBoundingSphere();\n    }\n\n    material.color.setStyle(data.color);\n    this.rendererSystem.applyColorCorrection(material.color);\n    material.opacity = data.opacity;\n    material.transparent = data.opacity < 1;\n    material.visible = data.visible;\n  },\n\n  remove: function () {\n    this.el.removeObject3D('line', this.line);\n  }\n});\n\nfunction isEqualVec3 (a, b) {\n  if (!a || !b) { return false; }\n  return (a.x === b.x && a.y === b.y && a.z === b.z);\n}\n"]},"metadata":{},"sourceType":"script"}