{"ast":null,"code":"var bind = require('../utils/bind');\n\nvar registerComponent = require('../core/component').registerComponent;\n\nvar THREE = require('../lib/three');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\n\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\n\nvar isOculusBrowser = require('../utils/').device.isOculusBrowser();\n\nvar isWebXRAvailable = require('../utils/').device.isWebXRAvailable;\n\nvar GAMEPAD_ID_WEBXR = 'oculus-touch';\nvar GAMEPAD_ID_WEBVR = 'Oculus Touch'; // Prefix for Gen1 and Gen2 Oculus Touch Controllers.\n\nvar GAMEPAD_ID_PREFIX = isWebXRAvailable ? GAMEPAD_ID_WEBXR : GAMEPAD_ID_WEBVR; // First generation model URL.\n\nvar TOUCH_CONTROLLER_MODEL_BASE_URL = 'https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-'; // For now the generation 2 model is the same as the original until a new one is prepared for upload.\n\nvar TOUCH_GEN2_CONTROLLER_MODEL_BASE_URL = TOUCH_CONTROLLER_MODEL_BASE_URL;\nvar OCULUS_TOUCH_WEBVR = {\n  left: {\n    modelUrl: TOUCH_CONTROLLER_MODEL_BASE_URL + 'left.gltf',\n    rayOrigin: {\n      origin: {\n        x: 0.008,\n        y: -0.01,\n        z: 0\n      },\n      direction: {\n        x: 0,\n        y: -0.8,\n        z: -1\n      }\n    },\n    modelPivotOffset: new THREE.Vector3(-0.005, 0.003, -0.055),\n    modelPivotRotation: new THREE.Euler(0, 0, 0)\n  },\n  right: {\n    modelUrl: TOUCH_CONTROLLER_MODEL_BASE_URL + 'right.gltf',\n    rayOrigin: {\n      origin: {\n        x: -0.008,\n        y: -0.01,\n        z: 0\n      },\n      direction: {\n        x: 0,\n        y: -0.8,\n        z: -1\n      }\n    },\n    modelPivotOffset: new THREE.Vector3(0.005, 0.003, -0.055),\n    modelPivotRotation: new THREE.Euler(0, 0, 0)\n  }\n};\nvar OCULUS_TOUCH_WEBXR = {\n  left: {\n    modelUrl: TOUCH_CONTROLLER_MODEL_BASE_URL + 'left.gltf',\n    rayOrigin: {\n      origin: {\n        x: 0.002,\n        y: -0.005,\n        z: -0.03\n      },\n      direction: {\n        x: 0,\n        y: -0.8,\n        z: -1\n      }\n    },\n    modelPivotOffset: new THREE.Vector3(-0.005, 0.036, -0.037),\n    modelPivotRotation: new THREE.Euler(Math.PI / 4.5, 0, 0)\n  },\n  right: {\n    modelUrl: TOUCH_CONTROLLER_MODEL_BASE_URL + 'right.gltf',\n    rayOrigin: {\n      origin: {\n        x: -0.002,\n        y: -0.005,\n        z: -0.03\n      },\n      direction: {\n        x: 0,\n        y: -0.8,\n        z: -1\n      }\n    },\n    modelPivotOffset: new THREE.Vector3(0.005, 0.036, -0.037),\n    modelPivotRotation: new THREE.Euler(Math.PI / 4.5, 0, 0)\n  }\n};\nvar OCULUS_TOUCH_CONFIG = isWebXRAvailable ? OCULUS_TOUCH_WEBXR : OCULUS_TOUCH_WEBVR;\nvar CONTROLLER_DEFAULT = 'oculus-touch';\nvar CONTROLLER_PROPERTIES = {\n  'oculus-touch': OCULUS_TOUCH_CONFIG,\n  'oculus-touch-v2': {\n    left: {\n      modelUrl: TOUCH_GEN2_CONTROLLER_MODEL_BASE_URL + 'gen2-left.gltf',\n      rayOrigin: {\n        origin: {\n          x: -0.01,\n          y: 0,\n          z: -0.02\n        },\n        direction: {\n          x: 0,\n          y: -0.5,\n          z: -1\n        }\n      },\n      modelPivotOffset: new THREE.Vector3(0, 0, 0),\n      modelPivotRotation: new THREE.Euler(0, 0, 0)\n    },\n    right: {\n      modelUrl: TOUCH_GEN2_CONTROLLER_MODEL_BASE_URL + 'gen2-right.gltf',\n      rayOrigin: {\n        origin: {\n          x: 0.01,\n          y: 0,\n          z: -0.02\n        },\n        direction: {\n          x: 0,\n          y: -0.5,\n          z: -1\n        }\n      },\n      modelPivotOffset: new THREE.Vector3(0, 0, 0),\n      modelPivotRotation: new THREE.Euler(0, 0, 0)\n    }\n  }\n};\n/**\n * Button indices:\n * 0 - thumbstick (which has separate axismove / thumbstickmoved events)\n * 1 - trigger (with analog value, which goes up to 1)\n * 2 - grip (with analog value, which goes up to 1)\n * 3 - X (left) or A (right)\n * 4 - Y (left) or B (right)\n * 5 - surface (touch only)\n */\n\nvar INPUT_MAPPING_WEBVR = {\n  left: {\n    axes: {\n      thumbstick: [0, 1]\n    },\n    buttons: ['thumbstick', 'trigger', 'grip', 'xbutton', 'ybutton', 'surface']\n  },\n  right: {\n    axes: {\n      thumbstick: [0, 1]\n    },\n    buttons: ['thumbstick', 'trigger', 'grip', 'abutton', 'bbutton', 'surface']\n  }\n};\n/**\n * Button indices:\n * 0 - trigger\n * 1 - grip\n * 2 - none\n * 3 - thumbstick\n * 4 - X or A button\n * 5 - Y or B button\n * 6 - surface\n *\n * Axis:\n * 0 - none\n * 1 - none\n * 2 - thumbstick\n * 3 - thumbstick\n * Reference: https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/oculus/oculus-touch.json\n */\n\nvar INPUT_MAPPING_WEBXR = {\n  left: {\n    axes: {\n      thumbstick: [2, 3]\n    },\n    buttons: ['trigger', 'grip', 'none', 'thumbstick', 'xbutton', 'ybutton', 'surface']\n  },\n  right: {\n    axes: {\n      thumbstick: [2, 3]\n    },\n    buttons: ['trigger', 'grip', 'none', 'thumbstick', 'abutton', 'bbutton', 'surface']\n  }\n};\nvar INPUT_MAPPING = isWebXRAvailable ? INPUT_MAPPING_WEBXR : INPUT_MAPPING_WEBVR;\n/**\n * Oculus Touch controls.\n * Interface with Oculus Touch controllers and map Gamepad events to\n * controller buttons: thumbstick, trigger, grip, xbutton, ybutton, surface\n * Load a controller model and highlight the pressed buttons.\n */\n\nmodule.exports.Component = registerComponent('oculus-touch-controls', {\n  schema: {\n    hand: {\n      default: 'left'\n    },\n    buttonColor: {\n      type: 'color',\n      default: '#999'\n    },\n    // Off-white.\n    buttonTouchColor: {\n      type: 'color',\n      default: '#8AB'\n    },\n    buttonHighlightColor: {\n      type: 'color',\n      default: '#2DF'\n    },\n    // Light blue.\n    model: {\n      default: true\n    },\n    controllerType: {\n      default: 'auto',\n      oneOf: ['auto', 'oculus-touch', 'oculus-touch-v2']\n    },\n    orientationOffset: {\n      type: 'vec3',\n      default: {\n        x: 43,\n        y: 0,\n        z: 0\n      }\n    }\n  },\n  mapping: INPUT_MAPPING,\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n  init: function () {\n    var self = this;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n\n    this.onButtonDown = function (evt) {\n      onButtonEvent(evt.detail.id, 'down', self, self.data.hand);\n    };\n\n    this.onButtonUp = function (evt) {\n      onButtonEvent(evt.detail.id, 'up', self, self.data.hand);\n    };\n\n    this.onButtonTouchStart = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchstart', self, self.data.hand);\n    };\n\n    this.onButtonTouchEnd = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchend', self, self.data.hand);\n    };\n\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.previousButtonValues = {};\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n    this.bindMethods();\n  },\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('axismove', this.onAxisMoved);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    this.controllerEventsActive = true;\n  },\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    el.removeEventListener('model-loaded', this.onModelLoaded);\n    this.controllerEventsActive = false;\n  },\n  checkIfControllerPresent: function () {\n    checkControllerPresentAndSetup(this, GAMEPAD_ID_PREFIX, {\n      hand: this.data.hand\n    });\n  },\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n  loadModel: function () {\n    var data = this.data;\n\n    if (!data.model) {\n      return;\n    } // Set the controller display model based on the data passed in.\n\n\n    this.displayModel = CONTROLLER_PROPERTIES[data.controllerType] || CONTROLLER_PROPERTIES[CONTROLLER_DEFAULT]; // If the developer is asking for auto-detection, see if the displayName can be retrieved to identify the specific unit.\n    // This only works for WebVR currently.\n\n    if (data.controllerType === 'auto') {\n      var trackedControlsSystem = this.el.sceneEl.systems['tracked-controls-webvr'];\n\n      if (trackedControlsSystem && trackedControlsSystem.vrDisplay) {\n        var displayName = trackedControlsSystem.vrDisplay.displayName; // The Oculus Quest uses the updated generation 2 inside-out tracked controllers so update the displayModel.\n\n        if (/^Oculus Quest$/.test(displayName)) {\n          this.displayModel = CONTROLLER_PROPERTIES['oculus-touch-v2'];\n        }\n      }\n\n      if (isOculusBrowser) {\n        this.displayModel = CONTROLLER_PROPERTIES['oculus-touch-v2'];\n      }\n    }\n\n    var modelUrl = this.displayModel[data.hand].modelUrl;\n    this.el.setAttribute('gltf-model', modelUrl);\n  },\n  injectTrackedControls: function () {\n    var data = this.data;\n    var webXRId = GAMEPAD_ID_WEBXR;\n    var webVRId = data.hand === 'right' ? 'Oculus Touch (Right)' : 'Oculus Touch (Left)';\n    var id = isWebXRAvailable ? webXRId : webVRId;\n    this.el.setAttribute('tracked-controls', {\n      id: id,\n      hand: data.hand,\n      orientationOffset: data.orientationOffset\n    });\n    this.loadModel();\n  },\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  onControllersUpdate: function () {\n    // Note that due to gamepadconnected event propagation issues, we don't rely on events.\n    this.checkIfControllerPresent();\n  },\n  onButtonChanged: function (evt) {\n    var button = this.mapping[this.data.hand].buttons[evt.detail.id];\n    var buttonMeshes = this.buttonMeshes;\n    var analogValue;\n\n    if (!button) {\n      return;\n    }\n\n    if (button === 'trigger' || button === 'grip') {\n      analogValue = evt.detail.state.value;\n    } // Update trigger and/or grip meshes, if any.\n\n\n    if (buttonMeshes) {\n      if (button === 'trigger' && buttonMeshes.trigger) {\n        buttonMeshes.trigger.rotation.x = this.originalXRotationTrigger - analogValue * (Math.PI / 26);\n      }\n\n      if (button === 'grip' && buttonMeshes.grip) {\n        buttonMeshes.grip.position.x = this.originalXPositionGrip + (this.data.hand === 'left' ? -1 : 1) * analogValue * 0.004;\n      }\n    } // Pass along changed event with button state, using the buttom mapping for convenience.\n\n\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n  onModelLoaded: function (evt) {\n    var controllerObject3D = evt.detail.model;\n    var buttonMeshes;\n\n    if (!this.data.model) {\n      return;\n    }\n\n    buttonMeshes = this.buttonMeshes = {};\n    buttonMeshes.grip = controllerObject3D.getObjectByName('buttonHand');\n    this.originalXPositionGrip = buttonMeshes.grip.position.x;\n    buttonMeshes.thumbstick = controllerObject3D.getObjectByName('stick');\n    buttonMeshes.trigger = controllerObject3D.getObjectByName('buttonTrigger');\n    this.originalXRotationTrigger = buttonMeshes.trigger.rotation.x;\n    buttonMeshes.xbutton = controllerObject3D.getObjectByName('buttonX');\n    buttonMeshes.abutton = controllerObject3D.getObjectByName('buttonA');\n    buttonMeshes.ybutton = controllerObject3D.getObjectByName('buttonY');\n    buttonMeshes.bbutton = controllerObject3D.getObjectByName('buttonB'); // Offset pivot point\n\n    controllerObject3D.position.copy(this.displayModel[this.data.hand].modelPivotOffset);\n    controllerObject3D.rotation.copy(this.displayModel[this.data.hand].modelPivotRotation);\n    this.el.emit('controllermodelready', {\n      name: 'oculus-touch-controls',\n      model: this.data.model,\n      rayOrigin: this.displayModel[this.data.hand].rayOrigin\n    });\n  },\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping[this.data.hand].axes, evt);\n  },\n  updateModel: function (buttonName, evtName) {\n    if (!this.data.model) {\n      return;\n    }\n\n    this.updateButtonModel(buttonName, evtName);\n  },\n  updateButtonModel: function (buttonName, state) {\n    var button;\n    var color = state === 'up' || state === 'touchend' ? this.data.buttonColor : state === 'touchstart' ? this.data.buttonTouchColor : this.data.buttonHighlightColor;\n    var buttonMeshes = this.buttonMeshes;\n\n    if (!this.data.model) {\n      return;\n    }\n\n    if (buttonMeshes && buttonMeshes[buttonName]) {\n      button = buttonMeshes[buttonName];\n      button.material.color.set(color);\n      this.rendererSystem.applyColorCorrection(button.material.color);\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/oculus-touch-controls.js"],"names":["bind","require","registerComponent","THREE","trackedControlsUtils","checkControllerPresentAndSetup","emitIfAxesChanged","onButtonEvent","isOculusBrowser","device","isWebXRAvailable","GAMEPAD_ID_WEBXR","GAMEPAD_ID_WEBVR","GAMEPAD_ID_PREFIX","TOUCH_CONTROLLER_MODEL_BASE_URL","TOUCH_GEN2_CONTROLLER_MODEL_BASE_URL","OCULUS_TOUCH_WEBVR","left","modelUrl","rayOrigin","origin","x","y","z","direction","modelPivotOffset","Vector3","modelPivotRotation","Euler","right","OCULUS_TOUCH_WEBXR","Math","PI","OCULUS_TOUCH_CONFIG","CONTROLLER_DEFAULT","CONTROLLER_PROPERTIES","INPUT_MAPPING_WEBVR","axes","thumbstick","buttons","INPUT_MAPPING_WEBXR","INPUT_MAPPING","module","exports","Component","schema","hand","default","buttonColor","type","buttonTouchColor","buttonHighlightColor","model","controllerType","oneOf","orientationOffset","mapping","bindMethods","onModelLoaded","onControllersUpdate","checkIfControllerPresent","onAxisMoved","init","self","onButtonChanged","onButtonDown","evt","detail","id","data","onButtonUp","onButtonTouchStart","onButtonTouchEnd","controllerPresent","lastControllerCheck","previousButtonValues","rendererSystem","el","sceneEl","systems","renderer","addEventListeners","addEventListener","controllerEventsActive","removeEventListeners","removeEventListener","play","addControllersUpdateListener","pause","removeControllersUpdateListener","loadModel","displayModel","trackedControlsSystem","vrDisplay","displayName","test","setAttribute","injectTrackedControls","webXRId","webVRId","button","buttonMeshes","analogValue","state","value","trigger","rotation","originalXRotationTrigger","grip","position","originalXPositionGrip","emit","controllerObject3D","getObjectByName","xbutton","abutton","ybutton","bbutton","copy","name","updateModel","buttonName","evtName","updateButtonModel","color","material","set","applyColorCorrection"],"mappings":"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","sourcesContent":["var bind = require('../utils/bind');\nvar registerComponent = require('../core/component').registerComponent;\nvar THREE = require('../lib/three');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\n\nvar isOculusBrowser = require('../utils/').device.isOculusBrowser();\nvar isWebXRAvailable = require('../utils/').device.isWebXRAvailable;\n\nvar GAMEPAD_ID_WEBXR = 'oculus-touch';\nvar GAMEPAD_ID_WEBVR = 'Oculus Touch';\n\n// Prefix for Gen1 and Gen2 Oculus Touch Controllers.\nvar GAMEPAD_ID_PREFIX = isWebXRAvailable ? GAMEPAD_ID_WEBXR : GAMEPAD_ID_WEBVR;\n\n// First generation model URL.\nvar TOUCH_CONTROLLER_MODEL_BASE_URL = 'https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-';\n// For now the generation 2 model is the same as the original until a new one is prepared for upload.\nvar TOUCH_GEN2_CONTROLLER_MODEL_BASE_URL = TOUCH_CONTROLLER_MODEL_BASE_URL;\n\nvar OCULUS_TOUCH_WEBVR = {\n  left: {\n    modelUrl: TOUCH_CONTROLLER_MODEL_BASE_URL + 'left.gltf',\n    rayOrigin: {origin: {x: 0.008, y: -0.01, z: 0}, direction: {x: 0, y: -0.8, z: -1}},\n    modelPivotOffset: new THREE.Vector3(-0.005, 0.003, -0.055),\n    modelPivotRotation: new THREE.Euler(0, 0, 0)\n  },\n  right: {\n    modelUrl: TOUCH_CONTROLLER_MODEL_BASE_URL + 'right.gltf',\n    rayOrigin: {origin: {x: -0.008, y: -0.01, z: 0}, direction: {x: 0, y: -0.8, z: -1}},\n    modelPivotOffset: new THREE.Vector3(0.005, 0.003, -0.055),\n    modelPivotRotation: new THREE.Euler(0, 0, 0)\n  }\n};\n\nvar OCULUS_TOUCH_WEBXR = {\n  left: {\n    modelUrl: TOUCH_CONTROLLER_MODEL_BASE_URL + 'left.gltf',\n    rayOrigin: {origin: {x: 0.002, y: -0.005, z: -0.03}, direction: {x: 0, y: -0.8, z: -1}},\n    modelPivotOffset: new THREE.Vector3(-0.005, 0.036, -0.037),\n    modelPivotRotation: new THREE.Euler(Math.PI / 4.5, 0, 0)\n  },\n  right: {\n    modelUrl: TOUCH_CONTROLLER_MODEL_BASE_URL + 'right.gltf',\n    rayOrigin: {origin: {x: -0.002, y: -0.005, z: -0.03}, direction: {x: 0, y: -0.8, z: -1}},\n    modelPivotOffset: new THREE.Vector3(0.005, 0.036, -0.037),\n    modelPivotRotation: new THREE.Euler(Math.PI / 4.5, 0, 0)\n  }\n};\n\nvar OCULUS_TOUCH_CONFIG = isWebXRAvailable ? OCULUS_TOUCH_WEBXR : OCULUS_TOUCH_WEBVR;\n\nvar CONTROLLER_DEFAULT = 'oculus-touch';\nvar CONTROLLER_PROPERTIES = {\n  'oculus-touch': OCULUS_TOUCH_CONFIG,\n  'oculus-touch-v2': {\n    left: {\n      modelUrl: TOUCH_GEN2_CONTROLLER_MODEL_BASE_URL + 'gen2-left.gltf',\n      rayOrigin: {origin: {x: -0.01, y: 0, z: -0.02}, direction: {x: 0, y: -0.5, z: -1}},\n      modelPivotOffset: new THREE.Vector3(0, 0, 0),\n      modelPivotRotation: new THREE.Euler(0, 0, 0)\n    },\n    right: {\n      modelUrl: TOUCH_GEN2_CONTROLLER_MODEL_BASE_URL + 'gen2-right.gltf',\n      rayOrigin: {origin: {x: 0.01, y: 0, z: -0.02}, direction: {x: 0, y: -0.5, z: -1}},\n      modelPivotOffset: new THREE.Vector3(0, 0, 0),\n      modelPivotRotation: new THREE.Euler(0, 0, 0)\n    }\n  }\n};\n\n/**\n * Button indices:\n * 0 - thumbstick (which has separate axismove / thumbstickmoved events)\n * 1 - trigger (with analog value, which goes up to 1)\n * 2 - grip (with analog value, which goes up to 1)\n * 3 - X (left) or A (right)\n * 4 - Y (left) or B (right)\n * 5 - surface (touch only)\n */\nvar INPUT_MAPPING_WEBVR = {\n  left: {\n    axes: {thumbstick: [0, 1]},\n    buttons: ['thumbstick', 'trigger', 'grip', 'xbutton', 'ybutton', 'surface']\n  },\n  right: {\n    axes: {thumbstick: [0, 1]},\n    buttons: ['thumbstick', 'trigger', 'grip', 'abutton', 'bbutton', 'surface']\n  }\n};\n\n/**\n * Button indices:\n * 0 - trigger\n * 1 - grip\n * 2 - none\n * 3 - thumbstick\n * 4 - X or A button\n * 5 - Y or B button\n * 6 - surface\n *\n * Axis:\n * 0 - none\n * 1 - none\n * 2 - thumbstick\n * 3 - thumbstick\n * Reference: https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/oculus/oculus-touch.json\n */\nvar INPUT_MAPPING_WEBXR = {\n  left: {\n    axes: {thumbstick: [2, 3]},\n    buttons: ['trigger', 'grip', 'none', 'thumbstick', 'xbutton', 'ybutton', 'surface']\n  },\n  right: {\n    axes: {thumbstick: [2, 3]},\n    buttons: ['trigger', 'grip', 'none', 'thumbstick', 'abutton', 'bbutton', 'surface']\n  }\n};\n\nvar INPUT_MAPPING = isWebXRAvailable ? INPUT_MAPPING_WEBXR : INPUT_MAPPING_WEBVR;\n\n/**\n * Oculus Touch controls.\n * Interface with Oculus Touch controllers and map Gamepad events to\n * controller buttons: thumbstick, trigger, grip, xbutton, ybutton, surface\n * Load a controller model and highlight the pressed buttons.\n */\nmodule.exports.Component = registerComponent('oculus-touch-controls', {\n  schema: {\n    hand: {default: 'left'},\n    buttonColor: {type: 'color', default: '#999'},  // Off-white.\n    buttonTouchColor: {type: 'color', default: '#8AB'},\n    buttonHighlightColor: {type: 'color', default: '#2DF'},  // Light blue.\n    model: {default: true},\n    controllerType: {default: 'auto', oneOf: ['auto', 'oculus-touch', 'oculus-touch-v2']},\n    orientationOffset: {type: 'vec3', default: {x: 43, y: 0, z: 0}}\n  },\n\n  mapping: INPUT_MAPPING,\n\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n\n  init: function () {\n    var self = this;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n    this.onButtonDown = function (evt) { onButtonEvent(evt.detail.id, 'down', self, self.data.hand); };\n    this.onButtonUp = function (evt) { onButtonEvent(evt.detail.id, 'up', self, self.data.hand); };\n    this.onButtonTouchStart = function (evt) { onButtonEvent(evt.detail.id, 'touchstart', self, self.data.hand); };\n    this.onButtonTouchEnd = function (evt) { onButtonEvent(evt.detail.id, 'touchend', self, self.data.hand); };\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.previousButtonValues = {};\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n    this.bindMethods();\n  },\n\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('axismove', this.onAxisMoved);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    this.controllerEventsActive = true;\n  },\n\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    el.removeEventListener('model-loaded', this.onModelLoaded);\n    this.controllerEventsActive = false;\n  },\n\n  checkIfControllerPresent: function () {\n    checkControllerPresentAndSetup(this, GAMEPAD_ID_PREFIX, {\n      hand: this.data.hand\n    });\n  },\n\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n\n  loadModel: function () {\n    var data = this.data;\n    if (!data.model) { return; }\n\n    // Set the controller display model based on the data passed in.\n    this.displayModel = CONTROLLER_PROPERTIES[data.controllerType] || CONTROLLER_PROPERTIES[CONTROLLER_DEFAULT];\n    // If the developer is asking for auto-detection, see if the displayName can be retrieved to identify the specific unit.\n    // This only works for WebVR currently.\n    if (data.controllerType === 'auto') {\n      var trackedControlsSystem = this.el.sceneEl.systems['tracked-controls-webvr'];\n      if (trackedControlsSystem && trackedControlsSystem.vrDisplay) {\n        var displayName = trackedControlsSystem.vrDisplay.displayName;\n        // The Oculus Quest uses the updated generation 2 inside-out tracked controllers so update the displayModel.\n        if (/^Oculus Quest$/.test(displayName)) {\n          this.displayModel = CONTROLLER_PROPERTIES['oculus-touch-v2'];\n        }\n      }\n      if (isOculusBrowser) { this.displayModel = CONTROLLER_PROPERTIES['oculus-touch-v2']; }\n    }\n    var modelUrl = this.displayModel[data.hand].modelUrl;\n    this.el.setAttribute('gltf-model', modelUrl);\n  },\n\n  injectTrackedControls: function () {\n    var data = this.data;\n    var webXRId = GAMEPAD_ID_WEBXR;\n    var webVRId = data.hand === 'right' ? 'Oculus Touch (Right)' : 'Oculus Touch (Left)';\n    var id = isWebXRAvailable ? webXRId : webVRId;\n    this.el.setAttribute('tracked-controls', {\n      id: id,\n      hand: data.hand,\n      orientationOffset: data.orientationOffset\n    });\n    this.loadModel();\n  },\n\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  onControllersUpdate: function () {\n    // Note that due to gamepadconnected event propagation issues, we don't rely on events.\n    this.checkIfControllerPresent();\n  },\n\n  onButtonChanged: function (evt) {\n    var button = this.mapping[this.data.hand].buttons[evt.detail.id];\n    var buttonMeshes = this.buttonMeshes;\n    var analogValue;\n    if (!button) { return; }\n\n    if (button === 'trigger' || button === 'grip') { analogValue = evt.detail.state.value; }\n\n    // Update trigger and/or grip meshes, if any.\n    if (buttonMeshes) {\n      if (button === 'trigger' && buttonMeshes.trigger) {\n        buttonMeshes.trigger.rotation.x = this.originalXRotationTrigger - analogValue * (Math.PI / 26);\n      }\n      if (button === 'grip' && buttonMeshes.grip) {\n        buttonMeshes.grip.position.x = this.originalXPositionGrip + (this.data.hand === 'left' ? -1 : 1) * analogValue * 0.004;\n      }\n    }\n\n    // Pass along changed event with button state, using the buttom mapping for convenience.\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n\n  onModelLoaded: function (evt) {\n    var controllerObject3D = evt.detail.model;\n    var buttonMeshes;\n\n    if (!this.data.model) { return; }\n\n    buttonMeshes = this.buttonMeshes = {};\n\n    buttonMeshes.grip = controllerObject3D.getObjectByName('buttonHand');\n    this.originalXPositionGrip = buttonMeshes.grip.position.x;\n    buttonMeshes.thumbstick = controllerObject3D.getObjectByName('stick');\n    buttonMeshes.trigger = controllerObject3D.getObjectByName('buttonTrigger');\n    this.originalXRotationTrigger = buttonMeshes.trigger.rotation.x;\n    buttonMeshes.xbutton = controllerObject3D.getObjectByName('buttonX');\n    buttonMeshes.abutton = controllerObject3D.getObjectByName('buttonA');\n    buttonMeshes.ybutton = controllerObject3D.getObjectByName('buttonY');\n    buttonMeshes.bbutton = controllerObject3D.getObjectByName('buttonB');\n\n    // Offset pivot point\n    controllerObject3D.position.copy(this.displayModel[this.data.hand].modelPivotOffset);\n    controllerObject3D.rotation.copy(this.displayModel[this.data.hand].modelPivotRotation);\n\n    this.el.emit('controllermodelready', {\n      name: 'oculus-touch-controls',\n      model: this.data.model,\n      rayOrigin: this.displayModel[this.data.hand].rayOrigin\n    });\n  },\n\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping[this.data.hand].axes, evt);\n  },\n\n  updateModel: function (buttonName, evtName) {\n    if (!this.data.model) { return; }\n    this.updateButtonModel(buttonName, evtName);\n  },\n\n  updateButtonModel: function (buttonName, state) {\n    var button;\n    var color = (state === 'up' || state === 'touchend') ? this.data.buttonColor : state === 'touchstart' ? this.data.buttonTouchColor : this.data.buttonHighlightColor;\n    var buttonMeshes = this.buttonMeshes;\n    if (!this.data.model) { return; }\n    if (buttonMeshes && buttonMeshes[buttonName]) {\n      button = buttonMeshes[buttonName];\n      button.material.color.set(color);\n      this.rendererSystem.applyColorCorrection(button.material.color);\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}