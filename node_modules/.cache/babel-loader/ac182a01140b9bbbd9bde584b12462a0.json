{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A constructor factory for a PBRMetallicRoughness class. The\n * PBRMetallicRoughness is defined based on a provided implementation for all\n * specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function definePBRMetallicRoughness(ThreeDOMElement) {\n  const $kernel = Symbol('kernel');\n  const $baseColorFactor = Symbol('baseColorFactor');\n  /**\n   * PBRMetallicRoughness exposes the PBR properties for a given Material.\n   */\n\n  class PBRMetallicRoughness extends ThreeDOMElement {\n    constructor(kernel, serialized) {\n      super(kernel, serialized);\n      this[$kernel] = kernel;\n      this[$baseColorFactor] = Object.freeze(serialized.baseColorFactor);\n    }\n    /**\n     * The base color factor of the material in RGBA format.\n     */\n\n\n    get baseColorFactor() {\n      return this[$baseColorFactor];\n    }\n    /**\n     * Set the base color factor of the material.\n     * Requires the material-properties capability.\n     *\n     * @see ../api.ts\n     */\n\n\n    async setBaseColorFactor(color) {\n      await this[$kernel].mutate(this, 'baseColorFactor', color);\n      this[$baseColorFactor] = Object.freeze(color);\n    }\n\n  }\n\n  return PBRMetallicRoughness;\n}","map":{"version":3,"sources":["../../src/api/pbr-metallic-roughness.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;AAWA,OAAM,SAAU,0BAAV,CACF,eADE,EAC2C;AAE/C,QAAM,OAAO,GAAG,MAAM,CAAC,QAAD,CAAtB;AACA,QAAM,gBAAgB,GAAG,MAAM,CAAC,iBAAD,CAA/B;AAEA;;;;AAGA,QAAM,oBAAN,SAAmC,eAAnC,CAAkD;AAKhD,IAAA,WAAA,CACI,MADJ,EACyB,UADzB,EACmE;AACjE,YAAM,MAAN,EAAc,UAAd;AAEA,WAAK,OAAL,IAAgB,MAAhB;AACA,WAAK,gBAAL,IACI,MAAM,CAAC,MAAP,CAAc,UAAU,CAAC,eAAzB,CADJ;AAED;AAED;;;;;AAGA,QAAI,eAAJ,GAAmB;AACjB,aAAO,KAAK,gBAAL,CAAP;AACD;AAED;;;;;;;;AAMA,UAAM,kBAAN,CAAyB,KAAzB,EAAoC;AAClC,YAAM,KAAK,OAAL,EAAc,MAAd,CAAqB,IAArB,EAA2B,iBAA3B,EAA8C,KAA9C,CAAN;AACA,WAAK,gBAAL,IAAyB,MAAM,CAAC,MAAP,CAAc,KAAd,CAAzB;AACD;;AA9B+C;;AAiClD,SAAO,oBAAP;AACD","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConstructedWithArguments, Constructor, PBRMetallicRoughness as PBRMetallicRoughnessInterface, RGBA, ThreeDOMElement} from '../api.js';\nimport {SerializedPBRMetallicRoughness} from '../protocol.js';\n\nimport {ModelKernel} from './model-kernel.js';\n\nexport type PBRMetallicRoughnessConstructor =\n    Constructor<PBRMetallicRoughnessInterface>&\n    ConstructedWithArguments<[ModelKernel, SerializedPBRMetallicRoughness]>;\n\n/**\n * A constructor factory for a PBRMetallicRoughness class. The\n * PBRMetallicRoughness is defined based on a provided implementation for all\n * specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function definePBRMetallicRoughness(\n    ThreeDOMElement: Constructor<ThreeDOMElement>):\n    PBRMetallicRoughnessConstructor {\n  const $kernel = Symbol('kernel');\n  const $baseColorFactor = Symbol('baseColorFactor');\n\n  /**\n   * PBRMetallicRoughness exposes the PBR properties for a given Material.\n   */\n  class PBRMetallicRoughness extends ThreeDOMElement implements\n      PBRMetallicRoughnessInterface {\n    protected[$kernel]: ModelKernel;\n    protected[$baseColorFactor]: Readonly<RGBA>;\n\n    constructor(\n        kernel: ModelKernel, serialized: SerializedPBRMetallicRoughness) {\n      super(kernel, serialized);\n\n      this[$kernel] = kernel;\n      this[$baseColorFactor] =\n          Object.freeze(serialized.baseColorFactor) as RGBA;\n    }\n\n    /**\n     * The base color factor of the material in RGBA format.\n     */\n    get baseColorFactor() {\n      return this[$baseColorFactor];\n    }\n\n    /**\n     * Set the base color factor of the material.\n     * Requires the material-properties capability.\n     *\n     * @see ../api.ts\n     */\n    async setBaseColorFactor(color: RGBA) {\n      await this[$kernel].mutate(this, 'baseColorFactor', color);\n      this[$baseColorFactor] = Object.freeze(color) as RGBA;\n    }\n  }\n\n  return PBRMetallicRoughness;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}