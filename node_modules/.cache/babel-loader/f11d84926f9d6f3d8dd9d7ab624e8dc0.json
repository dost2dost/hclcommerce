{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { property } from 'lit-element';\nimport { $renderer, $scene, $tick } from '../model-viewer-base.js'; // How much the model will rotate per\n// second in radians:\n\nconst ROTATION_SPEED = Math.PI / 32;\nexport const AUTO_ROTATE_DELAY_DEFAULT = 3000;\nconst $autoRotateStartTime = Symbol('autoRotateStartTime');\nconst $cameraChangeHandler = Symbol('cameraChangeHandler');\nconst $onCameraChange = Symbol('onCameraChange');\nexport const StagingMixin = ModelViewerElement => {\n  var _a, _b;\n\n  class StagingModelViewerElement extends ModelViewerElement {\n    constructor() {\n      super(...arguments);\n      this.autoRotate = false;\n      this.autoRotateDelay = AUTO_ROTATE_DELAY_DEFAULT;\n      this[_a] = performance.now();\n\n      this[_b] = event => this[$onCameraChange](event);\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.addEventListener('camera-change', this[$cameraChangeHandler]);\n      this[$autoRotateStartTime] = performance.now();\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.removeEventListener('camera-change', this[$cameraChangeHandler]);\n      this[$autoRotateStartTime] = performance.now();\n    }\n\n    updated(changedProperties) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('autoRotate')) {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }\n\n    [(_a = $autoRotateStartTime, _b = $cameraChangeHandler, $tick)](time, delta) {\n      super[$tick](time, delta);\n\n      if (!this.autoRotate || !this.modelIsVisible || this[$renderer].isPresenting) {\n        return;\n      }\n\n      const rotationDelta = Math.min(delta, time - this[$autoRotateStartTime] - this.autoRotateDelay);\n\n      if (rotationDelta > 0) {\n        this[$scene].yaw = this.turntableRotation + ROTATION_SPEED * rotationDelta * 0.001;\n      }\n    }\n\n    [$onCameraChange](event) {\n      if (!this.autoRotate) {\n        return;\n      }\n\n      if (event.detail.source === 'user-interaction') {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }\n\n    get turntableRotation() {\n      return this[$scene].yaw;\n    }\n\n    resetTurntableRotation() {\n      this[$scene].yaw = 0;\n    }\n\n  }\n\n  __decorate([property({\n    type: Boolean,\n    attribute: 'auto-rotate'\n  })], StagingModelViewerElement.prototype, \"autoRotate\", void 0);\n\n  __decorate([property({\n    type: Number,\n    attribute: 'auto-rotate-delay'\n  })], StagingModelViewerElement.prototype, \"autoRotateDelay\", void 0);\n\n  return StagingModelViewerElement;\n};","map":{"version":3,"sources":["../../src/features/staging.ts"],"names":[],"mappings":"AACA;;;;;;;;;;;;;;;;;;;;;;AAeA,SAAQ,QAAR,QAAuB,aAAvB;AAEA,SAAgC,SAAhC,EAA2C,MAA3C,EAAmD,KAAnD,QAA+D,yBAA/D,C,CAKA;AACA;;AACA,MAAM,cAAc,GAAG,IAAI,CAAC,EAAL,GAAU,EAAjC;AACA,OAAO,MAAM,yBAAyB,GAAG,IAAlC;AAEP,MAAM,oBAAoB,GAAG,MAAM,CAAC,qBAAD,CAAnC;AACA,MAAM,oBAAoB,GAAG,MAAM,CAAC,qBAAD,CAAnC;AACA,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAD,CAA9B;AASA,OAAO,MAAM,YAAY,GACrB,kBADwB,IACkC;;;AAC5D,QAAM,yBAAN,SAAwC,kBAAxC,CAA0D;AAA1D,IAAA,WAAA,GAAA;;AAEE,WAAA,UAAA,GAAsB,KAAtB;AAGA,WAAA,eAAA,GAA0B,yBAA1B;AAEO,WAAA,EAAA,IAAyB,WAAW,CAAC,GAAZ,EAAzB;;AACA,WAAA,EAAA,IAA0B,KAAD,IAC5B,KAAK,eAAL,EAAsB,KAAtB,CADG;AA2DR;;AAxDC,IAAA,iBAAiB,GAAA;AACf,YAAM,iBAAN;AACA,WAAK,gBAAL,CACI,eADJ,EACqB,KAAK,oBAAL,CADrB;AAEA,WAAK,oBAAL,IAA6B,WAAW,CAAC,GAAZ,EAA7B;AACD;;AAED,IAAA,oBAAoB,GAAA;AAClB,YAAM,oBAAN;AACA,WAAK,mBAAL,CACI,eADJ,EACqB,KAAK,oBAAL,CADrB;AAEA,WAAK,oBAAL,IAA6B,WAAW,CAAC,GAAZ,EAA7B;AACD;;AAED,IAAA,OAAO,CAAC,iBAAD,EAAoC;AACzC,YAAM,OAAN,CAAc,iBAAd;;AAEA,UAAI,iBAAiB,CAAC,GAAlB,CAAsB,YAAtB,CAAJ,EAAyC;AACvC,aAAK,oBAAL,IAA6B,WAAW,CAAC,GAAZ,EAA7B;AACD;AACF;;AAED,MAAA,EAAA,GA1BQ,oBA0BR,EA1B4B,EAAA,GACpB,oBAyBR,EAAC,KAAD,GAAQ,IAAR,EAAsB,KAAtB,EAAmC;AACjC,YAAM,KAAN,EAAa,IAAb,EAAmB,KAAnB;;AAEA,UAAI,CAAC,KAAK,UAAN,IAAoB,CAAC,KAAK,cAA1B,IACA,KAAK,SAAL,EAAgB,YADpB,EACkC;AAChC;AACD;;AAED,YAAM,aAAa,GAAG,IAAI,CAAC,GAAL,CAClB,KADkB,EACX,IAAI,GAAG,KAAK,oBAAL,CAAP,GAAoC,KAAK,eAD9B,CAAtB;;AAGA,UAAI,aAAa,GAAG,CAApB,EAAuB;AACrB,aAAK,MAAL,EAAa,GAAb,GACI,KAAK,iBAAL,GAAyB,cAAc,GAAG,aAAjB,GAAiC,KAD9D;AAED;AACF;;AAED,KAAC,eAAD,EAAkB,KAAlB,EAAyD;AACvD,UAAI,CAAC,KAAK,UAAV,EAAsB;AACpB;AACD;;AAED,UAAI,KAAK,CAAC,MAAN,CAAa,MAAb,KAAwB,kBAA5B,EAAgD;AAC9C,aAAK,oBAAL,IAA6B,WAAW,CAAC,GAAZ,EAA7B;AACD;AACF;;AAED,QAAI,iBAAJ,GAAqB;AACnB,aAAO,KAAK,MAAL,EAAa,GAApB;AACD;;AAED,IAAA,sBAAsB,GAAA;AACpB,WAAK,MAAL,EAAa,GAAb,GAAmB,CAAnB;AACD;;AAlEuD;;AAExD,EAAA,UAAA,CAAA,CADC,QAAQ,CAAC;AAAC,IAAA,IAAI,EAAE,OAAP;AAAgB,IAAA,SAAS,EAAE;AAA3B,GAAD,CACT,CAAA,E,mCAAA,E,YAAA,E,KAA4B,CAA5B,CAAA;;AAGA,EAAA,UAAA,CAAA,CADC,QAAQ,CAAC;AAAC,IAAA,IAAI,EAAE,MAAP;AAAe,IAAA,SAAS,EAAE;AAA1B,GAAD,CACT,CAAA,E,mCAAA,E,iBAAA,E,KAAoD,CAApD,CAAA;;AAgEF,SAAO,yBAAP;AACD,CAxEM","sourcesContent":["\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit-element';\n\nimport ModelViewerElementBase, {$renderer, $scene, $tick} from '../model-viewer-base.js';\nimport {Constructor} from '../utilities.js';\n\nimport {CameraChangeDetails} from './controls.js';\n\n// How much the model will rotate per\n// second in radians:\nconst ROTATION_SPEED = Math.PI / 32;\nexport const AUTO_ROTATE_DELAY_DEFAULT = 3000;\n\nconst $autoRotateStartTime = Symbol('autoRotateStartTime');\nconst $cameraChangeHandler = Symbol('cameraChangeHandler');\nconst $onCameraChange = Symbol('onCameraChange');\n\nexport declare interface StagingInterface {\n  autoRotate: boolean;\n  autoRotateDelay: number;\n  readonly turntableRotation: number;\n  resetTurntableRotation(): void;\n}\n\nexport const StagingMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<StagingInterface>&T => {\n  class StagingModelViewerElement extends ModelViewerElement {\n    @property({type: Boolean, attribute: 'auto-rotate'})\n    autoRotate: boolean = false;\n\n    @property({type: Number, attribute: 'auto-rotate-delay'})\n    autoRotateDelay: number = AUTO_ROTATE_DELAY_DEFAULT;\n\n    private[$autoRotateStartTime] = performance.now();\n    private[$cameraChangeHandler] = (event: CustomEvent<CameraChangeDetails>) =>\n        this[$onCameraChange](event);\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.addEventListener(\n          'camera-change', this[$cameraChangeHandler] as EventListener);\n      this[$autoRotateStartTime] = performance.now();\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.removeEventListener(\n          'camera-change', this[$cameraChangeHandler] as EventListener);\n      this[$autoRotateStartTime] = performance.now();\n    }\n\n    updated(changedProperties: Map<string, any>) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('autoRotate')) {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }\n\n    [$tick](time: number, delta: number) {\n      super[$tick](time, delta);\n\n      if (!this.autoRotate || !this.modelIsVisible ||\n          this[$renderer].isPresenting) {\n        return;\n      }\n\n      const rotationDelta = Math.min(\n          delta, time - this[$autoRotateStartTime] - this.autoRotateDelay);\n\n      if (rotationDelta > 0) {\n        this[$scene].yaw =\n            this.turntableRotation + ROTATION_SPEED * rotationDelta * 0.001;\n      }\n    }\n\n    [$onCameraChange](event: CustomEvent<CameraChangeDetails>) {\n      if (!this.autoRotate) {\n        return;\n      }\n\n      if (event.detail.source === 'user-interaction') {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }\n\n    get turntableRotation(): number {\n      return this[$scene].yaw;\n    }\n\n    resetTurntableRotation() {\n      this[$scene].yaw = 0;\n    }\n  }\n\n  return StagingModelViewerElement;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}