{"ast":null,"code":"/* global THREE */\nvar registerComponent = require('../core/component').registerComponent; // Found at https://github.com/aframevr/assets.\n\n\nvar MODEL_URLS = {\n  left: 'https://cdn.aframe.io/controllers/hands/leftHand.glb',\n  right: 'https://cdn.aframe.io/controllers/hands/rightHand.glb'\n}; // Poses.\n\nvar ANIMATIONS = {\n  open: 'Open',\n  // point: grip active, trackpad surface active, trigger inactive.\n  point: 'Point',\n  // pointThumb: grip active, trigger inactive, trackpad surface inactive.\n  pointThumb: 'Point + Thumb',\n  // fist: grip active, trigger active, trackpad surface active.\n  fist: 'Fist',\n  // hold: trigger active, grip inactive.\n  hold: 'Hold',\n  // thumbUp: grip active, trigger active, trackpad surface inactive.\n  thumbUp: 'Thumb Up'\n}; // Map animation to public events for the API.\n\nvar EVENTS = {};\nEVENTS[ANIMATIONS.fist] = 'grip';\nEVENTS[ANIMATIONS.thumbUp] = 'pistol';\nEVENTS[ANIMATIONS.point] = 'pointing';\n/**\n * Hand controls component that abstracts 6DoF controls:\n *   oculus-touch-controls, vive-controls, windows-motion-controls.\n *\n * Originally meant to be a sample implementation of applications-specific controls that\n * abstracts multiple types of controllers.\n *\n * Auto-detect appropriate controller.\n * Handle common events coming from the detected vendor-specific controls.\n * Translate button events to semantic hand-related event names:\n *   (gripclose, gripopen, thumbup, thumbdown, pointup, pointdown)\n * Load hand model with gestures that are applied based on the button pressed.\n *\n * @property {string} Hand mapping (`left`, `right`).\n */\n\nmodule.exports.Component = registerComponent('hand-controls', {\n  schema: {\n    default: 'left'\n  },\n  init: function () {\n    var self = this;\n    var el = this.el; // Current pose.\n\n    this.gesture = ANIMATIONS.open; // Active buttons populated by events provided by the attached controls.\n\n    this.pressedButtons = {};\n    this.touchedButtons = {};\n    this.loader = new THREE.GLTFLoader();\n    this.loader.setCrossOrigin('anonymous');\n\n    this.onGripDown = function () {\n      self.handleButton('grip', 'down');\n    };\n\n    this.onGripUp = function () {\n      self.handleButton('grip', 'up');\n    };\n\n    this.onTrackpadDown = function () {\n      self.handleButton('trackpad', 'down');\n    };\n\n    this.onTrackpadUp = function () {\n      self.handleButton('trackpad', 'up');\n    };\n\n    this.onTrackpadTouchStart = function () {\n      self.handleButton('trackpad', 'touchstart');\n    };\n\n    this.onTrackpadTouchEnd = function () {\n      self.handleButton('trackpad', 'touchend');\n    };\n\n    this.onTriggerDown = function () {\n      self.handleButton('trigger', 'down');\n    };\n\n    this.onTriggerUp = function () {\n      self.handleButton('trigger', 'up');\n    };\n\n    this.onTriggerTouchStart = function () {\n      self.handleButton('trigger', 'touchstart');\n    };\n\n    this.onTriggerTouchEnd = function () {\n      self.handleButton('trigger', 'touchend');\n    };\n\n    this.onGripTouchStart = function () {\n      self.handleButton('grip', 'touchstart');\n    };\n\n    this.onGripTouchEnd = function () {\n      self.handleButton('grip', 'touchend');\n    };\n\n    this.onThumbstickDown = function () {\n      self.handleButton('thumbstick', 'down');\n    };\n\n    this.onThumbstickUp = function () {\n      self.handleButton('thumbstick', 'up');\n    };\n\n    this.onAorXTouchStart = function () {\n      self.handleButton('AorX', 'touchstart');\n    };\n\n    this.onAorXTouchEnd = function () {\n      self.handleButton('AorX', 'touchend');\n    };\n\n    this.onBorYTouchStart = function () {\n      self.handleButton('BorY', 'touchstart');\n    };\n\n    this.onBorYTouchEnd = function () {\n      self.handleButton('BorY', 'touchend');\n    };\n\n    this.onSurfaceTouchStart = function () {\n      self.handleButton('surface', 'touchstart');\n    };\n\n    this.onSurfaceTouchEnd = function () {\n      self.handleButton('surface', 'touchend');\n    };\n\n    this.onControllerConnected = this.onControllerConnected.bind(this);\n    this.onControllerDisconnected = this.onControllerDisconnected.bind(this);\n    el.addEventListener('controllerconnected', this.onControllerConnected);\n    el.addEventListener('controllerdisconnected', this.onControllerDisconnected); // Hidden by default.\n\n    el.object3D.visible = false;\n  },\n  play: function () {\n    this.addEventListeners();\n  },\n  pause: function () {\n    this.removeEventListeners();\n  },\n  tick: function (time, delta) {\n    var mesh = this.el.getObject3D('mesh');\n\n    if (!mesh || !mesh.mixer) {\n      return;\n    }\n\n    mesh.mixer.update(delta / 1000);\n  },\n  onControllerConnected: function () {\n    this.el.object3D.visible = true;\n  },\n  onControllerDisconnected: function () {\n    this.el.object3D.visible = false;\n  },\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('gripdown', this.onGripDown);\n    el.addEventListener('gripup', this.onGripUp);\n    el.addEventListener('trackpaddown', this.onTrackpadDown);\n    el.addEventListener('trackpadup', this.onTrackpadUp);\n    el.addEventListener('trackpadtouchstart', this.onTrackpadTouchStart);\n    el.addEventListener('trackpadtouchend', this.onTrackpadTouchEnd);\n    el.addEventListener('triggerdown', this.onTriggerDown);\n    el.addEventListener('triggerup', this.onTriggerUp);\n    el.addEventListener('triggertouchstart', this.onTriggerTouchStart);\n    el.addEventListener('triggertouchend', this.onTriggerTouchEnd);\n    el.addEventListener('griptouchstart', this.onGripTouchStart);\n    el.addEventListener('griptouchend', this.onGripTouchEnd);\n    el.addEventListener('thumbstickdown', this.onThumbstickDown);\n    el.addEventListener('thumbstickup', this.onThumbstickUp);\n    el.addEventListener('abuttontouchstart', this.onAorXTouchStart);\n    el.addEventListener('abuttontouchend', this.onAorXTouchEnd);\n    el.addEventListener('bbuttontouchstart', this.onBorYTouchStart);\n    el.addEventListener('bbuttontouchend', this.onBorYTouchEnd);\n    el.addEventListener('xbuttontouchstart', this.onAorXTouchStart);\n    el.addEventListener('xbuttontouchend', this.onAorXTouchEnd);\n    el.addEventListener('ybuttontouchstart', this.onBorYTouchStart);\n    el.addEventListener('ybuttontouchend', this.onBorYTouchEnd);\n    el.addEventListener('surfacetouchstart', this.onSurfaceTouchStart);\n    el.addEventListener('surfacetouchend', this.onSurfaceTouchEnd);\n  },\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('gripdown', this.onGripDown);\n    el.removeEventListener('gripup', this.onGripUp);\n    el.removeEventListener('trackpaddown', this.onTrackpadDown);\n    el.removeEventListener('trackpadup', this.onTrackpadUp);\n    el.removeEventListener('trackpadtouchstart', this.onTrackpadTouchStart);\n    el.removeEventListener('trackpadtouchend', this.onTrackpadTouchEnd);\n    el.removeEventListener('triggerdown', this.onTriggerDown);\n    el.removeEventListener('triggerup', this.onTriggerUp);\n    el.removeEventListener('triggertouchstart', this.onTriggerTouchStart);\n    el.removeEventListener('triggertouchend', this.onTriggerTouchEnd);\n    el.removeEventListener('griptouchstart', this.onGripTouchStart);\n    el.removeEventListener('griptouchend', this.onGripTouchEnd);\n    el.removeEventListener('thumbstickdown', this.onThumbstickDown);\n    el.removeEventListener('thumbstickup', this.onThumbstickUp);\n    el.removeEventListener('abuttontouchstart', this.onAorXTouchStart);\n    el.removeEventListener('abuttontouchend', this.onAorXTouchEnd);\n    el.removeEventListener('bbuttontouchstart', this.onBorYTouchStart);\n    el.removeEventListener('bbuttontouchend', this.onBorYTouchEnd);\n    el.removeEventListener('xbuttontouchstart', this.onAorXTouchStart);\n    el.removeEventListener('xbuttontouchend', this.onAorXTouchEnd);\n    el.removeEventListener('ybuttontouchstart', this.onBorYTouchStart);\n    el.removeEventListener('ybuttontouchend', this.onBorYTouchEnd);\n    el.removeEventListener('surfacetouchstart', this.onSurfaceTouchStart);\n    el.removeEventListener('surfacetouchend', this.onSurfaceTouchEnd);\n  },\n\n  /**\n   * Update handler. More like the `init` handler since the only property is the hand, and\n   * that won't be changing much.\n   */\n  update: function (previousHand) {\n    var controlConfiguration;\n    var el = this.el;\n    var hand = this.data;\n    var self = this; // Get common configuration to abstract different vendor controls.\n\n    controlConfiguration = {\n      hand: hand,\n      model: false,\n      orientationOffset: {\n        x: 0,\n        y: 0,\n        z: hand === 'left' ? 90 : -90\n      }\n    }; // Set model.\n\n    if (hand !== previousHand) {\n      this.loader.load(MODEL_URLS[hand], function (gltf) {\n        var mesh = gltf.scene.children[0];\n        mesh.mixer = new THREE.AnimationMixer(mesh);\n        self.clips = gltf.animations;\n        el.setObject3D('mesh', mesh);\n        mesh.position.set(0, 0, 0);\n        mesh.rotation.set(0, 0, 0);\n        el.setAttribute('vive-controls', controlConfiguration);\n        el.setAttribute('oculus-touch-controls', controlConfiguration);\n        el.setAttribute('windows-motion-controls', controlConfiguration);\n      });\n    }\n  },\n  remove: function () {\n    this.el.removeObject3D('mesh');\n  },\n\n  /**\n   * Play model animation, based on which button was pressed and which kind of event.\n   *\n   * 1. Process buttons.\n   * 2. Determine gesture (this.determineGesture()).\n   * 3. Animation gesture (this.animationGesture()).\n   * 4. Emit gesture events (this.emitGestureEvents()).\n   *\n   * @param {string} button - Name of the button.\n   * @param {string} evt - Type of event for the button (i.e., down/up/touchstart/touchend).\n   */\n  handleButton: function (button, evt) {\n    var lastGesture;\n    var isPressed = evt === 'down';\n    var isTouched = evt === 'touchstart'; // Update objects.\n\n    if (evt.indexOf('touch') === 0) {\n      // Update touch object.\n      if (isTouched === this.touchedButtons[button]) {\n        return;\n      }\n\n      this.touchedButtons[button] = isTouched;\n    } else {\n      // Update button object.\n      if (isPressed === this.pressedButtons[button]) {\n        return;\n      }\n\n      this.pressedButtons[button] = isPressed;\n    } // Determine the gesture.\n\n\n    lastGesture = this.gesture;\n    this.gesture = this.determineGesture(); // Same gesture.\n\n    if (this.gesture === lastGesture) {\n      return;\n    } // Animate gesture.\n\n\n    this.animateGesture(this.gesture, lastGesture); // Emit events.\n\n    this.emitGestureEvents(this.gesture, lastGesture);\n  },\n\n  /**\n   * Determine which pose hand should be in considering active and touched buttons.\n   */\n  determineGesture: function () {\n    var gesture;\n    var isGripActive = this.pressedButtons['grip'];\n    var isSurfaceActive = this.pressedButtons['surface'] || this.touchedButtons['surface'];\n    var isTrackpadActive = this.pressedButtons['trackpad'] || this.touchedButtons['trackpad'];\n    var isTriggerActive = this.pressedButtons['trigger'] || this.touchedButtons['trigger'];\n    var isABXYActive = this.touchedButtons['AorX'] || this.touchedButtons['BorY'];\n    var isVive = isViveController(this.el.components['tracked-controls']); // Works well with Oculus Touch and Windows Motion Controls, but Vive needs tweaks.\n\n    if (isVive) {\n      if (isGripActive || isTriggerActive) {\n        gesture = ANIMATIONS.fist;\n      } else if (isTrackpadActive) {\n        gesture = ANIMATIONS.point;\n      }\n    } else {\n      if (isGripActive) {\n        if (isSurfaceActive || isABXYActive || isTrackpadActive) {\n          gesture = isTriggerActive ? ANIMATIONS.fist : ANIMATIONS.point;\n        } else {\n          gesture = isTriggerActive ? ANIMATIONS.thumbUp : ANIMATIONS.pointThumb;\n        }\n      } else if (isTriggerActive) {\n        gesture = ANIMATIONS.hold;\n      }\n    }\n\n    return gesture;\n  },\n\n  /**\n   * Play corresponding clip to a gesture\n   */\n  getClip: function (gesture) {\n    var clip;\n    var i;\n\n    for (i = 0; i < this.clips.length; i++) {\n      clip = this.clips[i];\n\n      if (clip.name !== gesture) {\n        continue;\n      }\n\n      return clip;\n    }\n  },\n\n  /**\n   * Play gesture animation.\n   *\n   * @param {string} gesture - Which pose to animate to. If absent, then animate to open.\n   * @param {string} lastGesture - Previous gesture, to reverse back to open if needed.\n   */\n  animateGesture: function (gesture, lastGesture) {\n    if (gesture) {\n      this.playAnimation(gesture || ANIMATIONS.open, lastGesture, false);\n      return;\n    } // If no gesture, then reverse the current gesture back to open pose.\n\n\n    this.playAnimation(lastGesture, lastGesture, true);\n  },\n\n  /**\n   * Emit `hand-controls`-specific events.\n   */\n  emitGestureEvents: function (gesture, lastGesture) {\n    var el = this.el;\n    var eventName;\n\n    if (lastGesture === gesture) {\n      return;\n    } // Emit event for lastGesture not inactive.\n\n\n    eventName = getGestureEventName(lastGesture, false);\n\n    if (eventName) {\n      el.emit(eventName);\n    } // Emit event for current gesture now active.\n\n\n    eventName = getGestureEventName(gesture, true);\n\n    if (eventName) {\n      el.emit(eventName);\n    }\n  },\n\n  /**\n    * Play hand animation based on button state.\n    *\n    * @param {string} gesture - Name of the animation as specified by the model.\n    * @param {string} lastGesture - Previous pose.\n    * @param {boolean} reverse - Whether animation should play in reverse.\n    */\n  playAnimation: function (gesture, lastGesture, reverse) {\n    var clip;\n    var fromAction;\n    var mesh = this.el.getObject3D('mesh');\n    var toAction;\n\n    if (!mesh) {\n      return;\n    } // Stop all current animations.\n\n\n    mesh.mixer.stopAllAction(); // Grab clip action.\n\n    clip = this.getClip(gesture);\n    toAction = mesh.mixer.clipAction(clip);\n    toAction.clampWhenFinished = true;\n    toAction.loop = THREE.LoopRepeat;\n    toAction.repetitions = 0;\n    toAction.timeScale = reverse ? -1 : 1;\n    toAction.time = reverse ? clip.duration : 0;\n    toAction.weight = 1; // No gesture to gesture or gesture to no gesture.\n\n    if (!lastGesture || gesture === lastGesture) {\n      // Stop all current animations.\n      mesh.mixer.stopAllAction(); // Play animation.\n\n      toAction.play();\n      return;\n    } // Animate or crossfade from gesture to gesture.\n\n\n    clip = this.getClip(lastGesture);\n    fromAction = mesh.mixer.clipAction(clip);\n    fromAction.weight = 0.15;\n    fromAction.play();\n    toAction.play();\n    fromAction.crossFadeTo(toAction, 0.15, true);\n  }\n});\n/**\n * Suffix gestures based on toggle state (e.g., open/close, up/down, start/end).\n *\n * @param {string} gesture\n * @param {boolean} active\n */\n\nfunction getGestureEventName(gesture, active) {\n  var eventName;\n\n  if (!gesture) {\n    return;\n  }\n\n  eventName = EVENTS[gesture];\n\n  if (eventName === 'grip') {\n    return eventName + (active ? 'close' : 'open');\n  }\n\n  if (eventName === 'point') {\n    return eventName + (active ? 'up' : 'down');\n  }\n\n  if (eventName === 'pointing' || eventName === 'pistol') {\n    return eventName + (active ? 'start' : 'end');\n  }\n\n  return;\n}\n\nfunction isViveController(trackedControls) {\n  var controller = trackedControls && trackedControls.controller;\n  var isVive = controller && (controller.id && controller.id.indexOf('OpenVR ') === 0 || controller.profiles && controller.profiles[0] && controller.profiles[0] === 'htc-vive-controller-mv');\n  return isVive;\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/hand-controls.js"],"names":["registerComponent","require","MODEL_URLS","left","right","ANIMATIONS","open","point","pointThumb","fist","hold","thumbUp","EVENTS","module","exports","Component","schema","default","init","self","el","gesture","pressedButtons","touchedButtons","loader","THREE","GLTFLoader","setCrossOrigin","onGripDown","handleButton","onGripUp","onTrackpadDown","onTrackpadUp","onTrackpadTouchStart","onTrackpadTouchEnd","onTriggerDown","onTriggerUp","onTriggerTouchStart","onTriggerTouchEnd","onGripTouchStart","onGripTouchEnd","onThumbstickDown","onThumbstickUp","onAorXTouchStart","onAorXTouchEnd","onBorYTouchStart","onBorYTouchEnd","onSurfaceTouchStart","onSurfaceTouchEnd","onControllerConnected","bind","onControllerDisconnected","addEventListener","object3D","visible","play","addEventListeners","pause","removeEventListeners","tick","time","delta","mesh","getObject3D","mixer","update","removeEventListener","previousHand","controlConfiguration","hand","data","model","orientationOffset","x","y","z","load","gltf","scene","children","AnimationMixer","clips","animations","setObject3D","position","set","rotation","setAttribute","remove","removeObject3D","button","evt","lastGesture","isPressed","isTouched","indexOf","determineGesture","animateGesture","emitGestureEvents","isGripActive","isSurfaceActive","isTrackpadActive","isTriggerActive","isABXYActive","isVive","isViveController","components","getClip","clip","i","length","name","playAnimation","eventName","getGestureEventName","emit","reverse","fromAction","toAction","stopAllAction","clipAction","clampWhenFinished","loop","LoopRepeat","repetitions","timeScale","duration","weight","crossFadeTo","active","trackedControls","controller","id","profiles"],"mappings":"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","sourcesContent":["/* global THREE */\nvar registerComponent = require('../core/component').registerComponent;\n\n// Found at https://github.com/aframevr/assets.\nvar MODEL_URLS = {\n  left: 'https://cdn.aframe.io/controllers/hands/leftHand.glb',\n  right: 'https://cdn.aframe.io/controllers/hands/rightHand.glb'\n};\n\n// Poses.\nvar ANIMATIONS = {\n  open: 'Open',\n  // point: grip active, trackpad surface active, trigger inactive.\n  point: 'Point',\n  // pointThumb: grip active, trigger inactive, trackpad surface inactive.\n  pointThumb: 'Point + Thumb',\n  // fist: grip active, trigger active, trackpad surface active.\n  fist: 'Fist',\n  // hold: trigger active, grip inactive.\n  hold: 'Hold',\n  // thumbUp: grip active, trigger active, trackpad surface inactive.\n  thumbUp: 'Thumb Up'\n};\n\n// Map animation to public events for the API.\nvar EVENTS = {};\nEVENTS[ANIMATIONS.fist] = 'grip';\nEVENTS[ANIMATIONS.thumbUp] = 'pistol';\nEVENTS[ANIMATIONS.point] = 'pointing';\n\n/**\n * Hand controls component that abstracts 6DoF controls:\n *   oculus-touch-controls, vive-controls, windows-motion-controls.\n *\n * Originally meant to be a sample implementation of applications-specific controls that\n * abstracts multiple types of controllers.\n *\n * Auto-detect appropriate controller.\n * Handle common events coming from the detected vendor-specific controls.\n * Translate button events to semantic hand-related event names:\n *   (gripclose, gripopen, thumbup, thumbdown, pointup, pointdown)\n * Load hand model with gestures that are applied based on the button pressed.\n *\n * @property {string} Hand mapping (`left`, `right`).\n */\nmodule.exports.Component = registerComponent('hand-controls', {\n  schema: {default: 'left'},\n\n  init: function () {\n    var self = this;\n    var el = this.el;\n    // Current pose.\n    this.gesture = ANIMATIONS.open;\n    // Active buttons populated by events provided by the attached controls.\n    this.pressedButtons = {};\n    this.touchedButtons = {};\n    this.loader = new THREE.GLTFLoader();\n    this.loader.setCrossOrigin('anonymous');\n\n    this.onGripDown = function () { self.handleButton('grip', 'down'); };\n    this.onGripUp = function () { self.handleButton('grip', 'up'); };\n    this.onTrackpadDown = function () { self.handleButton('trackpad', 'down'); };\n    this.onTrackpadUp = function () { self.handleButton('trackpad', 'up'); };\n    this.onTrackpadTouchStart = function () { self.handleButton('trackpad', 'touchstart'); };\n    this.onTrackpadTouchEnd = function () { self.handleButton('trackpad', 'touchend'); };\n    this.onTriggerDown = function () { self.handleButton('trigger', 'down'); };\n    this.onTriggerUp = function () { self.handleButton('trigger', 'up'); };\n    this.onTriggerTouchStart = function () { self.handleButton('trigger', 'touchstart'); };\n    this.onTriggerTouchEnd = function () { self.handleButton('trigger', 'touchend'); };\n    this.onGripTouchStart = function () { self.handleButton('grip', 'touchstart'); };\n    this.onGripTouchEnd = function () { self.handleButton('grip', 'touchend'); };\n    this.onThumbstickDown = function () { self.handleButton('thumbstick', 'down'); };\n    this.onThumbstickUp = function () { self.handleButton('thumbstick', 'up'); };\n    this.onAorXTouchStart = function () { self.handleButton('AorX', 'touchstart'); };\n    this.onAorXTouchEnd = function () { self.handleButton('AorX', 'touchend'); };\n    this.onBorYTouchStart = function () { self.handleButton('BorY', 'touchstart'); };\n    this.onBorYTouchEnd = function () { self.handleButton('BorY', 'touchend'); };\n    this.onSurfaceTouchStart = function () { self.handleButton('surface', 'touchstart'); };\n    this.onSurfaceTouchEnd = function () { self.handleButton('surface', 'touchend'); };\n    this.onControllerConnected = this.onControllerConnected.bind(this);\n    this.onControllerDisconnected = this.onControllerDisconnected.bind(this);\n\n    el.addEventListener('controllerconnected', this.onControllerConnected);\n    el.addEventListener('controllerdisconnected', this.onControllerDisconnected);\n\n    // Hidden by default.\n    el.object3D.visible = false;\n  },\n\n  play: function () {\n    this.addEventListeners();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n  },\n\n  tick: function (time, delta) {\n    var mesh = this.el.getObject3D('mesh');\n\n    if (!mesh || !mesh.mixer) { return; }\n\n    mesh.mixer.update(delta / 1000);\n  },\n\n  onControllerConnected: function () {\n    this.el.object3D.visible = true;\n  },\n\n  onControllerDisconnected: function () {\n    this.el.object3D.visible = false;\n  },\n\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('gripdown', this.onGripDown);\n    el.addEventListener('gripup', this.onGripUp);\n    el.addEventListener('trackpaddown', this.onTrackpadDown);\n    el.addEventListener('trackpadup', this.onTrackpadUp);\n    el.addEventListener('trackpadtouchstart', this.onTrackpadTouchStart);\n    el.addEventListener('trackpadtouchend', this.onTrackpadTouchEnd);\n    el.addEventListener('triggerdown', this.onTriggerDown);\n    el.addEventListener('triggerup', this.onTriggerUp);\n    el.addEventListener('triggertouchstart', this.onTriggerTouchStart);\n    el.addEventListener('triggertouchend', this.onTriggerTouchEnd);\n    el.addEventListener('griptouchstart', this.onGripTouchStart);\n    el.addEventListener('griptouchend', this.onGripTouchEnd);\n    el.addEventListener('thumbstickdown', this.onThumbstickDown);\n    el.addEventListener('thumbstickup', this.onThumbstickUp);\n    el.addEventListener('abuttontouchstart', this.onAorXTouchStart);\n    el.addEventListener('abuttontouchend', this.onAorXTouchEnd);\n    el.addEventListener('bbuttontouchstart', this.onBorYTouchStart);\n    el.addEventListener('bbuttontouchend', this.onBorYTouchEnd);\n    el.addEventListener('xbuttontouchstart', this.onAorXTouchStart);\n    el.addEventListener('xbuttontouchend', this.onAorXTouchEnd);\n    el.addEventListener('ybuttontouchstart', this.onBorYTouchStart);\n    el.addEventListener('ybuttontouchend', this.onBorYTouchEnd);\n    el.addEventListener('surfacetouchstart', this.onSurfaceTouchStart);\n    el.addEventListener('surfacetouchend', this.onSurfaceTouchEnd);\n  },\n\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('gripdown', this.onGripDown);\n    el.removeEventListener('gripup', this.onGripUp);\n    el.removeEventListener('trackpaddown', this.onTrackpadDown);\n    el.removeEventListener('trackpadup', this.onTrackpadUp);\n    el.removeEventListener('trackpadtouchstart', this.onTrackpadTouchStart);\n    el.removeEventListener('trackpadtouchend', this.onTrackpadTouchEnd);\n    el.removeEventListener('triggerdown', this.onTriggerDown);\n    el.removeEventListener('triggerup', this.onTriggerUp);\n    el.removeEventListener('triggertouchstart', this.onTriggerTouchStart);\n    el.removeEventListener('triggertouchend', this.onTriggerTouchEnd);\n    el.removeEventListener('griptouchstart', this.onGripTouchStart);\n    el.removeEventListener('griptouchend', this.onGripTouchEnd);\n    el.removeEventListener('thumbstickdown', this.onThumbstickDown);\n    el.removeEventListener('thumbstickup', this.onThumbstickUp);\n    el.removeEventListener('abuttontouchstart', this.onAorXTouchStart);\n    el.removeEventListener('abuttontouchend', this.onAorXTouchEnd);\n    el.removeEventListener('bbuttontouchstart', this.onBorYTouchStart);\n    el.removeEventListener('bbuttontouchend', this.onBorYTouchEnd);\n    el.removeEventListener('xbuttontouchstart', this.onAorXTouchStart);\n    el.removeEventListener('xbuttontouchend', this.onAorXTouchEnd);\n    el.removeEventListener('ybuttontouchstart', this.onBorYTouchStart);\n    el.removeEventListener('ybuttontouchend', this.onBorYTouchEnd);\n    el.removeEventListener('surfacetouchstart', this.onSurfaceTouchStart);\n    el.removeEventListener('surfacetouchend', this.onSurfaceTouchEnd);\n  },\n\n  /**\n   * Update handler. More like the `init` handler since the only property is the hand, and\n   * that won't be changing much.\n   */\n  update: function (previousHand) {\n    var controlConfiguration;\n    var el = this.el;\n    var hand = this.data;\n    var self = this;\n\n    // Get common configuration to abstract different vendor controls.\n    controlConfiguration = {\n      hand: hand,\n      model: false,\n      orientationOffset: {x: 0, y: 0, z: hand === 'left' ? 90 : -90}\n    };\n\n    // Set model.\n    if (hand !== previousHand) {\n      this.loader.load(MODEL_URLS[hand], function (gltf) {\n        var mesh = gltf.scene.children[0];\n        mesh.mixer = new THREE.AnimationMixer(mesh);\n        self.clips = gltf.animations;\n        el.setObject3D('mesh', mesh);\n        mesh.position.set(0, 0, 0);\n        mesh.rotation.set(0, 0, 0);\n        el.setAttribute('vive-controls', controlConfiguration);\n        el.setAttribute('oculus-touch-controls', controlConfiguration);\n        el.setAttribute('windows-motion-controls', controlConfiguration);\n      });\n    }\n  },\n\n  remove: function () {\n    this.el.removeObject3D('mesh');\n  },\n\n  /**\n   * Play model animation, based on which button was pressed and which kind of event.\n   *\n   * 1. Process buttons.\n   * 2. Determine gesture (this.determineGesture()).\n   * 3. Animation gesture (this.animationGesture()).\n   * 4. Emit gesture events (this.emitGestureEvents()).\n   *\n   * @param {string} button - Name of the button.\n   * @param {string} evt - Type of event for the button (i.e., down/up/touchstart/touchend).\n   */\n  handleButton: function (button, evt) {\n    var lastGesture;\n    var isPressed = evt === 'down';\n    var isTouched = evt === 'touchstart';\n\n    // Update objects.\n    if (evt.indexOf('touch') === 0) {\n      // Update touch object.\n      if (isTouched === this.touchedButtons[button]) { return; }\n      this.touchedButtons[button] = isTouched;\n    } else {\n      // Update button object.\n      if (isPressed === this.pressedButtons[button]) { return; }\n      this.pressedButtons[button] = isPressed;\n    }\n\n    // Determine the gesture.\n    lastGesture = this.gesture;\n    this.gesture = this.determineGesture();\n\n    // Same gesture.\n    if (this.gesture === lastGesture) { return; }\n    // Animate gesture.\n    this.animateGesture(this.gesture, lastGesture);\n\n    // Emit events.\n    this.emitGestureEvents(this.gesture, lastGesture);\n  },\n\n  /**\n   * Determine which pose hand should be in considering active and touched buttons.\n   */\n  determineGesture: function () {\n    var gesture;\n    var isGripActive = this.pressedButtons['grip'];\n    var isSurfaceActive = this.pressedButtons['surface'] || this.touchedButtons['surface'];\n    var isTrackpadActive = this.pressedButtons['trackpad'] || this.touchedButtons['trackpad'];\n    var isTriggerActive = this.pressedButtons['trigger'] || this.touchedButtons['trigger'];\n    var isABXYActive = this.touchedButtons['AorX'] || this.touchedButtons['BorY'];\n    var isVive = isViveController(this.el.components['tracked-controls']);\n\n    // Works well with Oculus Touch and Windows Motion Controls, but Vive needs tweaks.\n    if (isVive) {\n      if (isGripActive || isTriggerActive) {\n        gesture = ANIMATIONS.fist;\n      } else if (isTrackpadActive) {\n        gesture = ANIMATIONS.point;\n      }\n    } else {\n      if (isGripActive) {\n        if (isSurfaceActive || isABXYActive || isTrackpadActive) {\n          gesture = isTriggerActive ? ANIMATIONS.fist : ANIMATIONS.point;\n        } else {\n          gesture = isTriggerActive ? ANIMATIONS.thumbUp : ANIMATIONS.pointThumb;\n        }\n      } else if (isTriggerActive) {\n        gesture = ANIMATIONS.hold;\n      }\n    }\n\n    return gesture;\n  },\n\n  /**\n   * Play corresponding clip to a gesture\n   */\n  getClip: function (gesture) {\n    var clip;\n    var i;\n    for (i = 0; i < this.clips.length; i++) {\n      clip = this.clips[i];\n      if (clip.name !== gesture) { continue; }\n      return clip;\n    }\n  },\n\n  /**\n   * Play gesture animation.\n   *\n   * @param {string} gesture - Which pose to animate to. If absent, then animate to open.\n   * @param {string} lastGesture - Previous gesture, to reverse back to open if needed.\n   */\n  animateGesture: function (gesture, lastGesture) {\n    if (gesture) {\n      this.playAnimation(gesture || ANIMATIONS.open, lastGesture, false);\n      return;\n    }\n\n    // If no gesture, then reverse the current gesture back to open pose.\n    this.playAnimation(lastGesture, lastGesture, true);\n  },\n\n  /**\n   * Emit `hand-controls`-specific events.\n   */\n  emitGestureEvents: function (gesture, lastGesture) {\n    var el = this.el;\n    var eventName;\n\n    if (lastGesture === gesture) { return; }\n\n    // Emit event for lastGesture not inactive.\n    eventName = getGestureEventName(lastGesture, false);\n    if (eventName) { el.emit(eventName); }\n\n    // Emit event for current gesture now active.\n    eventName = getGestureEventName(gesture, true);\n    if (eventName) { el.emit(eventName); }\n  },\n\n/**\n  * Play hand animation based on button state.\n  *\n  * @param {string} gesture - Name of the animation as specified by the model.\n  * @param {string} lastGesture - Previous pose.\n  * @param {boolean} reverse - Whether animation should play in reverse.\n  */\n  playAnimation: function (gesture, lastGesture, reverse) {\n    var clip;\n    var fromAction;\n    var mesh = this.el.getObject3D('mesh');\n    var toAction;\n\n    if (!mesh) { return; }\n\n    // Stop all current animations.\n    mesh.mixer.stopAllAction();\n\n    // Grab clip action.\n    clip = this.getClip(gesture);\n    toAction = mesh.mixer.clipAction(clip);\n    toAction.clampWhenFinished = true;\n    toAction.loop = THREE.LoopRepeat;\n    toAction.repetitions = 0;\n    toAction.timeScale = reverse ? -1 : 1;\n    toAction.time = reverse ? clip.duration : 0;\n    toAction.weight = 1;\n\n    // No gesture to gesture or gesture to no gesture.\n    if (!lastGesture || gesture === lastGesture) {\n      // Stop all current animations.\n      mesh.mixer.stopAllAction();\n      // Play animation.\n      toAction.play();\n      return;\n    }\n\n    // Animate or crossfade from gesture to gesture.\n    clip = this.getClip(lastGesture);\n    fromAction = mesh.mixer.clipAction(clip);\n    fromAction.weight = 0.15;\n    fromAction.play();\n    toAction.play();\n    fromAction.crossFadeTo(toAction, 0.15, true);\n  }\n});\n\n/**\n * Suffix gestures based on toggle state (e.g., open/close, up/down, start/end).\n *\n * @param {string} gesture\n * @param {boolean} active\n */\nfunction getGestureEventName (gesture, active) {\n  var eventName;\n\n  if (!gesture) { return; }\n\n  eventName = EVENTS[gesture];\n  if (eventName === 'grip') {\n    return eventName + (active ? 'close' : 'open');\n  }\n  if (eventName === 'point') {\n    return eventName + (active ? 'up' : 'down');\n  }\n  if (eventName === 'pointing' || eventName === 'pistol') {\n    return eventName + (active ? 'start' : 'end');\n  }\n  return;\n}\n\nfunction isViveController (trackedControls) {\n  var controller = trackedControls && trackedControls.controller;\n  var isVive = controller && (controller.id && controller.id.indexOf('OpenVR ') === 0 ||\n    (controller.profiles &&\n     controller.profiles[0] &&\n     controller.profiles[0] === 'htc-vive-controller-mv'));\n  return isVive;\n}\n"]},"metadata":{},"sourceType":"script"}