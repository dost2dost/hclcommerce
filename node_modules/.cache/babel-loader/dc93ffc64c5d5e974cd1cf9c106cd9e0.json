{"ast":null,"code":"var registerComponent = require('../core/component').registerComponent;\n\nvar THREE = require('../lib/three');\n\nvar utils = require('../utils/');\n\nvar warn = utils.debug('components:gltf-model:warn');\n/**\n * glTF model loader.\n */\n\nmodule.exports.Component = registerComponent('gltf-model', {\n  schema: {\n    type: 'model'\n  },\n  init: function () {\n    var dracoLoader = this.system.getDRACOLoader();\n    this.model = null;\n    this.loader = new THREE.GLTFLoader();\n\n    if (dracoLoader) {\n      this.loader.setDRACOLoader(dracoLoader);\n    }\n  },\n  update: function () {\n    var self = this;\n    var el = this.el;\n    var src = this.data;\n\n    if (!src) {\n      return;\n    }\n\n    this.remove();\n    this.loader.load(src, function gltfLoaded(gltfModel) {\n      self.model = gltfModel.scene || gltfModel.scenes[0];\n      self.model.animations = gltfModel.animations;\n      el.setObject3D('mesh', self.model);\n      el.emit('model-loaded', {\n        format: 'gltf',\n        model: self.model\n      });\n    }, undefined\n    /* onProgress */\n    , function gltfFailed(error) {\n      var message = error && error.message ? error.message : 'Failed to load glTF model';\n      warn(message);\n      el.emit('model-error', {\n        format: 'gltf',\n        src: src\n      });\n    });\n  },\n  remove: function () {\n    if (!this.model) {\n      return;\n    }\n\n    this.el.removeObject3D('mesh');\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/gltf-model.js"],"names":["registerComponent","require","THREE","utils","warn","debug","module","exports","Component","schema","type","init","dracoLoader","system","getDRACOLoader","model","loader","GLTFLoader","setDRACOLoader","update","self","el","src","data","remove","load","gltfLoaded","gltfModel","scene","scenes","animations","setObject3D","emit","format","undefined","gltfFailed","error","message","removeObject3D"],"mappings":"AAAA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,mBAAD,CAAP,CAA6BD,iBAArD;;AACA,IAAIE,KAAK,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,WAAD,CAAnB;;AACA,IAAIG,IAAI,GAAGD,KAAK,CAACE,KAAN,CAAY,4BAAZ,CAAX;AAEA;;;;AAGAC,MAAM,CAACC,OAAP,CAAeC,SAAf,GAA2BR,iBAAiB,CAAC,YAAD,EAAe;AACzDS,EAAAA,MAAM,EAAE;AAACC,IAAAA,IAAI,EAAE;AAAP,GADiD;AAGzDC,EAAAA,IAAI,EAAE,YAAY;AAChB,QAAIC,WAAW,GAAG,KAAKC,MAAL,CAAYC,cAAZ,EAAlB;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,MAAL,GAAc,IAAId,KAAK,CAACe,UAAV,EAAd;;AACA,QAAIL,WAAJ,EAAiB;AACf,WAAKI,MAAL,CAAYE,cAAZ,CAA2BN,WAA3B;AACD;AACF,GAVwD;AAYzDO,EAAAA,MAAM,EAAE,YAAY;AAClB,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIC,EAAE,GAAG,KAAKA,EAAd;AACA,QAAIC,GAAG,GAAG,KAAKC,IAAf;;AAEA,QAAI,CAACD,GAAL,EAAU;AAAE;AAAS;;AAErB,SAAKE,MAAL;AAEA,SAAKR,MAAL,CAAYS,IAAZ,CAAiBH,GAAjB,EAAsB,SAASI,UAAT,CAAqBC,SAArB,EAAgC;AACpDP,MAAAA,IAAI,CAACL,KAAL,GAAaY,SAAS,CAACC,KAAV,IAAmBD,SAAS,CAACE,MAAV,CAAiB,CAAjB,CAAhC;AACAT,MAAAA,IAAI,CAACL,KAAL,CAAWe,UAAX,GAAwBH,SAAS,CAACG,UAAlC;AACAT,MAAAA,EAAE,CAACU,WAAH,CAAe,MAAf,EAAuBX,IAAI,CAACL,KAA5B;AACAM,MAAAA,EAAE,CAACW,IAAH,CAAQ,cAAR,EAAwB;AAACC,QAAAA,MAAM,EAAE,MAAT;AAAiBlB,QAAAA,KAAK,EAAEK,IAAI,CAACL;AAA7B,OAAxB;AACD,KALD,EAKGmB;AAAU;AALb,MAK+B,SAASC,UAAT,CAAqBC,KAArB,EAA4B;AACzD,UAAIC,OAAO,GAAID,KAAK,IAAIA,KAAK,CAACC,OAAhB,GAA2BD,KAAK,CAACC,OAAjC,GAA2C,2BAAzD;AACAjC,MAAAA,IAAI,CAACiC,OAAD,CAAJ;AACAhB,MAAAA,EAAE,CAACW,IAAH,CAAQ,aAAR,EAAuB;AAACC,QAAAA,MAAM,EAAE,MAAT;AAAiBX,QAAAA,GAAG,EAAEA;AAAtB,OAAvB;AACD,KATD;AAUD,GA/BwD;AAiCzDE,EAAAA,MAAM,EAAE,YAAY;AAClB,QAAI,CAAC,KAAKT,KAAV,EAAiB;AAAE;AAAS;;AAC5B,SAAKM,EAAL,CAAQiB,cAAR,CAAuB,MAAvB;AACD;AApCwD,CAAf,CAA5C","sourcesContent":["var registerComponent = require('../core/component').registerComponent;\nvar THREE = require('../lib/three');\nvar utils = require('../utils/');\nvar warn = utils.debug('components:gltf-model:warn');\n\n/**\n * glTF model loader.\n */\nmodule.exports.Component = registerComponent('gltf-model', {\n  schema: {type: 'model'},\n\n  init: function () {\n    var dracoLoader = this.system.getDRACOLoader();\n    this.model = null;\n    this.loader = new THREE.GLTFLoader();\n    if (dracoLoader) {\n      this.loader.setDRACOLoader(dracoLoader);\n    }\n  },\n\n  update: function () {\n    var self = this;\n    var el = this.el;\n    var src = this.data;\n\n    if (!src) { return; }\n\n    this.remove();\n\n    this.loader.load(src, function gltfLoaded (gltfModel) {\n      self.model = gltfModel.scene || gltfModel.scenes[0];\n      self.model.animations = gltfModel.animations;\n      el.setObject3D('mesh', self.model);\n      el.emit('model-loaded', {format: 'gltf', model: self.model});\n    }, undefined /* onProgress */, function gltfFailed (error) {\n      var message = (error && error.message) ? error.message : 'Failed to load glTF model';\n      warn(message);\n      el.emit('model-error', {format: 'gltf', src: src});\n    });\n  },\n\n  remove: function () {\n    if (!this.model) { return; }\n    this.el.removeObject3D('mesh');\n  }\n});\n"]},"metadata":{},"sourceType":"script"}