{"ast":null,"code":"var registerShader = require('../core/shader').registerShader;\n\nvar THREE = require('../lib/three');\n\nvar utils = require('../utils/');\n/**\n * Flat shader using THREE.MeshBasicMaterial.\n */\n\n\nmodule.exports.Shader = registerShader('flat', {\n  schema: {\n    color: {\n      type: 'color'\n    },\n    fog: {\n      default: true\n    },\n    height: {\n      default: 256\n    },\n    offset: {\n      type: 'vec2',\n      default: {\n        x: 0,\n        y: 0\n      }\n    },\n    repeat: {\n      type: 'vec2',\n      default: {\n        x: 1,\n        y: 1\n      }\n    },\n    src: {\n      type: 'map'\n    },\n    width: {\n      default: 512\n    },\n    wireframe: {\n      default: false\n    },\n    wireframeLinewidth: {\n      default: 2\n    }\n  },\n\n  /**\n   * Initializes the shader.\n   * Adds a reference from the scene to this entity as the camera.\n   */\n  init: function (data) {\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n    this.materialData = {\n      color: new THREE.Color()\n    };\n    this.textureSrc = null;\n    getMaterialData(data, this.materialData);\n    this.rendererSystem.applyColorCorrection(this.materialData.color);\n    this.material = new THREE.MeshBasicMaterial(this.materialData);\n    utils.material.updateMap(this, data);\n  },\n  update: function (data) {\n    this.updateMaterial(data);\n    utils.material.updateMap(this, data);\n  },\n\n  /**\n   * Updating existing material.\n   *\n   * @param {object} data - Material component data.\n   */\n  updateMaterial: function (data) {\n    var key;\n    getMaterialData(data, this.materialData);\n    this.rendererSystem.applyColorCorrection(this.materialData.color);\n\n    for (key in this.materialData) {\n      this.material[key] = this.materialData[key];\n    }\n  }\n});\n/**\n * Builds and normalize material data, normalizing stuff along the way.\n *\n * @param {object} data - Material data.\n * @param {object} materialData - Object to reuse.\n * @returns {object} Updated material data.\n */\n\nfunction getMaterialData(data, materialData) {\n  materialData.color.set(data.color);\n  materialData.fog = data.fog;\n  materialData.wireframe = data.wireframe;\n  materialData.wireframeLinewidth = data.wireframeLinewidth;\n  return materialData;\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/shaders/flat.js"],"names":["registerShader","require","THREE","utils","module","exports","Shader","schema","color","type","fog","default","height","offset","x","y","repeat","src","width","wireframe","wireframeLinewidth","init","data","rendererSystem","el","sceneEl","systems","renderer","materialData","Color","textureSrc","getMaterialData","applyColorCorrection","material","MeshBasicMaterial","updateMap","update","updateMaterial","key","set"],"mappings":"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","sourcesContent":["var registerShader = require('../core/shader').registerShader;\nvar THREE = require('../lib/three');\nvar utils = require('../utils/');\n\n/**\n * Flat shader using THREE.MeshBasicMaterial.\n */\nmodule.exports.Shader = registerShader('flat', {\n  schema: {\n    color: {type: 'color'},\n    fog: {default: true},\n    height: {default: 256},\n    offset: {type: 'vec2', default: {x: 0, y: 0}},\n    repeat: {type: 'vec2', default: {x: 1, y: 1}},\n    src: {type: 'map'},\n    width: {default: 512},\n    wireframe: {default: false},\n    wireframeLinewidth: {default: 2}\n  },\n\n  /**\n   * Initializes the shader.\n   * Adds a reference from the scene to this entity as the camera.\n   */\n  init: function (data) {\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n    this.materialData = {color: new THREE.Color()};\n    this.textureSrc = null;\n    getMaterialData(data, this.materialData);\n    this.rendererSystem.applyColorCorrection(this.materialData.color);\n    this.material = new THREE.MeshBasicMaterial(this.materialData);\n    utils.material.updateMap(this, data);\n  },\n\n  update: function (data) {\n    this.updateMaterial(data);\n    utils.material.updateMap(this, data);\n  },\n\n  /**\n   * Updating existing material.\n   *\n   * @param {object} data - Material component data.\n   */\n  updateMaterial: function (data) {\n    var key;\n    getMaterialData(data, this.materialData);\n    this.rendererSystem.applyColorCorrection(this.materialData.color);\n    for (key in this.materialData) {\n      this.material[key] = this.materialData[key];\n    }\n  }\n});\n\n/**\n * Builds and normalize material data, normalizing stuff along the way.\n *\n * @param {object} data - Material data.\n * @param {object} materialData - Object to reuse.\n * @returns {object} Updated material data.\n */\nfunction getMaterialData (data, materialData) {\n  materialData.color.set(data.color);\n  materialData.fog = data.fog;\n  materialData.wireframe = data.wireframe;\n  materialData.wireframeLinewidth = data.wireframeLinewidth;\n  return materialData;\n}\n"]},"metadata":{},"sourceType":"script"}