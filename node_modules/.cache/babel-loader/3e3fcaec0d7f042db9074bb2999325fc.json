{"ast":null,"code":"/* global THREE */\nvar utils = require('../../utils/');\n\nvar styleParser = utils.styleParser;\nvar sceneEl;\nvar titleEl;\nvar getSceneCanvasSize;\nvar ATTR_NAME = 'loading-screen';\nvar LOADER_TITLE_CLASS = 'a-loader-title';\n\nmodule.exports.setup = function setup(el, getCanvasSize) {\n  sceneEl = el;\n  getSceneCanvasSize = getCanvasSize;\n  var loaderAttribute = sceneEl.hasAttribute(ATTR_NAME) ? styleParser.parse(sceneEl.getAttribute(ATTR_NAME)) : undefined;\n  var dotsColor = loaderAttribute && loaderAttribute.dotsColor || 'white';\n  var backgroundColor = loaderAttribute && loaderAttribute.backgroundColor || '#24CAFF';\n  var loaderEnabled = loaderAttribute === undefined || loaderAttribute.enabled === 'true' || loaderAttribute.enabled === undefined; // true default\n\n  var loaderScene;\n  var sphereGeometry;\n  var sphereMaterial;\n  var sphereMesh1;\n  var sphereMesh2;\n  var sphereMesh3;\n  var camera;\n  var clock;\n  var time;\n  var render;\n\n  if (!loaderEnabled) {\n    return;\n  } // Setup Scene.\n\n\n  loaderScene = new THREE.Scene();\n  sphereGeometry = new THREE.SphereGeometry(0.20, 36, 18, 0, 2 * Math.PI, 0, Math.PI);\n  sphereMaterial = new THREE.MeshBasicMaterial({\n    color: dotsColor\n  });\n  sphereMesh1 = new THREE.Mesh(sphereGeometry, sphereMaterial);\n  sphereMesh2 = sphereMesh1.clone();\n  sphereMesh3 = sphereMesh1.clone();\n  camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.0005, 10000);\n  clock = new THREE.Clock();\n  time = 0;\n\n  render = function () {\n    sceneEl.renderer.render(loaderScene, camera);\n    time = clock.getElapsedTime() % 4;\n    sphereMesh1.visible = time >= 1;\n    sphereMesh2.visible = time >= 2;\n    sphereMesh3.visible = time >= 3;\n  };\n\n  loaderScene.background = new THREE.Color(backgroundColor);\n  loaderScene.add(camera);\n  sphereMesh1.position.set(-1, 0, -15);\n  sphereMesh2.position.set(0, 0, -15);\n  sphereMesh3.position.set(1, 0, -15);\n  camera.add(sphereMesh1);\n  camera.add(sphereMesh2);\n  camera.add(sphereMesh3);\n  setupTitle(); // Delay 200ms to avoid loader flashes.\n\n  setTimeout(function () {\n    if (sceneEl.hasLoaded) {\n      return;\n    }\n\n    resize(camera);\n    titleEl.style.display = 'block';\n    window.addEventListener('resize', function () {\n      resize(camera);\n    });\n    sceneEl.renderer.setAnimationLoop(render);\n  }, 200);\n};\n\nmodule.exports.remove = function remove() {\n  window.removeEventListener('resize', resize);\n\n  if (!titleEl) {\n    return;\n  } // Hide title.\n\n\n  titleEl.style.display = 'none';\n};\n\nfunction resize(camera) {\n  var embedded = sceneEl.hasAttribute('embedded');\n  var size = getSceneCanvasSize(sceneEl.canvas, embedded, sceneEl.maxCanvasSize, sceneEl.is('vr-mode'));\n  camera.aspect = size.width / size.height;\n  camera.updateProjectionMatrix(); // Notify renderer of size change.\n\n  sceneEl.renderer.setSize(size.width, size.height, false);\n}\n\nfunction setupTitle() {\n  titleEl = document.createElement('div');\n  titleEl.className = LOADER_TITLE_CLASS;\n  titleEl.innerHTML = document.title;\n  titleEl.style.display = 'none';\n  sceneEl.appendChild(titleEl);\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/core/scene/loadingScreen.js"],"names":["utils","require","styleParser","sceneEl","titleEl","getSceneCanvasSize","ATTR_NAME","LOADER_TITLE_CLASS","module","exports","setup","el","getCanvasSize","loaderAttribute","hasAttribute","parse","getAttribute","undefined","dotsColor","backgroundColor","loaderEnabled","enabled","loaderScene","sphereGeometry","sphereMaterial","sphereMesh1","sphereMesh2","sphereMesh3","camera","clock","time","render","THREE","Scene","SphereGeometry","Math","PI","MeshBasicMaterial","color","Mesh","clone","PerspectiveCamera","window","innerWidth","innerHeight","Clock","renderer","getElapsedTime","visible","background","Color","add","position","set","setupTitle","setTimeout","hasLoaded","resize","style","display","addEventListener","setAnimationLoop","remove","removeEventListener","embedded","size","canvas","maxCanvasSize","is","aspect","width","height","updateProjectionMatrix","setSize","document","createElement","className","innerHTML","title","appendChild"],"mappings":"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","sourcesContent":["/* global THREE */\nvar utils = require('../../utils/');\nvar styleParser = utils.styleParser;\n\nvar sceneEl;\nvar titleEl;\nvar getSceneCanvasSize;\n\nvar ATTR_NAME = 'loading-screen';\nvar LOADER_TITLE_CLASS = 'a-loader-title';\n\nmodule.exports.setup = function setup (el, getCanvasSize) {\n  sceneEl = el;\n  getSceneCanvasSize = getCanvasSize;\n  var loaderAttribute = sceneEl.hasAttribute(ATTR_NAME) ? styleParser.parse(sceneEl.getAttribute(ATTR_NAME)) : undefined;\n  var dotsColor = loaderAttribute && loaderAttribute.dotsColor || 'white';\n  var backgroundColor = loaderAttribute && loaderAttribute.backgroundColor || '#24CAFF';\n  var loaderEnabled = loaderAttribute === undefined || loaderAttribute.enabled === 'true' || loaderAttribute.enabled === undefined; // true default\n  var loaderScene;\n  var sphereGeometry;\n  var sphereMaterial;\n  var sphereMesh1;\n  var sphereMesh2;\n  var sphereMesh3;\n  var camera;\n  var clock;\n  var time;\n  var render;\n\n  if (!loaderEnabled) { return; }\n\n  // Setup Scene.\n  loaderScene = new THREE.Scene();\n  sphereGeometry = new THREE.SphereGeometry(0.20, 36, 18, 0, 2 * Math.PI, 0, Math.PI);\n  sphereMaterial = new THREE.MeshBasicMaterial({color: dotsColor});\n  sphereMesh1 = new THREE.Mesh(sphereGeometry, sphereMaterial);\n  sphereMesh2 = sphereMesh1.clone();\n  sphereMesh3 = sphereMesh1.clone();\n  camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.0005, 10000);\n  clock = new THREE.Clock();\n  time = 0;\n  render = function () {\n    sceneEl.renderer.render(loaderScene, camera);\n    time = clock.getElapsedTime() % 4;\n    sphereMesh1.visible = time >= 1;\n    sphereMesh2.visible = time >= 2;\n    sphereMesh3.visible = time >= 3;\n  };\n\n  loaderScene.background = new THREE.Color(backgroundColor);\n  loaderScene.add(camera);\n  sphereMesh1.position.set(-1, 0, -15);\n  sphereMesh2.position.set(0, 0, -15);\n  sphereMesh3.position.set(1, 0, -15);\n  camera.add(sphereMesh1);\n  camera.add(sphereMesh2);\n  camera.add(sphereMesh3);\n  setupTitle();\n\n  // Delay 200ms to avoid loader flashes.\n  setTimeout(function () {\n    if (sceneEl.hasLoaded) { return; }\n    resize(camera);\n    titleEl.style.display = 'block';\n    window.addEventListener('resize', function () { resize(camera); });\n    sceneEl.renderer.setAnimationLoop(render);\n  }, 200);\n};\n\nmodule.exports.remove = function remove () {\n  window.removeEventListener('resize', resize);\n  if (!titleEl) { return; }\n  // Hide title.\n  titleEl.style.display = 'none';\n};\n\nfunction resize (camera) {\n  var embedded = sceneEl.hasAttribute('embedded');\n  var size = getSceneCanvasSize(sceneEl.canvas, embedded, sceneEl.maxCanvasSize, sceneEl.is('vr-mode'));\n  camera.aspect = size.width / size.height;\n  camera.updateProjectionMatrix();\n   // Notify renderer of size change.\n  sceneEl.renderer.setSize(size.width, size.height, false);\n}\n\nfunction setupTitle () {\n  titleEl = document.createElement('div');\n  titleEl.className = LOADER_TITLE_CLASS;\n  titleEl.innerHTML = document.title;\n  titleEl.style.display = 'none';\n  sceneEl.appendChild(titleEl);\n}\n"]},"metadata":{},"sourceType":"script"}