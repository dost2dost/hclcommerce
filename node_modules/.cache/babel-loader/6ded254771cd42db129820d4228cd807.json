{"ast":null,"code":"var registerSystem = require('../core/system').registerSystem;\n\nvar THREE = require('../lib/three');\n\nvar SHADOW_MAP_TYPE_MAP = {\n  basic: THREE.BasicShadowMap,\n  pcf: THREE.PCFShadowMap,\n  pcfsoft: THREE.PCFSoftShadowMap\n};\n/**\n * Shadow system.\n *\n * Enabled automatically when one or more shadow components are added to the scene, the system sets\n * options on the WebGLRenderer for configuring shadow appearance.\n */\n\nmodule.exports.System = registerSystem('shadow', {\n  schema: {\n    enabled: {\n      default: true\n    },\n    autoUpdate: {\n      default: true\n    },\n    type: {\n      default: 'pcf',\n      oneOf: ['basic', 'pcf', 'pcfsoft']\n    }\n  },\n  init: function () {\n    var sceneEl = this.sceneEl;\n    var data = this.data;\n    this.shadowMapEnabled = false;\n\n    if (!sceneEl.renderer) {\n      return;\n    } // For tests.\n\n\n    sceneEl.renderer.shadowMap.type = SHADOW_MAP_TYPE_MAP[data.type];\n    sceneEl.renderer.shadowMap.autoUpdate = data.autoUpdate;\n    this.setShadowMapEnabled(this.shadowMapEnabled);\n  },\n  update: function (prevData) {\n    if (prevData.enabled !== this.data.enabled) {\n      this.setShadowMapEnabled(this.data.enabled);\n    }\n  },\n\n  /**\n   * Enables/disables the renderer shadow map.\n   * @param {boolean} enabled\n   */\n  setShadowMapEnabled: function (enabled) {\n    var renderer = this.sceneEl.renderer;\n    this.shadowMapEnabled = this.data.enabled && enabled;\n\n    if (renderer) {\n      renderer.shadowMap.enabled = this.shadowMapEnabled;\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/systems/shadow.js"],"names":["registerSystem","require","THREE","SHADOW_MAP_TYPE_MAP","basic","BasicShadowMap","pcf","PCFShadowMap","pcfsoft","PCFSoftShadowMap","module","exports","System","schema","enabled","default","autoUpdate","type","oneOf","init","sceneEl","data","shadowMapEnabled","renderer","shadowMap","setShadowMapEnabled","update","prevData"],"mappings":"AAAA,IAAIA,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BD,cAA/C;;AACA,IAAIE,KAAK,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AAEA,IAAIE,mBAAmB,GAAG;AACxBC,EAAAA,KAAK,EAAEF,KAAK,CAACG,cADW;AAExBC,EAAAA,GAAG,EAAEJ,KAAK,CAACK,YAFa;AAGxBC,EAAAA,OAAO,EAAEN,KAAK,CAACO;AAHS,CAA1B;AAMA;;;;;;;AAMAC,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwBZ,cAAc,CAAC,QAAD,EAAW;AAC/Ca,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV,KADH;AAENC,IAAAA,UAAU,EAAE;AAACD,MAAAA,OAAO,EAAE;AAAV,KAFN;AAGNE,IAAAA,IAAI,EAAE;AAACF,MAAAA,OAAO,EAAE,KAAV;AAAiBG,MAAAA,KAAK,EAAE,CAAC,OAAD,EAAU,KAAV,EAAiB,SAAjB;AAAxB;AAHA,GADuC;AAO/CC,EAAAA,IAAI,EAAE,YAAY;AAChB,QAAIC,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIC,IAAI,GAAG,KAAKA,IAAhB;AAEA,SAAKC,gBAAL,GAAwB,KAAxB;;AAEA,QAAI,CAACF,OAAO,CAACG,QAAb,EAAuB;AAAE;AAAS,KANlB,CAMoB;;;AAEpCH,IAAAA,OAAO,CAACG,QAAR,CAAiBC,SAAjB,CAA2BP,IAA3B,GAAkCd,mBAAmB,CAACkB,IAAI,CAACJ,IAAN,CAArD;AACAG,IAAAA,OAAO,CAACG,QAAR,CAAiBC,SAAjB,CAA2BR,UAA3B,GAAwCK,IAAI,CAACL,UAA7C;AACA,SAAKS,mBAAL,CAAyB,KAAKH,gBAA9B;AACD,GAlB8C;AAoB/CI,EAAAA,MAAM,EAAE,UAAUC,QAAV,EAAoB;AAC1B,QAAIA,QAAQ,CAACb,OAAT,KAAqB,KAAKO,IAAL,CAAUP,OAAnC,EAA4C;AAC1C,WAAKW,mBAAL,CAAyB,KAAKJ,IAAL,CAAUP,OAAnC;AACD;AACF,GAxB8C;;AA0B/C;;;;AAIAW,EAAAA,mBAAmB,EAAE,UAAUX,OAAV,EAAmB;AACtC,QAAIS,QAAQ,GAAG,KAAKH,OAAL,CAAaG,QAA5B;AACA,SAAKD,gBAAL,GAAwB,KAAKD,IAAL,CAAUP,OAAV,IAAqBA,OAA7C;;AACA,QAAIS,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACC,SAAT,CAAmBV,OAAnB,GAA6B,KAAKQ,gBAAlC;AACD;AACF;AApC8C,CAAX,CAAtC","sourcesContent":["var registerSystem = require('../core/system').registerSystem;\nvar THREE = require('../lib/three');\n\nvar SHADOW_MAP_TYPE_MAP = {\n  basic: THREE.BasicShadowMap,\n  pcf: THREE.PCFShadowMap,\n  pcfsoft: THREE.PCFSoftShadowMap\n};\n\n/**\n * Shadow system.\n *\n * Enabled automatically when one or more shadow components are added to the scene, the system sets\n * options on the WebGLRenderer for configuring shadow appearance.\n */\nmodule.exports.System = registerSystem('shadow', {\n  schema: {\n    enabled: {default: true},\n    autoUpdate: {default: true},\n    type: {default: 'pcf', oneOf: ['basic', 'pcf', 'pcfsoft']}\n  },\n\n  init: function () {\n    var sceneEl = this.sceneEl;\n    var data = this.data;\n\n    this.shadowMapEnabled = false;\n\n    if (!sceneEl.renderer) { return; }  // For tests.\n\n    sceneEl.renderer.shadowMap.type = SHADOW_MAP_TYPE_MAP[data.type];\n    sceneEl.renderer.shadowMap.autoUpdate = data.autoUpdate;\n    this.setShadowMapEnabled(this.shadowMapEnabled);\n  },\n\n  update: function (prevData) {\n    if (prevData.enabled !== this.data.enabled) {\n      this.setShadowMapEnabled(this.data.enabled);\n    }\n  },\n\n  /**\n   * Enables/disables the renderer shadow map.\n   * @param {boolean} enabled\n   */\n  setShadowMapEnabled: function (enabled) {\n    var renderer = this.sceneEl.renderer;\n    this.shadowMapEnabled = this.data.enabled && enabled;\n    if (renderer) {\n      renderer.shadowMap.enabled = this.shadowMapEnabled;\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}