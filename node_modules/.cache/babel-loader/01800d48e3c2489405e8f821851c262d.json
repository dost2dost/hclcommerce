{"ast":null,"code":"var registerComponent = require('../../core/component').registerComponent;\n\nvar THREE = require('../../lib/three');\n\nvar originalPosition = new THREE.Vector3();\nvar originalRotation = new THREE.Vector3();\n/**\n * Wrap el.object3D within an outer group. Apply pivot to el.object3D as position.\n */\n\nregisterComponent('pivot', {\n  dependencies: ['position'],\n  schema: {\n    type: 'vec3'\n  },\n  init: function () {\n    var data = this.data;\n    var el = this.el;\n    var originalParent = el.object3D.parent;\n    var originalGroup = el.object3D;\n    var outerGroup = new THREE.Group();\n    originalPosition.copy(originalGroup.position);\n    originalRotation.copy(originalGroup.rotation); // Detach current group from parent.\n\n    originalParent.remove(originalGroup);\n    outerGroup.add(originalGroup); // Set new group as the outer group.\n\n    originalParent.add(outerGroup); // Set outer group as new object3D.\n\n    el.object3D = outerGroup; // Apply pivot to original group.\n\n    originalGroup.position.set(-1 * data.x, -1 * data.y, -1 * data.z); // Offset the pivot so that world position not affected.\n    // And restore position onto outer group.\n\n    outerGroup.position.set(data.x + originalPosition.x, data.y + originalPosition.y, data.z + originalPosition.z); // Transfer rotation to outer group.\n\n    outerGroup.rotation.copy(originalGroup.rotation);\n    originalGroup.rotation.set(0, 0, 0);\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/extras/components/pivot.js"],"names":["registerComponent","require","THREE","originalPosition","Vector3","originalRotation","dependencies","schema","type","init","data","el","originalParent","object3D","parent","originalGroup","outerGroup","Group","copy","position","rotation","remove","add","set","x","y","z"],"mappings":"AAAA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,sBAAD,CAAP,CAAgCD,iBAAxD;;AACA,IAAIE,KAAK,GAAGD,OAAO,CAAC,iBAAD,CAAnB;;AAEA,IAAIE,gBAAgB,GAAG,IAAID,KAAK,CAACE,OAAV,EAAvB;AACA,IAAIC,gBAAgB,GAAG,IAAIH,KAAK,CAACE,OAAV,EAAvB;AAEA;;;;AAGAJ,iBAAiB,CAAC,OAAD,EAAU;AACzBM,EAAAA,YAAY,EAAE,CAAC,UAAD,CADW;AAGzBC,EAAAA,MAAM,EAAE;AAACC,IAAAA,IAAI,EAAE;AAAP,GAHiB;AAKzBC,EAAAA,IAAI,EAAE,YAAY;AAChB,QAAIC,IAAI,GAAG,KAAKA,IAAhB;AACA,QAAIC,EAAE,GAAG,KAAKA,EAAd;AACA,QAAIC,cAAc,GAAGD,EAAE,CAACE,QAAH,CAAYC,MAAjC;AACA,QAAIC,aAAa,GAAGJ,EAAE,CAACE,QAAvB;AACA,QAAIG,UAAU,GAAG,IAAId,KAAK,CAACe,KAAV,EAAjB;AAEAd,IAAAA,gBAAgB,CAACe,IAAjB,CAAsBH,aAAa,CAACI,QAApC;AACAd,IAAAA,gBAAgB,CAACa,IAAjB,CAAsBH,aAAa,CAACK,QAApC,EARgB,CAUhB;;AACAR,IAAAA,cAAc,CAACS,MAAf,CAAsBN,aAAtB;AACAC,IAAAA,UAAU,CAACM,GAAX,CAAeP,aAAf,EAZgB,CAchB;;AACAH,IAAAA,cAAc,CAACU,GAAf,CAAmBN,UAAnB,EAfgB,CAiBhB;;AACAL,IAAAA,EAAE,CAACE,QAAH,GAAcG,UAAd,CAlBgB,CAoBhB;;AACAD,IAAAA,aAAa,CAACI,QAAd,CAAuBI,GAAvB,CAA2B,CAAC,CAAD,GAAKb,IAAI,CAACc,CAArC,EAAwC,CAAC,CAAD,GAAKd,IAAI,CAACe,CAAlD,EAAqD,CAAC,CAAD,GAAKf,IAAI,CAACgB,CAA/D,EArBgB,CAuBhB;AACA;;AACAV,IAAAA,UAAU,CAACG,QAAX,CAAoBI,GAApB,CAAwBb,IAAI,CAACc,CAAL,GAASrB,gBAAgB,CAACqB,CAAlD,EAAqDd,IAAI,CAACe,CAAL,GAAStB,gBAAgB,CAACsB,CAA/E,EACwBf,IAAI,CAACgB,CAAL,GAASvB,gBAAgB,CAACuB,CADlD,EAzBgB,CA4BhB;;AACAV,IAAAA,UAAU,CAACI,QAAX,CAAoBF,IAApB,CAAyBH,aAAa,CAACK,QAAvC;AACAL,IAAAA,aAAa,CAACK,QAAd,CAAuBG,GAAvB,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC;AACD;AApCwB,CAAV,CAAjB","sourcesContent":["var registerComponent = require('../../core/component').registerComponent;\nvar THREE = require('../../lib/three');\n\nvar originalPosition = new THREE.Vector3();\nvar originalRotation = new THREE.Vector3();\n\n/**\n * Wrap el.object3D within an outer group. Apply pivot to el.object3D as position.\n */\nregisterComponent('pivot', {\n  dependencies: ['position'],\n\n  schema: {type: 'vec3'},\n\n  init: function () {\n    var data = this.data;\n    var el = this.el;\n    var originalParent = el.object3D.parent;\n    var originalGroup = el.object3D;\n    var outerGroup = new THREE.Group();\n\n    originalPosition.copy(originalGroup.position);\n    originalRotation.copy(originalGroup.rotation);\n\n    // Detach current group from parent.\n    originalParent.remove(originalGroup);\n    outerGroup.add(originalGroup);\n\n    // Set new group as the outer group.\n    originalParent.add(outerGroup);\n\n    // Set outer group as new object3D.\n    el.object3D = outerGroup;\n\n    // Apply pivot to original group.\n    originalGroup.position.set(-1 * data.x, -1 * data.y, -1 * data.z);\n\n    // Offset the pivot so that world position not affected.\n    // And restore position onto outer group.\n    outerGroup.position.set(data.x + originalPosition.x, data.y + originalPosition.y,\n                            data.z + originalPosition.z);\n\n    // Transfer rotation to outer group.\n    outerGroup.rotation.copy(originalGroup.rotation);\n    originalGroup.rotation.set(0, 0, 0);\n  }\n});\n"]},"metadata":{},"sourceType":"script"}