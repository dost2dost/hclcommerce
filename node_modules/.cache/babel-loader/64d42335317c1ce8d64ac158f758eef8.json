{"ast":null,"code":"/* global Promise, screen, CustomEvent */\nvar initMetaTags = require('./metaTags').inject;\n\nvar initWakelock = require('./wakelock');\n\nvar loadingScreen = require('./loadingScreen');\n\nvar re = require('../a-register-element');\n\nvar scenes = require('./scenes');\n\nvar systems = require('../system').systems;\n\nvar THREE = require('../../lib/three');\n\nvar utils = require('../../utils/'); // Require after.\n\n\nvar AEntity = require('../a-entity');\n\nvar ANode = require('../a-node');\n\nvar initPostMessageAPI = require('./postMessage');\n\nvar bind = utils.bind;\nvar isIOS = utils.device.isIOS();\nvar isMobile = utils.device.isMobile();\nvar isWebXRAvailable = utils.device.isWebXRAvailable;\nvar registerElement = re.registerElement;\nvar warn = utils.debug('core:a-scene:warn');\n/**\n * Scene element, holds all entities.\n *\n * @member {array} behaviors - Component instances that have registered themselves to be\n           updated on every tick.\n * @member {object} camera - three.js Camera object.\n * @member {object} canvas\n * @member {bool} isScene - Differentiates as scene entity as opposed to other entites.\n * @member {bool} isMobile - Whether browser is mobile (via UA detection).\n * @member {object} object3D - Root three.js Scene object.\n * @member {object} renderer\n * @member {bool} renderStarted\n * @member {object} systems - Registered instantiated systems.\n * @member {number} time\n */\n\nmodule.exports.AScene = registerElement('a-scene', {\n  prototype: Object.create(AEntity.prototype, {\n    createdCallback: {\n      value: function () {\n        this.clock = new THREE.Clock();\n        this.isIOS = isIOS;\n        this.isMobile = isMobile;\n        this.hasWebXR = isWebXRAvailable;\n        this.isAR = false;\n        this.isScene = true;\n        this.object3D = new THREE.Scene();\n        var self = this;\n\n        this.object3D.onAfterRender = function (renderer, scene, camera) {\n          // THREE may swap the camera used for the rendering if in VR, so we pass it to tock\n          if (self.isPlaying) {\n            self.tock(self.time, self.delta, camera);\n          }\n        };\n\n        this.render = bind(this.render, this);\n        this.systems = {};\n        this.systemNames = [];\n        this.time = this.delta = 0;\n        this.behaviors = {\n          tick: [],\n          tock: []\n        };\n        this.hasLoaded = false;\n        this.isPlaying = false;\n        this.originalHTML = this.innerHTML; // Default components.\n\n        this.setAttribute('inspector', '');\n        this.setAttribute('keyboard-shortcuts', '');\n        this.setAttribute('screenshot', '');\n        this.setAttribute('vr-mode-ui', '');\n        this.setAttribute('device-orientation-permission-ui', '');\n      }\n    },\n    addFullScreenStyles: {\n      value: function () {\n        document.documentElement.classList.add('a-fullscreen');\n      }\n    },\n    removeFullScreenStyles: {\n      value: function () {\n        document.documentElement.classList.remove('a-fullscreen');\n      }\n    },\n    attachedCallback: {\n      value: function () {\n        var self = this;\n        var embedded = this.hasAttribute('embedded'); // Renderer initialization\n\n        setupCanvas(this);\n        this.setupRenderer();\n        this.resize();\n\n        if (!embedded) {\n          this.addFullScreenStyles();\n        }\n\n        initPostMessageAPI(this);\n        initMetaTags(this);\n        initWakelock(this); // Handler to exit VR (e.g., Oculus Browser back button).\n\n        this.onVRPresentChangeBound = bind(this.onVRPresentChange, this);\n        window.addEventListener('vrdisplaypresentchange', this.onVRPresentChangeBound); // Bind functions.\n\n        this.enterVRBound = function () {\n          self.enterVR();\n        };\n\n        this.exitVRBound = function () {\n          self.exitVR();\n        };\n\n        this.exitVRTrueBound = function () {\n          self.exitVR(true);\n        };\n\n        this.pointerRestrictedBound = function () {\n          self.pointerRestricted();\n        };\n\n        this.pointerUnrestrictedBound = function () {\n          self.pointerUnrestricted();\n        };\n\n        if (!isWebXRAvailable) {\n          // Exit VR on `vrdisplaydeactivate` (e.g. taking off Rift headset).\n          window.addEventListener('vrdisplaydeactivate', this.exitVRBound); // Exit VR on `vrdisplaydisconnect` (e.g. unplugging Rift headset).\n\n          window.addEventListener('vrdisplaydisconnect', this.exitVRTrueBound); // Register for mouse restricted events while in VR\n          // (e.g. mouse no longer available on desktop 2D view)\n\n          window.addEventListener('vrdisplaypointerrestricted', this.pointerRestrictedBound); // Register for mouse unrestricted events while in VR\n          // (e.g. mouse once again available on desktop 2D view)\n\n          window.addEventListener('vrdisplaypointerunrestricted', this.pointerUnrestrictedBound);\n        } // Camera set up by camera system.\n\n\n        this.addEventListener('cameraready', function () {\n          self.attachedCallbackPostCamera();\n        });\n        this.initSystems();\n      }\n    },\n    attachedCallbackPostCamera: {\n      value: function () {\n        var resize;\n        var self = this;\n        resize = bind(this.resize, this);\n        window.addEventListener('load', resize);\n        window.addEventListener('resize', function () {\n          // Workaround for a Webkit bug (https://bugs.webkit.org/show_bug.cgi?id=170595)\n          // where the window does not contain the correct viewport size\n          // after an orientation change. The window size is correct if the operation\n          // is postponed a few milliseconds.\n          // self.resize can be called directly once the bug above is fixed.\n          if (self.isIOS) {\n            setTimeout(resize, 100);\n          } else {\n            resize();\n          }\n        });\n        this.play(); // Add to scene index.\n\n        scenes.push(this);\n      },\n      writable: window.debug\n    },\n\n    /**\n     * Initialize all systems.\n     */\n    initSystems: {\n      value: function () {\n        var name; // Initialize camera system first.\n\n        this.initSystem('camera');\n\n        for (name in systems) {\n          if (name === 'camera') {\n            continue;\n          }\n\n          this.initSystem(name);\n        }\n      }\n    },\n\n    /**\n     * Initialize a system.\n     */\n    initSystem: {\n      value: function (name) {\n        if (this.systems[name]) {\n          return;\n        }\n\n        this.systems[name] = new systems[name](this);\n        this.systemNames.push(name);\n      }\n    },\n\n    /**\n     * Shut down scene on detach.\n     */\n    detachedCallback: {\n      value: function () {\n        // Remove from scene index.\n        var sceneIndex = scenes.indexOf(this);\n        scenes.splice(sceneIndex, 1);\n        window.removeEventListener('vrdisplaypresentchange', this.onVRPresentChangeBound);\n        window.removeEventListener('vrdisplayactivate', this.enterVRBound);\n        window.removeEventListener('vrdisplaydeactivate', this.exitVRBound);\n        window.removeEventListener('vrdisplayconnect', this.enterVRBound);\n        window.removeEventListener('vrdisplaydisconnect', this.exitVRTrueBound);\n        window.removeEventListener('vrdisplaypointerrestricted', this.pointerRestrictedBound);\n        window.removeEventListener('vrdisplaypointerunrestricted', this.pointerUnrestrictedBound);\n      }\n    },\n\n    /**\n     * Add ticks and tocks.\n     *\n     * @param {object} behavior - A component.\n     */\n    addBehavior: {\n      value: function (behavior) {\n        var behaviorArr;\n        var behaviors = this.behaviors;\n        var behaviorType; // Check if behavior has tick and/or tock and add the behavior to the appropriate list.\n\n        for (behaviorType in behaviors) {\n          if (!behavior[behaviorType]) {\n            continue;\n          }\n\n          behaviorArr = this.behaviors[behaviorType];\n\n          if (behaviorArr.indexOf(behavior) === -1) {\n            behaviorArr.push(behavior);\n          }\n        }\n      }\n    },\n\n    /**\n     * For tests.\n     */\n    getPointerLockElement: {\n      value: function () {\n        return document.pointerLockElement;\n      },\n      writable: window.debug\n    },\n\n    /**\n     * For tests.\n     */\n    checkHeadsetConnected: {\n      value: utils.device.checkHeadsetConnected,\n      writable: window.debug\n    },\n    enterAR: {\n      value: function () {\n        if (!this.hasWebXR) {\n          throw new Error('Failed to enter AR mode, WebXR not supported.');\n        }\n\n        this.enterVR(true);\n      }\n    },\n\n    /**\n     * Call `requestPresent` if WebVR or WebVR polyfill.\n     * Call `requestFullscreen` on desktop.\n     * Handle events, states, fullscreen styles.\n     *\n     * @param {bool?} useAR - if true, try immersive-ar mode\n     * @returns {Promise}\n     */\n    enterVR: {\n      value: function (useAR) {\n        var self = this;\n        var vrDisplay;\n        var vrManager = self.renderer.xr; // Don't enter VR if already in VR.\n\n        if (this.is('vr-mode')) {\n          return Promise.resolve('Already in VR.');\n        } // Has VR.\n\n\n        if (this.checkHeadsetConnected() || this.isMobile) {\n          vrManager.enabled = true;\n\n          if (this.hasWebXR) {\n            // XR API.\n            if (this.xrSession) {\n              this.xrSession.removeEventListener('end', this.exitVRBound);\n            }\n\n            navigator.xr.requestSession(useAR ? 'immersive-ar' : 'immersive-vr', {\n              requiredFeatures: ['local-floor'],\n              optionalFeatures: ['bounded-floor']\n            }).then(function requestSuccess(xrSession) {\n              self.xrSession = xrSession;\n              vrManager.setSession(xrSession);\n              xrSession.addEventListener('end', self.exitVRBound);\n\n              if (useAR) {\n                self.addState('ar-mode');\n              }\n\n              enterVRSuccess();\n            });\n          } else {\n            vrDisplay = utils.device.getVRDisplay();\n            vrManager.setDevice(vrDisplay);\n\n            if (vrDisplay.isPresenting && !window.hasNativeWebVRImplementation) {\n              enterVRSuccess();\n              return Promise.resolve();\n            }\n\n            var rendererSystem = this.getAttribute('renderer');\n            var presentationAttributes = {\n              highRefreshRate: rendererSystem.highRefreshRate,\n              foveationLevel: rendererSystem.foveationLevel\n            };\n            return vrDisplay.requestPresent([{\n              source: this.canvas,\n              attributes: presentationAttributes\n            }]).then(enterVRSuccess, enterVRFailure);\n          }\n\n          return Promise.resolve();\n        } // No VR.\n\n\n        enterVRSuccess();\n        return Promise.resolve(); // Callback that happens on enter VR success or enter fullscreen (any API).\n\n        function enterVRSuccess() {\n          // vrdisplaypresentchange fires only once when the first requestPresent is completed;\n          // the first requestPresent could be called from ondisplayactivate and there is no way\n          // to setup everything from there. Thus, we need to emulate another vrdisplaypresentchange\n          // for the actual requestPresent. Need to make sure there are no issues with firing the\n          // vrdisplaypresentchange multiple times.\n          var event;\n\n          if (window.hasNativeWebVRImplementation && !window.hasNativeWebXRImplementation) {\n            event = new CustomEvent('vrdisplaypresentchange', {\n              detail: {\n                display: utils.device.getVRDisplay()\n              }\n            });\n            window.dispatchEvent(event);\n          }\n\n          self.addState('vr-mode');\n          self.emit('enter-vr', {\n            target: self\n          }); // Lock to landscape orientation on mobile.\n\n          if (!isWebXRAvailable && self.isMobile && screen.orientation && screen.orientation.lock) {\n            screen.orientation.lock('landscape');\n          }\n\n          self.addFullScreenStyles(); // On mobile, the polyfill handles fullscreen.\n          // TODO: 07/16 Chromium builds break when `requestFullscreen`ing on a canvas\n          // that we are also `requestPresent`ing. Until then, don't fullscreen if headset\n          // connected.\n\n          if (!self.isMobile && !self.checkHeadsetConnected()) {\n            requestFullscreen(self.canvas);\n          }\n\n          self.renderer.setAnimationLoop(self.render);\n          self.resize();\n        }\n\n        function enterVRFailure(err) {\n          if (err && err.message) {\n            throw new Error('Failed to enter VR mode (`requestPresent`): ' + err.message);\n          } else {\n            throw new Error('Failed to enter VR mode (`requestPresent`).');\n          }\n        }\n      },\n      writable: true\n    },\n\n    /**\n    * Call `exitPresent` if WebVR / WebXR or WebVR polyfill.\n    * Handle events, states, fullscreen styles.\n    *\n    * @returns {Promise}\n    */\n    exitVR: {\n      value: function () {\n        var self = this;\n        var vrDisplay;\n        var vrManager = this.renderer.xr; // Don't exit VR if not in VR.\n\n        if (!this.is('vr-mode')) {\n          return Promise.resolve('Not in VR.');\n        } // Handle exiting VR if not yet already and in a headset or polyfill.\n\n\n        if (this.checkHeadsetConnected() || this.isMobile) {\n          vrManager.enabled = false;\n          vrDisplay = utils.device.getVRDisplay();\n\n          if (this.hasWebXR) {\n            this.xrSession.removeEventListener('end', this.exitVRBound); // Capture promise to avoid errors.\n\n            this.xrSession.end().then(function () {}, function () {});\n            this.xrSession = undefined;\n            vrManager.setSession(null);\n          } else {\n            if (vrDisplay.isPresenting) {\n              return vrDisplay.exitPresent().then(exitVRSuccess, exitVRFailure);\n            }\n          }\n        } else {\n          exitFullscreen();\n        } // Handle exiting VR in all other cases (2D fullscreen, external exit VR event).\n\n\n        exitVRSuccess();\n        return Promise.resolve();\n\n        function exitVRSuccess() {\n          self.removeState('vr-mode');\n          self.removeState('ar-mode'); // Lock to landscape orientation on mobile.\n\n          if (self.isMobile && screen.orientation && screen.orientation.unlock) {\n            screen.orientation.unlock();\n          } // Exiting VR in embedded mode, no longer need fullscreen styles.\n\n\n          if (self.hasAttribute('embedded')) {\n            self.removeFullScreenStyles();\n          }\n\n          self.resize();\n\n          if (self.isIOS) {\n            utils.forceCanvasResizeSafariMobile(self.canvas);\n          }\n\n          self.renderer.setPixelRatio(window.devicePixelRatio);\n          self.emit('exit-vr', {\n            target: self\n          });\n        }\n\n        function exitVRFailure(err) {\n          if (err && err.message) {\n            throw new Error('Failed to exit VR mode (`exitPresent`): ' + err.message);\n          } else {\n            throw new Error('Failed to exit VR mode (`exitPresent`).');\n          }\n        }\n      },\n      writable: true\n    },\n    pointerRestricted: {\n      value: function () {\n        if (this.canvas) {\n          var pointerLockElement = this.getPointerLockElement();\n\n          if (pointerLockElement && pointerLockElement !== this.canvas && document.exitPointerLock) {\n            // Recreate pointer lock on the canvas, if taken on another element.\n            document.exitPointerLock();\n          }\n\n          if (this.canvas.requestPointerLock) {\n            this.canvas.requestPointerLock();\n          }\n        }\n      }\n    },\n    pointerUnrestricted: {\n      value: function () {\n        var pointerLockElement = this.getPointerLockElement();\n\n        if (pointerLockElement && pointerLockElement === this.canvas && document.exitPointerLock) {\n          document.exitPointerLock();\n        }\n      }\n    },\n\n    /**\n     * Handle `vrdisplaypresentchange` event for exiting VR through other means than\n     * `<ESC>` key. For example, GearVR back button on Oculus Browser.\n     */\n    onVRPresentChange: {\n      value: function (evt) {\n        // Polyfill places display inside the detail property\n        var display = evt.display || evt.detail.display; // Entering VR.\n\n        if (display && display.isPresenting) {\n          this.enterVR();\n          return;\n        } // Exiting VR.\n\n\n        this.exitVR();\n      }\n    },\n\n    /**\n     * Wraps Entity.getAttribute to take into account for systems.\n     * If system exists, then return system data rather than possible component data.\n     */\n    getAttribute: {\n      value: function (attr) {\n        var system = this.systems[attr];\n\n        if (system) {\n          return system.data;\n        }\n\n        return AEntity.prototype.getAttribute.call(this, attr);\n      }\n    },\n\n    /**\n     * `getAttribute` used to be `getDOMAttribute` and `getComputedAttribute` used to be\n     * what `getAttribute` is now. Now legacy code.\n     */\n    getComputedAttribute: {\n      value: function (attr) {\n        warn('`getComputedAttribute` is deprecated. Use `getAttribute` instead.');\n        this.getAttribute(attr);\n      }\n    },\n\n    /**\n     * Wraps Entity.getDOMAttribute to take into account for systems.\n     * If system exists, then return system data rather than possible component data.\n     */\n    getDOMAttribute: {\n      value: function (attr) {\n        var system = this.systems[attr];\n\n        if (system) {\n          return system.data;\n        }\n\n        return AEntity.prototype.getDOMAttribute.call(this, attr);\n      }\n    },\n\n    /**\n     * Wrap Entity.setAttribute to take into account for systems.\n     * If system exists, then skip component initialization checks and do a normal\n     * setAttribute.\n     */\n    setAttribute: {\n      value: function (attr, value, componentPropValue) {\n        var system = this.systems[attr];\n\n        if (system) {\n          ANode.prototype.setAttribute.call(this, attr, value);\n          system.updateProperties(value);\n          return;\n        }\n\n        AEntity.prototype.setAttribute.call(this, attr, value, componentPropValue);\n      }\n    },\n\n    /**\n     * @param {object} behavior - A component.\n     */\n    removeBehavior: {\n      value: function (behavior) {\n        var behaviorArr;\n        var behaviorType;\n        var behaviors = this.behaviors;\n        var index; // Check if behavior has tick and/or tock and remove the behavior from the appropriate\n        // array.\n\n        for (behaviorType in behaviors) {\n          if (!behavior[behaviorType]) {\n            continue;\n          }\n\n          behaviorArr = this.behaviors[behaviorType];\n          index = behaviorArr.indexOf(behavior);\n\n          if (index !== -1) {\n            behaviorArr.splice(index, 1);\n          }\n        }\n      }\n    },\n    resize: {\n      value: function () {\n        var camera = this.camera;\n        var canvas = this.canvas;\n        var embedded;\n        var isVRPresenting;\n        var size;\n        var isPresenting = this.renderer.xr.isPresenting();\n        isVRPresenting = this.renderer.xr.enabled && isPresenting; // Do not update renderer, if a camera or a canvas have not been injected.\n        // In VR mode, three handles canvas resize based on the dimensions returned by\n        // the getEyeParameters function of the WebVR API. These dimensions are independent of\n        // the window size, therefore should not be overwritten with the window's width and\n        // height, // except when in fullscreen mode.\n\n        if (!camera || !canvas || this.is('vr-mode') && (this.isMobile || isVRPresenting)) {\n          return;\n        } // Update camera.\n\n\n        embedded = this.getAttribute('embedded') && !this.is('vr-mode');\n        size = getCanvasSize(canvas, embedded, this.maxCanvasSize, this.is('vr-mode'));\n        camera.aspect = size.width / size.height;\n        camera.updateProjectionMatrix(); // Notify renderer of size change.\n\n        this.renderer.setSize(size.width, size.height, false);\n        this.emit('rendererresize', null, false);\n      },\n      writable: true\n    },\n    setupRenderer: {\n      value: function () {\n        var self = this;\n        var renderer;\n        var rendererAttr;\n        var rendererAttrString;\n        var rendererConfig;\n        rendererConfig = {\n          alpha: true,\n          antialias: !isMobile,\n          canvas: this.canvas,\n          logarithmicDepthBuffer: false\n        };\n        this.maxCanvasSize = {\n          height: 1920,\n          width: 1920\n        };\n\n        if (this.hasAttribute('renderer')) {\n          rendererAttrString = this.getAttribute('renderer');\n          rendererAttr = utils.styleParser.parse(rendererAttrString);\n\n          if (rendererAttr.precision) {\n            rendererConfig.precision = rendererAttr.precision + 'p';\n          }\n\n          if (rendererAttr.antialias && rendererAttr.antialias !== 'auto') {\n            rendererConfig.antialias = rendererAttr.antialias === 'true';\n          }\n\n          if (rendererAttr.logarithmicDepthBuffer && rendererAttr.logarithmicDepthBuffer !== 'auto') {\n            rendererConfig.logarithmicDepthBuffer = rendererAttr.logarithmicDepthBuffer === 'true';\n          }\n\n          if (rendererAttr.alpha) {\n            rendererConfig.alpha = rendererAttr.alpha === 'true';\n          }\n\n          this.maxCanvasSize = {\n            width: rendererAttr.maxCanvasWidth ? parseInt(rendererAttr.maxCanvasWidth) : this.maxCanvasSize.width,\n            height: rendererAttr.maxCanvasHeight ? parseInt(rendererAttr.maxCanvasHeight) : this.maxCanvasSize.height\n          };\n        }\n\n        renderer = this.renderer = new THREE.WebGLRenderer(rendererConfig);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.sortObjects = false;\n\n        if (this.camera) {\n          renderer.xr.setPoseTarget(this.camera.el.object3D);\n        }\n\n        this.addEventListener('camera-set-active', function () {\n          renderer.xr.setPoseTarget(self.camera.el.object3D);\n        });\n        loadingScreen.setup(this, getCanvasSize);\n      },\n      writable: window.debug\n    },\n\n    /**\n     * Handler attached to elements to help scene know when to kick off.\n     * Scene waits for all entities to load.\n     */\n    play: {\n      value: function () {\n        var self = this;\n        var sceneEl = this;\n\n        if (this.renderStarted) {\n          AEntity.prototype.play.call(this);\n          return;\n        }\n\n        this.addEventListener('loaded', function () {\n          var renderer = this.renderer;\n          var vrDisplay;\n          var vrManager = this.renderer.xr;\n          AEntity.prototype.play.call(this); // .play() *before* render.\n\n          if (sceneEl.renderStarted) {\n            return;\n          }\n\n          sceneEl.resize(); // Kick off render loop.\n\n          if (sceneEl.renderer) {\n            if (window.performance) {\n              window.performance.mark('render-started');\n            }\n\n            loadingScreen.remove();\n            vrDisplay = utils.device.getVRDisplay();\n\n            if (vrDisplay && vrDisplay.isPresenting) {\n              vrManager.setDevice(vrDisplay);\n              vrManager.enabled = true;\n              sceneEl.enterVR();\n            }\n\n            renderer.setAnimationLoop(this.render);\n            sceneEl.renderStarted = true;\n            sceneEl.emit('renderstart');\n          }\n        }); // setTimeout to wait for all nodes to attach and run their callbacks.\n\n        setTimeout(function () {\n          AEntity.prototype.load.call(self);\n        });\n      }\n    },\n\n    /**\n     * Wrap `updateComponent` to not initialize the component if the component has a system\n     * (aframevr/aframe#2365).\n     */\n    updateComponent: {\n      value: function (componentName) {\n        if (componentName in systems) {\n          return;\n        }\n\n        AEntity.prototype.updateComponent.apply(this, arguments);\n      }\n    },\n\n    /**\n     * Behavior-updater meant to be called from scene render.\n     * Abstracted to a different function to facilitate unit testing (`scene.tick()`) without\n     * needing to render.\n     */\n    tick: {\n      value: function (time, timeDelta) {\n        var i;\n        var systems = this.systems; // Components.\n\n        for (i = 0; i < this.behaviors.tick.length; i++) {\n          if (!this.behaviors.tick[i].el.isPlaying) {\n            continue;\n          }\n\n          this.behaviors.tick[i].tick(time, timeDelta);\n        } // Systems.\n\n\n        for (i = 0; i < this.systemNames.length; i++) {\n          if (!systems[this.systemNames[i]].tick) {\n            continue;\n          }\n\n          systems[this.systemNames[i]].tick(time, timeDelta);\n        }\n      }\n    },\n\n    /**\n     * Behavior-updater meant to be called after scene render for post processing purposes.\n     * Abstracted to a different function to facilitate unit testing (`scene.tock()`) without\n     * needing to render.\n     */\n    tock: {\n      value: function (time, timeDelta, camera) {\n        var i;\n        var systems = this.systems; // Components.\n\n        for (i = 0; i < this.behaviors.tock.length; i++) {\n          if (!this.behaviors.tock[i].el.isPlaying) {\n            continue;\n          }\n\n          this.behaviors.tock[i].tock(time, timeDelta, camera);\n        } // Systems.\n\n\n        for (i = 0; i < this.systemNames.length; i++) {\n          if (!systems[this.systemNames[i]].tock) {\n            continue;\n          }\n\n          systems[this.systemNames[i]].tock(time, timeDelta, camera);\n        }\n      }\n    },\n\n    /**\n     * The render loop.\n     *\n     * Updates animations.\n     * Updates behaviors.\n     * Renders with request animation frame.\n     */\n    render: {\n      value: function (time, frame) {\n        var renderer = this.renderer;\n        this.frame = frame;\n        this.delta = this.clock.getDelta() * 1000;\n        this.time = this.clock.elapsedTime * 1000;\n\n        if (this.isPlaying) {\n          this.tick(this.time, this.delta);\n        }\n\n        var savedBackground = null;\n\n        if (this.is('ar-mode')) {\n          // In AR mode, don't render the default background. Hide it, then\n          // restore it again after rendering.\n          savedBackground = this.object3D.background;\n          this.object3D.background = null;\n        }\n\n        renderer.render(this.object3D, this.camera);\n\n        if (savedBackground) {\n          this.object3D.background = savedBackground;\n        }\n      },\n      writable: true\n    }\n  })\n});\n/**\n * Return the canvas size where the scene will be rendered.\n * Will be always the window size except when the scene is embedded.\n * The parent size (less than max size) will be returned in that case.\n *\n * @param {object} canvasEl - the canvas element\n * @param {boolean} embedded - Is the scene embedded?\n * @param {object} max - Max size parameters\n * @param {boolean} isVR - If in VR\n */\n\nfunction getCanvasSize(canvasEl, embedded, maxSize, isVR) {\n  if (embedded) {\n    return {\n      height: canvasEl.parentElement.offsetHeight,\n      width: canvasEl.parentElement.offsetWidth\n    };\n  }\n\n  return getMaxSize(maxSize, isVR);\n}\n/**\n * Return the canvas size. Will be the window size unless that size is greater than the\n * maximum size (1920x1920 by default).  The constrained size will be returned in that case,\n * maintaining aspect ratio\n *\n * @param {object} maxSize - Max size parameters (width and height).\n * @param {boolean} isVR - If in VR.\n * @returns {object} Width and height.\n */\n\n\nfunction getMaxSize(maxSize, isVR) {\n  var aspectRatio;\n  var size;\n  var pixelRatio = window.devicePixelRatio;\n  size = {\n    height: document.body.offsetHeight,\n    width: document.body.offsetWidth\n  };\n\n  if (!maxSize || isVR || maxSize.width === -1 && maxSize.height === -1) {\n    return size;\n  }\n\n  if (size.width * pixelRatio < maxSize.width && size.height * pixelRatio < maxSize.height) {\n    return size;\n  }\n\n  aspectRatio = size.width / size.height;\n\n  if (size.width * pixelRatio > maxSize.width && maxSize.width !== -1) {\n    size.width = Math.round(maxSize.width / pixelRatio);\n    size.height = Math.round(maxSize.width / aspectRatio / pixelRatio);\n  }\n\n  if (size.height * pixelRatio > maxSize.height && maxSize.height !== -1) {\n    size.height = Math.round(maxSize.height / pixelRatio);\n    size.width = Math.round(maxSize.height * aspectRatio / pixelRatio);\n  }\n\n  return size;\n}\n\nfunction requestFullscreen(canvas) {\n  var requestFullscreen = canvas.requestFullscreen || canvas.webkitRequestFullscreen || canvas.mozRequestFullScreen || // The capitalized `S` is not a typo.\n  canvas.msRequestFullscreen; // Hide navigation buttons on Android.\n\n  requestFullscreen.apply(canvas, [{\n    navigationUI: 'hide'\n  }]);\n}\n\nfunction exitFullscreen() {\n  var fullscreenEl = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement;\n\n  if (!fullscreenEl) {\n    return;\n  }\n\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n\nfunction setupCanvas(sceneEl) {\n  var canvasEl;\n  canvasEl = document.createElement('canvas');\n  canvasEl.classList.add('a-canvas'); // Mark canvas as provided/injected by A-Frame.\n\n  canvasEl.dataset.aframeCanvas = true;\n  sceneEl.appendChild(canvasEl);\n  document.addEventListener('fullscreenchange', onFullScreenChange);\n  document.addEventListener('mozfullscreenchange', onFullScreenChange);\n  document.addEventListener('webkitfullscreenchange', onFullScreenChange);\n  document.addEventListener('MSFullscreenChange', onFullScreenChange); // Prevent overscroll on mobile.\n\n  canvasEl.addEventListener('touchmove', function (event) {\n    event.preventDefault();\n  }); // Set canvas on scene.\n\n  sceneEl.canvas = canvasEl;\n  sceneEl.emit('render-target-loaded', {\n    target: canvasEl\n  }); // For unknown reasons a synchronous resize does not work on desktop when\n  // entering/exiting fullscreen.\n\n  setTimeout(bind(sceneEl.resize, sceneEl), 0);\n\n  function onFullScreenChange() {\n    var fullscreenEl = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement; // No fullscren element === exit fullscreen\n\n    if (!fullscreenEl) {\n      sceneEl.exitVR();\n    }\n\n    document.activeElement.blur();\n    document.body.focus();\n  }\n}\n\nmodule.exports.setupCanvas = setupCanvas; // For testing.","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/core/scene/a-scene.js"],"names":["initMetaTags","require","inject","initWakelock","loadingScreen","re","scenes","systems","THREE","utils","AEntity","ANode","initPostMessageAPI","bind","isIOS","device","isMobile","isWebXRAvailable","registerElement","warn","debug","module","exports","AScene","prototype","Object","create","createdCallback","value","clock","Clock","hasWebXR","isAR","isScene","object3D","Scene","self","onAfterRender","renderer","scene","camera","isPlaying","tock","time","delta","render","systemNames","behaviors","tick","hasLoaded","originalHTML","innerHTML","setAttribute","addFullScreenStyles","document","documentElement","classList","add","removeFullScreenStyles","remove","attachedCallback","embedded","hasAttribute","setupCanvas","setupRenderer","resize","onVRPresentChangeBound","onVRPresentChange","window","addEventListener","enterVRBound","enterVR","exitVRBound","exitVR","exitVRTrueBound","pointerRestrictedBound","pointerRestricted","pointerUnrestrictedBound","pointerUnrestricted","attachedCallbackPostCamera","initSystems","setTimeout","play","push","writable","name","initSystem","detachedCallback","sceneIndex","indexOf","splice","removeEventListener","addBehavior","behavior","behaviorArr","behaviorType","getPointerLockElement","pointerLockElement","checkHeadsetConnected","enterAR","Error","useAR","vrDisplay","vrManager","xr","is","Promise","resolve","enabled","xrSession","navigator","requestSession","requiredFeatures","optionalFeatures","then","requestSuccess","setSession","addState","enterVRSuccess","getVRDisplay","setDevice","isPresenting","hasNativeWebVRImplementation","rendererSystem","getAttribute","presentationAttributes","highRefreshRate","foveationLevel","requestPresent","source","canvas","attributes","enterVRFailure","event","hasNativeWebXRImplementation","CustomEvent","detail","display","dispatchEvent","emit","target","screen","orientation","lock","requestFullscreen","setAnimationLoop","err","message","end","undefined","exitPresent","exitVRSuccess","exitVRFailure","exitFullscreen","removeState","unlock","forceCanvasResizeSafariMobile","setPixelRatio","devicePixelRatio","exitPointerLock","requestPointerLock","evt","attr","system","data","call","getComputedAttribute","getDOMAttribute","componentPropValue","updateProperties","removeBehavior","index","isVRPresenting","size","getCanvasSize","maxCanvasSize","aspect","width","height","updateProjectionMatrix","setSize","rendererAttr","rendererAttrString","rendererConfig","alpha","antialias","logarithmicDepthBuffer","styleParser","parse","precision","maxCanvasWidth","parseInt","maxCanvasHeight","WebGLRenderer","sortObjects","setPoseTarget","el","setup","sceneEl","renderStarted","performance","mark","load","updateComponent","componentName","apply","arguments","timeDelta","i","length","frame","getDelta","elapsedTime","savedBackground","background","canvasEl","maxSize","isVR","parentElement","offsetHeight","offsetWidth","getMaxSize","aspectRatio","pixelRatio","body","Math","round","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","navigationUI","fullscreenEl","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","mozCancelFullScreen","webkitExitFullscreen","createElement","dataset","aframeCanvas","appendChild","onFullScreenChange","preventDefault","activeElement","blur","focus"],"mappings":"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","sourcesContent":["/* global Promise, screen, CustomEvent */\nvar initMetaTags = require('./metaTags').inject;\nvar initWakelock = require('./wakelock');\nvar loadingScreen = require('./loadingScreen');\nvar re = require('../a-register-element');\nvar scenes = require('./scenes');\nvar systems = require('../system').systems;\nvar THREE = require('../../lib/three');\nvar utils = require('../../utils/');\n// Require after.\nvar AEntity = require('../a-entity');\nvar ANode = require('../a-node');\nvar initPostMessageAPI = require('./postMessage');\n\nvar bind = utils.bind;\nvar isIOS = utils.device.isIOS();\nvar isMobile = utils.device.isMobile();\nvar isWebXRAvailable = utils.device.isWebXRAvailable;\nvar registerElement = re.registerElement;\nvar warn = utils.debug('core:a-scene:warn');\n\n/**\n * Scene element, holds all entities.\n *\n * @member {array} behaviors - Component instances that have registered themselves to be\n           updated on every tick.\n * @member {object} camera - three.js Camera object.\n * @member {object} canvas\n * @member {bool} isScene - Differentiates as scene entity as opposed to other entites.\n * @member {bool} isMobile - Whether browser is mobile (via UA detection).\n * @member {object} object3D - Root three.js Scene object.\n * @member {object} renderer\n * @member {bool} renderStarted\n * @member {object} systems - Registered instantiated systems.\n * @member {number} time\n */\nmodule.exports.AScene = registerElement('a-scene', {\n  prototype: Object.create(AEntity.prototype, {\n    createdCallback: {\n      value: function () {\n        this.clock = new THREE.Clock();\n        this.isIOS = isIOS;\n        this.isMobile = isMobile;\n        this.hasWebXR = isWebXRAvailable;\n        this.isAR = false;\n        this.isScene = true;\n        this.object3D = new THREE.Scene();\n        var self = this;\n        this.object3D.onAfterRender = function (renderer, scene, camera) {\n          // THREE may swap the camera used for the rendering if in VR, so we pass it to tock\n          if (self.isPlaying) { self.tock(self.time, self.delta, camera); }\n        };\n        this.render = bind(this.render, this);\n        this.systems = {};\n        this.systemNames = [];\n        this.time = this.delta = 0;\n\n        this.behaviors = {tick: [], tock: []};\n        this.hasLoaded = false;\n        this.isPlaying = false;\n        this.originalHTML = this.innerHTML;\n\n        // Default components.\n        this.setAttribute('inspector', '');\n        this.setAttribute('keyboard-shortcuts', '');\n        this.setAttribute('screenshot', '');\n        this.setAttribute('vr-mode-ui', '');\n        this.setAttribute('device-orientation-permission-ui', '');\n      }\n    },\n\n    addFullScreenStyles: {\n      value: function () {\n        document.documentElement.classList.add('a-fullscreen');\n      }\n    },\n\n    removeFullScreenStyles: {\n      value: function () {\n        document.documentElement.classList.remove('a-fullscreen');\n      }\n    },\n\n    attachedCallback: {\n      value: function () {\n        var self = this;\n        var embedded = this.hasAttribute('embedded');\n        // Renderer initialization\n        setupCanvas(this);\n        this.setupRenderer();\n\n        this.resize();\n        if (!embedded) { this.addFullScreenStyles(); }\n        initPostMessageAPI(this);\n\n        initMetaTags(this);\n        initWakelock(this);\n\n        // Handler to exit VR (e.g., Oculus Browser back button).\n        this.onVRPresentChangeBound = bind(this.onVRPresentChange, this);\n        window.addEventListener('vrdisplaypresentchange', this.onVRPresentChangeBound);\n\n        // Bind functions.\n        this.enterVRBound = function () { self.enterVR(); };\n        this.exitVRBound = function () { self.exitVR(); };\n        this.exitVRTrueBound = function () { self.exitVR(true); };\n        this.pointerRestrictedBound = function () { self.pointerRestricted(); };\n        this.pointerUnrestrictedBound = function () { self.pointerUnrestricted(); };\n\n        if (!isWebXRAvailable) {\n          // Exit VR on `vrdisplaydeactivate` (e.g. taking off Rift headset).\n          window.addEventListener('vrdisplaydeactivate', this.exitVRBound);\n\n          // Exit VR on `vrdisplaydisconnect` (e.g. unplugging Rift headset).\n          window.addEventListener('vrdisplaydisconnect', this.exitVRTrueBound);\n\n          // Register for mouse restricted events while in VR\n          // (e.g. mouse no longer available on desktop 2D view)\n          window.addEventListener('vrdisplaypointerrestricted', this.pointerRestrictedBound);\n\n          // Register for mouse unrestricted events while in VR\n          // (e.g. mouse once again available on desktop 2D view)\n          window.addEventListener('vrdisplaypointerunrestricted',\n                                  this.pointerUnrestrictedBound);\n        }\n\n        // Camera set up by camera system.\n        this.addEventListener('cameraready', function () {\n          self.attachedCallbackPostCamera();\n        });\n\n        this.initSystems();\n      }\n    },\n\n    attachedCallbackPostCamera: {\n      value: function () {\n        var resize;\n        var self = this;\n\n        resize = bind(this.resize, this);\n        window.addEventListener('load', resize);\n        window.addEventListener('resize', function () {\n          // Workaround for a Webkit bug (https://bugs.webkit.org/show_bug.cgi?id=170595)\n          // where the window does not contain the correct viewport size\n          // after an orientation change. The window size is correct if the operation\n          // is postponed a few milliseconds.\n          // self.resize can be called directly once the bug above is fixed.\n          if (self.isIOS) {\n            setTimeout(resize, 100);\n          } else {\n            resize();\n          }\n        });\n        this.play();\n\n        // Add to scene index.\n        scenes.push(this);\n      },\n      writable: window.debug\n    },\n\n    /**\n     * Initialize all systems.\n     */\n    initSystems: {\n      value: function () {\n        var name;\n\n        // Initialize camera system first.\n        this.initSystem('camera');\n\n        for (name in systems) {\n          if (name === 'camera') { continue; }\n          this.initSystem(name);\n        }\n      }\n    },\n\n    /**\n     * Initialize a system.\n     */\n    initSystem: {\n      value: function (name) {\n        if (this.systems[name]) { return; }\n        this.systems[name] = new systems[name](this);\n        this.systemNames.push(name);\n      }\n    },\n\n    /**\n     * Shut down scene on detach.\n     */\n    detachedCallback: {\n      value: function () {\n        // Remove from scene index.\n        var sceneIndex = scenes.indexOf(this);\n        scenes.splice(sceneIndex, 1);\n\n        window.removeEventListener('vrdisplaypresentchange', this.onVRPresentChangeBound);\n        window.removeEventListener('vrdisplayactivate', this.enterVRBound);\n        window.removeEventListener('vrdisplaydeactivate', this.exitVRBound);\n        window.removeEventListener('vrdisplayconnect', this.enterVRBound);\n        window.removeEventListener('vrdisplaydisconnect', this.exitVRTrueBound);\n        window.removeEventListener('vrdisplaypointerrestricted', this.pointerRestrictedBound);\n        window.removeEventListener('vrdisplaypointerunrestricted', this.pointerUnrestrictedBound);\n      }\n    },\n\n    /**\n     * Add ticks and tocks.\n     *\n     * @param {object} behavior - A component.\n     */\n    addBehavior: {\n      value: function (behavior) {\n        var behaviorArr;\n        var behaviors = this.behaviors;\n        var behaviorType;\n\n        // Check if behavior has tick and/or tock and add the behavior to the appropriate list.\n        for (behaviorType in behaviors) {\n          if (!behavior[behaviorType]) { continue; }\n          behaviorArr = this.behaviors[behaviorType];\n          if (behaviorArr.indexOf(behavior) === -1) {\n            behaviorArr.push(behavior);\n          }\n        }\n      }\n    },\n\n    /**\n     * For tests.\n     */\n    getPointerLockElement: {\n      value: function () {\n        return document.pointerLockElement;\n      },\n      writable: window.debug\n    },\n\n    /**\n     * For tests.\n     */\n    checkHeadsetConnected: {\n      value: utils.device.checkHeadsetConnected,\n      writable: window.debug\n    },\n\n    enterAR: {\n      value: function () {\n        if (!this.hasWebXR) {\n          throw new Error('Failed to enter AR mode, WebXR not supported.');\n        }\n        this.enterVR(true);\n      }\n    },\n\n    /**\n     * Call `requestPresent` if WebVR or WebVR polyfill.\n     * Call `requestFullscreen` on desktop.\n     * Handle events, states, fullscreen styles.\n     *\n     * @param {bool?} useAR - if true, try immersive-ar mode\n     * @returns {Promise}\n     */\n    enterVR: {\n      value: function (useAR) {\n        var self = this;\n        var vrDisplay;\n        var vrManager = self.renderer.xr;\n\n        // Don't enter VR if already in VR.\n        if (this.is('vr-mode')) { return Promise.resolve('Already in VR.'); }\n\n        // Has VR.\n        if (this.checkHeadsetConnected() || this.isMobile) {\n          vrManager.enabled = true;\n\n          if (this.hasWebXR) {\n            // XR API.\n            if (this.xrSession) {\n              this.xrSession.removeEventListener('end', this.exitVRBound);\n            }\n            navigator.xr.requestSession(useAR ? 'immersive-ar' : 'immersive-vr', {\n              requiredFeatures: ['local-floor'],\n              optionalFeatures: ['bounded-floor']\n            }).then(function requestSuccess (xrSession) {\n              self.xrSession = xrSession;\n              vrManager.setSession(xrSession);\n              xrSession.addEventListener('end', self.exitVRBound);\n              if (useAR) {\n                self.addState('ar-mode');\n              }\n              enterVRSuccess();\n            });\n          } else {\n            vrDisplay = utils.device.getVRDisplay();\n            vrManager.setDevice(vrDisplay);\n            if (vrDisplay.isPresenting &&\n                !window.hasNativeWebVRImplementation) {\n              enterVRSuccess();\n              return Promise.resolve();\n            }\n            var rendererSystem = this.getAttribute('renderer');\n            var presentationAttributes = {\n              highRefreshRate: rendererSystem.highRefreshRate,\n              foveationLevel: rendererSystem.foveationLevel\n            };\n\n            return vrDisplay.requestPresent([{\n              source: this.canvas,\n              attributes: presentationAttributes\n            }]).then(enterVRSuccess, enterVRFailure);\n          }\n          return Promise.resolve();\n        }\n\n        // No VR.\n        enterVRSuccess();\n        return Promise.resolve();\n\n        // Callback that happens on enter VR success or enter fullscreen (any API).\n        function enterVRSuccess () {\n          // vrdisplaypresentchange fires only once when the first requestPresent is completed;\n          // the first requestPresent could be called from ondisplayactivate and there is no way\n          // to setup everything from there. Thus, we need to emulate another vrdisplaypresentchange\n          // for the actual requestPresent. Need to make sure there are no issues with firing the\n          // vrdisplaypresentchange multiple times.\n          var event;\n          if (window.hasNativeWebVRImplementation && !window.hasNativeWebXRImplementation) {\n            event = new CustomEvent('vrdisplaypresentchange', {detail: {display: utils.device.getVRDisplay()}});\n            window.dispatchEvent(event);\n          }\n\n          self.addState('vr-mode');\n          self.emit('enter-vr', {target: self});\n          // Lock to landscape orientation on mobile.\n          if (!isWebXRAvailable && self.isMobile && screen.orientation && screen.orientation.lock) {\n            screen.orientation.lock('landscape');\n          }\n          self.addFullScreenStyles();\n\n          // On mobile, the polyfill handles fullscreen.\n          // TODO: 07/16 Chromium builds break when `requestFullscreen`ing on a canvas\n          // that we are also `requestPresent`ing. Until then, don't fullscreen if headset\n          // connected.\n          if (!self.isMobile && !self.checkHeadsetConnected()) {\n            requestFullscreen(self.canvas);\n          }\n\n          self.renderer.setAnimationLoop(self.render);\n          self.resize();\n        }\n\n        function enterVRFailure (err) {\n          if (err && err.message) {\n            throw new Error('Failed to enter VR mode (`requestPresent`): ' + err.message);\n          } else {\n            throw new Error('Failed to enter VR mode (`requestPresent`).');\n          }\n        }\n      },\n      writable: true\n    },\n     /**\n     * Call `exitPresent` if WebVR / WebXR or WebVR polyfill.\n     * Handle events, states, fullscreen styles.\n     *\n     * @returns {Promise}\n     */\n    exitVR: {\n      value: function () {\n        var self = this;\n        var vrDisplay;\n        var vrManager = this.renderer.xr;\n\n        // Don't exit VR if not in VR.\n        if (!this.is('vr-mode')) { return Promise.resolve('Not in VR.'); }\n\n        // Handle exiting VR if not yet already and in a headset or polyfill.\n        if (this.checkHeadsetConnected() || this.isMobile) {\n          vrManager.enabled = false;\n          vrDisplay = utils.device.getVRDisplay();\n          if (this.hasWebXR) {\n            this.xrSession.removeEventListener('end', this.exitVRBound);\n            // Capture promise to avoid errors.\n            this.xrSession.end().then(function () {}, function () {});\n            this.xrSession = undefined;\n            vrManager.setSession(null);\n          } else {\n            if (vrDisplay.isPresenting) {\n              return vrDisplay.exitPresent().then(exitVRSuccess, exitVRFailure);\n            }\n          }\n        } else {\n          exitFullscreen();\n        }\n\n        // Handle exiting VR in all other cases (2D fullscreen, external exit VR event).\n        exitVRSuccess();\n\n        return Promise.resolve();\n\n        function exitVRSuccess () {\n          self.removeState('vr-mode');\n          self.removeState('ar-mode');\n          // Lock to landscape orientation on mobile.\n          if (self.isMobile && screen.orientation && screen.orientation.unlock) {\n            screen.orientation.unlock();\n          }\n          // Exiting VR in embedded mode, no longer need fullscreen styles.\n          if (self.hasAttribute('embedded')) { self.removeFullScreenStyles(); }\n          self.resize();\n          if (self.isIOS) { utils.forceCanvasResizeSafariMobile(self.canvas); }\n          self.renderer.setPixelRatio(window.devicePixelRatio);\n          self.emit('exit-vr', {target: self});\n        }\n\n        function exitVRFailure (err) {\n          if (err && err.message) {\n            throw new Error('Failed to exit VR mode (`exitPresent`): ' + err.message);\n          } else {\n            throw new Error('Failed to exit VR mode (`exitPresent`).');\n          }\n        }\n      },\n      writable: true\n    },\n\n    pointerRestricted: {\n      value: function () {\n        if (this.canvas) {\n          var pointerLockElement = this.getPointerLockElement();\n          if (pointerLockElement && pointerLockElement !== this.canvas && document.exitPointerLock) {\n            // Recreate pointer lock on the canvas, if taken on another element.\n            document.exitPointerLock();\n          }\n\n          if (this.canvas.requestPointerLock) {\n            this.canvas.requestPointerLock();\n          }\n        }\n      }\n    },\n\n    pointerUnrestricted: {\n      value: function () {\n        var pointerLockElement = this.getPointerLockElement();\n        if (pointerLockElement && pointerLockElement === this.canvas && document.exitPointerLock) {\n          document.exitPointerLock();\n        }\n      }\n    },\n\n    /**\n     * Handle `vrdisplaypresentchange` event for exiting VR through other means than\n     * `<ESC>` key. For example, GearVR back button on Oculus Browser.\n     */\n    onVRPresentChange: {\n      value: function (evt) {\n        // Polyfill places display inside the detail property\n        var display = evt.display || evt.detail.display;\n        // Entering VR.\n        if (display && display.isPresenting) {\n          this.enterVR();\n          return;\n        }\n        // Exiting VR.\n        this.exitVR();\n      }\n    },\n\n    /**\n     * Wraps Entity.getAttribute to take into account for systems.\n     * If system exists, then return system data rather than possible component data.\n     */\n    getAttribute: {\n      value: function (attr) {\n        var system = this.systems[attr];\n        if (system) { return system.data; }\n        return AEntity.prototype.getAttribute.call(this, attr);\n      }\n    },\n\n    /**\n     * `getAttribute` used to be `getDOMAttribute` and `getComputedAttribute` used to be\n     * what `getAttribute` is now. Now legacy code.\n     */\n    getComputedAttribute: {\n      value: function (attr) {\n        warn('`getComputedAttribute` is deprecated. Use `getAttribute` instead.');\n        this.getAttribute(attr);\n      }\n    },\n\n    /**\n     * Wraps Entity.getDOMAttribute to take into account for systems.\n     * If system exists, then return system data rather than possible component data.\n     */\n    getDOMAttribute: {\n      value: function (attr) {\n        var system = this.systems[attr];\n        if (system) { return system.data; }\n        return AEntity.prototype.getDOMAttribute.call(this, attr);\n      }\n    },\n\n    /**\n     * Wrap Entity.setAttribute to take into account for systems.\n     * If system exists, then skip component initialization checks and do a normal\n     * setAttribute.\n     */\n    setAttribute: {\n      value: function (attr, value, componentPropValue) {\n        var system = this.systems[attr];\n        if (system) {\n          ANode.prototype.setAttribute.call(this, attr, value);\n          system.updateProperties(value);\n          return;\n        }\n        AEntity.prototype.setAttribute.call(this, attr, value, componentPropValue);\n      }\n    },\n\n    /**\n     * @param {object} behavior - A component.\n     */\n    removeBehavior: {\n      value: function (behavior) {\n        var behaviorArr;\n        var behaviorType;\n        var behaviors = this.behaviors;\n        var index;\n\n        // Check if behavior has tick and/or tock and remove the behavior from the appropriate\n        // array.\n        for (behaviorType in behaviors) {\n          if (!behavior[behaviorType]) { continue; }\n          behaviorArr = this.behaviors[behaviorType];\n          index = behaviorArr.indexOf(behavior);\n          if (index !== -1) { behaviorArr.splice(index, 1); }\n        }\n      }\n    },\n\n    resize: {\n      value: function () {\n        var camera = this.camera;\n        var canvas = this.canvas;\n        var embedded;\n        var isVRPresenting;\n        var size;\n\n        var isPresenting = this.renderer.xr.isPresenting();\n        isVRPresenting = this.renderer.xr.enabled && isPresenting;\n\n        // Do not update renderer, if a camera or a canvas have not been injected.\n        // In VR mode, three handles canvas resize based on the dimensions returned by\n        // the getEyeParameters function of the WebVR API. These dimensions are independent of\n        // the window size, therefore should not be overwritten with the window's width and\n        // height, // except when in fullscreen mode.\n        if (!camera || !canvas || (this.is('vr-mode') && (this.isMobile || isVRPresenting))) {\n          return;\n        }\n\n        // Update camera.\n        embedded = this.getAttribute('embedded') && !this.is('vr-mode');\n        size = getCanvasSize(canvas, embedded, this.maxCanvasSize, this.is('vr-mode'));\n        camera.aspect = size.width / size.height;\n        camera.updateProjectionMatrix();\n\n        // Notify renderer of size change.\n        this.renderer.setSize(size.width, size.height, false);\n        this.emit('rendererresize', null, false);\n      },\n      writable: true\n    },\n\n    setupRenderer: {\n      value: function () {\n        var self = this;\n        var renderer;\n        var rendererAttr;\n        var rendererAttrString;\n        var rendererConfig;\n\n        rendererConfig = {\n          alpha: true,\n          antialias: !isMobile,\n          canvas: this.canvas,\n          logarithmicDepthBuffer: false\n        };\n\n        this.maxCanvasSize = {height: 1920, width: 1920};\n\n        if (this.hasAttribute('renderer')) {\n          rendererAttrString = this.getAttribute('renderer');\n          rendererAttr = utils.styleParser.parse(rendererAttrString);\n\n          if (rendererAttr.precision) {\n            rendererConfig.precision = rendererAttr.precision + 'p';\n          }\n\n          if (rendererAttr.antialias && rendererAttr.antialias !== 'auto') {\n            rendererConfig.antialias = rendererAttr.antialias === 'true';\n          }\n\n          if (rendererAttr.logarithmicDepthBuffer && rendererAttr.logarithmicDepthBuffer !== 'auto') {\n            rendererConfig.logarithmicDepthBuffer = rendererAttr.logarithmicDepthBuffer === 'true';\n          }\n\n          if (rendererAttr.alpha) {\n            rendererConfig.alpha = rendererAttr.alpha === 'true';\n          }\n\n          this.maxCanvasSize = {\n            width: rendererAttr.maxCanvasWidth\n              ? parseInt(rendererAttr.maxCanvasWidth)\n              : this.maxCanvasSize.width,\n            height: rendererAttr.maxCanvasHeight\n              ? parseInt(rendererAttr.maxCanvasHeight)\n              : this.maxCanvasSize.height\n          };\n        }\n\n        renderer = this.renderer = new THREE.WebGLRenderer(rendererConfig);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.sortObjects = false;\n        if (this.camera) { renderer.xr.setPoseTarget(this.camera.el.object3D); }\n        this.addEventListener('camera-set-active', function () {\n          renderer.xr.setPoseTarget(self.camera.el.object3D);\n        });\n        loadingScreen.setup(this, getCanvasSize);\n      },\n      writable: window.debug\n    },\n\n    /**\n     * Handler attached to elements to help scene know when to kick off.\n     * Scene waits for all entities to load.\n     */\n    play: {\n      value: function () {\n        var self = this;\n        var sceneEl = this;\n\n        if (this.renderStarted) {\n          AEntity.prototype.play.call(this);\n          return;\n        }\n\n        this.addEventListener('loaded', function () {\n          var renderer = this.renderer;\n          var vrDisplay;\n          var vrManager = this.renderer.xr;\n          AEntity.prototype.play.call(this);  // .play() *before* render.\n\n          if (sceneEl.renderStarted) { return; }\n          sceneEl.resize();\n\n          // Kick off render loop.\n          if (sceneEl.renderer) {\n            if (window.performance) { window.performance.mark('render-started'); }\n            loadingScreen.remove();\n            vrDisplay = utils.device.getVRDisplay();\n            if (vrDisplay && vrDisplay.isPresenting) {\n              vrManager.setDevice(vrDisplay);\n              vrManager.enabled = true;\n              sceneEl.enterVR();\n            }\n            renderer.setAnimationLoop(this.render);\n            sceneEl.renderStarted = true;\n            sceneEl.emit('renderstart');\n          }\n        });\n\n        // setTimeout to wait for all nodes to attach and run their callbacks.\n        setTimeout(function () {\n          AEntity.prototype.load.call(self);\n        });\n      }\n    },\n\n    /**\n     * Wrap `updateComponent` to not initialize the component if the component has a system\n     * (aframevr/aframe#2365).\n     */\n    updateComponent: {\n      value: function (componentName) {\n        if (componentName in systems) { return; }\n        AEntity.prototype.updateComponent.apply(this, arguments);\n      }\n    },\n\n    /**\n     * Behavior-updater meant to be called from scene render.\n     * Abstracted to a different function to facilitate unit testing (`scene.tick()`) without\n     * needing to render.\n     */\n    tick: {\n      value: function (time, timeDelta) {\n        var i;\n        var systems = this.systems;\n\n        // Components.\n        for (i = 0; i < this.behaviors.tick.length; i++) {\n          if (!this.behaviors.tick[i].el.isPlaying) { continue; }\n          this.behaviors.tick[i].tick(time, timeDelta);\n        }\n\n        // Systems.\n        for (i = 0; i < this.systemNames.length; i++) {\n          if (!systems[this.systemNames[i]].tick) { continue; }\n          systems[this.systemNames[i]].tick(time, timeDelta);\n        }\n      }\n    },\n\n    /**\n     * Behavior-updater meant to be called after scene render for post processing purposes.\n     * Abstracted to a different function to facilitate unit testing (`scene.tock()`) without\n     * needing to render.\n     */\n    tock: {\n      value: function (time, timeDelta, camera) {\n        var i;\n        var systems = this.systems;\n\n        // Components.\n        for (i = 0; i < this.behaviors.tock.length; i++) {\n          if (!this.behaviors.tock[i].el.isPlaying) { continue; }\n          this.behaviors.tock[i].tock(time, timeDelta, camera);\n        }\n\n        // Systems.\n        for (i = 0; i < this.systemNames.length; i++) {\n          if (!systems[this.systemNames[i]].tock) { continue; }\n          systems[this.systemNames[i]].tock(time, timeDelta, camera);\n        }\n      }\n    },\n\n    /**\n     * The render loop.\n     *\n     * Updates animations.\n     * Updates behaviors.\n     * Renders with request animation frame.\n     */\n    render: {\n      value: function (time, frame) {\n        var renderer = this.renderer;\n\n        this.frame = frame;\n        this.delta = this.clock.getDelta() * 1000;\n        this.time = this.clock.elapsedTime * 1000;\n\n        if (this.isPlaying) { this.tick(this.time, this.delta); }\n        var savedBackground = null;\n        if (this.is('ar-mode')) {\n          // In AR mode, don't render the default background. Hide it, then\n          // restore it again after rendering.\n          savedBackground = this.object3D.background;\n          this.object3D.background = null;\n        }\n        renderer.render(this.object3D, this.camera);\n        if (savedBackground) {\n          this.object3D.background = savedBackground;\n        }\n      },\n      writable: true\n    }\n  })\n});\n\n/**\n * Return the canvas size where the scene will be rendered.\n * Will be always the window size except when the scene is embedded.\n * The parent size (less than max size) will be returned in that case.\n *\n * @param {object} canvasEl - the canvas element\n * @param {boolean} embedded - Is the scene embedded?\n * @param {object} max - Max size parameters\n * @param {boolean} isVR - If in VR\n */\nfunction getCanvasSize (canvasEl, embedded, maxSize, isVR) {\n  if (embedded) {\n    return {\n      height: canvasEl.parentElement.offsetHeight,\n      width: canvasEl.parentElement.offsetWidth\n    };\n  }\n  return getMaxSize(maxSize, isVR);\n}\n\n/**\n * Return the canvas size. Will be the window size unless that size is greater than the\n * maximum size (1920x1920 by default).  The constrained size will be returned in that case,\n * maintaining aspect ratio\n *\n * @param {object} maxSize - Max size parameters (width and height).\n * @param {boolean} isVR - If in VR.\n * @returns {object} Width and height.\n */\nfunction getMaxSize (maxSize, isVR) {\n  var aspectRatio;\n  var size;\n  var pixelRatio = window.devicePixelRatio;\n\n  size = {height: document.body.offsetHeight, width: document.body.offsetWidth};\n  if (!maxSize || isVR || (maxSize.width === -1 && maxSize.height === -1)) {\n    return size;\n  }\n\n  if (size.width * pixelRatio < maxSize.width &&\n    size.height * pixelRatio < maxSize.height) {\n    return size;\n  }\n\n  aspectRatio = size.width / size.height;\n\n  if ((size.width * pixelRatio) > maxSize.width && maxSize.width !== -1) {\n    size.width = Math.round(maxSize.width / pixelRatio);\n    size.height = Math.round(maxSize.width / aspectRatio / pixelRatio);\n  }\n\n  if ((size.height * pixelRatio) > maxSize.height && maxSize.height !== -1) {\n    size.height = Math.round(maxSize.height / pixelRatio);\n    size.width = Math.round(maxSize.height * aspectRatio / pixelRatio);\n  }\n\n  return size;\n}\n\nfunction requestFullscreen (canvas) {\n  var requestFullscreen =\n    canvas.requestFullscreen ||\n    canvas.webkitRequestFullscreen ||\n    canvas.mozRequestFullScreen ||  // The capitalized `S` is not a typo.\n    canvas.msRequestFullscreen;\n  // Hide navigation buttons on Android.\n  requestFullscreen.apply(canvas, [{navigationUI: 'hide'}]);\n}\n\nfunction exitFullscreen () {\n  var fullscreenEl =\n    document.fullscreenElement ||\n    document.webkitFullscreenElement ||\n    document.mozFullScreenElement;\n  if (!fullscreenEl) { return; }\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n\nfunction setupCanvas (sceneEl) {\n  var canvasEl;\n\n  canvasEl = document.createElement('canvas');\n  canvasEl.classList.add('a-canvas');\n  // Mark canvas as provided/injected by A-Frame.\n  canvasEl.dataset.aframeCanvas = true;\n  sceneEl.appendChild(canvasEl);\n\n  document.addEventListener('fullscreenchange', onFullScreenChange);\n  document.addEventListener('mozfullscreenchange', onFullScreenChange);\n  document.addEventListener('webkitfullscreenchange', onFullScreenChange);\n  document.addEventListener('MSFullscreenChange', onFullScreenChange);\n\n  // Prevent overscroll on mobile.\n  canvasEl.addEventListener('touchmove', function (event) { event.preventDefault(); });\n\n  // Set canvas on scene.\n  sceneEl.canvas = canvasEl;\n  sceneEl.emit('render-target-loaded', {target: canvasEl});\n  // For unknown reasons a synchronous resize does not work on desktop when\n  // entering/exiting fullscreen.\n  setTimeout(bind(sceneEl.resize, sceneEl), 0);\n\n  function onFullScreenChange () {\n    var fullscreenEl =\n      document.fullscreenElement ||\n      document.mozFullScreenElement ||\n      document.webkitFullscreenElement;\n    // No fullscren element === exit fullscreen\n    if (!fullscreenEl) { sceneEl.exitVR(); }\n    document.activeElement.blur();\n    document.body.focus();\n  }\n}\nmodule.exports.setupCanvas = setupCanvas;  // For testing.\n"]},"metadata":{},"sourceType":"script"}