{"ast":null,"code":"/* global Image, XMLHttpRequest */\nvar debug = require('./debug');\n\nvar warn = debug('utils:src-loader:warn');\n/**\n * Validate a texture, either as a selector or as a URL.\n * Detects whether `src` is pointing to an image or video and invokes the appropriate\n * callback.\n *\n * `src` will be passed into the callback\n *\n * @params {string|Element} src - URL or media element.\n * @params {function} isImageCb - callback if texture is an image.\n * @params {function} isVideoCb - callback if texture is a video.\n */\n\nfunction validateSrc(src, isImageCb, isVideoCb) {\n  checkIsImage(src, function isAnImageUrl(isImage) {\n    if (isImage) {\n      isImageCb(src);\n      return;\n    }\n\n    isVideoCb(src);\n  });\n}\n/**\n * Validates six images as a cubemap, either as selector or comma-separated\n * URLs.\n *\n * @param {string} src - A selector or comma-separated image URLs. Image URLs\n          must be wrapped by `url()`.\n * @param {string} src - A selector or comma-separated image URLs. Image URLs\n          must be wrapped by `url()`.\n */\n\n\nfunction validateCubemapSrc(src, cb) {\n  var aCubemap;\n  var cubemapSrcRegex = '';\n  var i;\n  var urls;\n  var validatedUrls = [];\n\n  for (i = 0; i < 5; i++) {\n    cubemapSrcRegex += '(url\\\\((?:[^\\\\)]+)\\\\),\\\\s*)';\n  }\n\n  cubemapSrcRegex += '(url\\\\((?:[^\\\\)]+)\\\\)\\\\s*)';\n  urls = src.match(new RegExp(cubemapSrcRegex)); // `src` is a comma-separated list of URLs.\n  // In this case, re-use validateSrc for each side of the cube.\n\n  function isImageCb(url) {\n    validatedUrls.push(url);\n\n    if (validatedUrls.length === 6) {\n      cb(validatedUrls);\n    }\n  }\n\n  if (urls) {\n    for (i = 1; i < 7; i++) {\n      validateSrc(parseUrl(urls[i]), isImageCb);\n    }\n\n    return;\n  } // `src` is a query selector to <a-cubemap> containing six $([src])s.\n\n\n  aCubemap = validateAndGetQuerySelector(src);\n\n  if (!aCubemap) {\n    return;\n  }\n\n  if (aCubemap.tagName === 'A-CUBEMAP' && aCubemap.srcs) {\n    return cb(aCubemap.srcs);\n  } // Else if aCubeMap is not a <a-cubemap>.\n\n\n  warn('Selector \"%s\" does not point to <a-cubemap>', src);\n}\n/**\n * Parses src from `url(src)`.\n * @param  {string} src - String to parse.\n * @return {string} The parsed src, if parseable.\n */\n\n\nfunction parseUrl(src) {\n  var parsedSrc = src.match(/\\url\\((.+)\\)/);\n\n  if (!parsedSrc) {\n    return;\n  }\n\n  return parsedSrc[1];\n}\n/**\n * Call back whether `src` is an image.\n *\n * @param {string|Element} src - URL or element that will be tested.\n * @param {function} onResult - Callback with whether `src` is an image.\n */\n\n\nfunction checkIsImage(src, onResult) {\n  var request;\n\n  if (src.tagName) {\n    onResult(src.tagName === 'IMG');\n    return;\n  }\n\n  request = new XMLHttpRequest(); // Try to send HEAD request to check if image first.\n\n  request.open('HEAD', src);\n  request.addEventListener('load', function (event) {\n    var contentType;\n\n    if (request.status >= 200 && request.status < 300) {\n      contentType = request.getResponseHeader('Content-Type');\n\n      if (contentType == null) {\n        checkIsImageFallback(src, onResult);\n      } else {\n        if (contentType.startsWith('image')) {\n          onResult(true);\n        } else {\n          onResult(false);\n        }\n      }\n    } else {\n      checkIsImageFallback(src, onResult);\n    }\n\n    request.abort();\n  });\n  request.send();\n}\n\nfunction checkIsImageFallback(src, onResult) {\n  var tester = new Image();\n  tester.addEventListener('load', onLoad);\n\n  function onLoad() {\n    onResult(true);\n  }\n\n  tester.addEventListener('error', onError);\n\n  function onError() {\n    onResult(false);\n  }\n\n  tester.src = src;\n}\n/**\n * Query and validate a query selector,\n *\n * @param  {string} selector - DOM selector.\n * @return {object|null|undefined} Selected DOM element if exists.\n           null if query yields no results.\n           undefined if `selector` is not a valid selector.\n */\n\n\nfunction validateAndGetQuerySelector(selector) {\n  try {\n    var el = document.querySelector(selector);\n\n    if (!el) {\n      warn('No element was found matching the selector: \"%s\"', selector);\n    }\n\n    return el;\n  } catch (e) {\n    // Capture exception if it's not a valid selector.\n    warn('\"%s\" is not a valid selector', selector);\n    return undefined;\n  }\n}\n\nmodule.exports = {\n  parseUrl: parseUrl,\n  validateSrc: validateSrc,\n  validateCubemapSrc: validateCubemapSrc\n};","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/utils/src-loader.js"],"names":["debug","require","warn","validateSrc","src","isImageCb","isVideoCb","checkIsImage","isAnImageUrl","isImage","validateCubemapSrc","cb","aCubemap","cubemapSrcRegex","i","urls","validatedUrls","match","RegExp","url","push","length","parseUrl","validateAndGetQuerySelector","tagName","srcs","parsedSrc","onResult","request","XMLHttpRequest","open","addEventListener","event","contentType","status","getResponseHeader","checkIsImageFallback","startsWith","abort","send","tester","Image","onLoad","onError","selector","el","document","querySelector","e","undefined","module","exports"],"mappings":"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","sourcesContent":["/* global Image, XMLHttpRequest */\nvar debug = require('./debug');\n\nvar warn = debug('utils:src-loader:warn');\n\n/**\n * Validate a texture, either as a selector or as a URL.\n * Detects whether `src` is pointing to an image or video and invokes the appropriate\n * callback.\n *\n * `src` will be passed into the callback\n *\n * @params {string|Element} src - URL or media element.\n * @params {function} isImageCb - callback if texture is an image.\n * @params {function} isVideoCb - callback if texture is a video.\n */\nfunction validateSrc (src, isImageCb, isVideoCb) {\n  checkIsImage(src, function isAnImageUrl (isImage) {\n    if (isImage) {\n      isImageCb(src);\n      return;\n    }\n    isVideoCb(src);\n  });\n}\n\n/**\n * Validates six images as a cubemap, either as selector or comma-separated\n * URLs.\n *\n * @param {string} src - A selector or comma-separated image URLs. Image URLs\n          must be wrapped by `url()`.\n * @param {string} src - A selector or comma-separated image URLs. Image URLs\n          must be wrapped by `url()`.\n */\nfunction validateCubemapSrc (src, cb) {\n  var aCubemap;\n  var cubemapSrcRegex = '';\n  var i;\n  var urls;\n  var validatedUrls = [];\n\n  for (i = 0; i < 5; i++) {\n    cubemapSrcRegex += '(url\\\\((?:[^\\\\)]+)\\\\),\\\\s*)';\n  }\n  cubemapSrcRegex += '(url\\\\((?:[^\\\\)]+)\\\\)\\\\s*)';\n  urls = src.match(new RegExp(cubemapSrcRegex));\n\n  // `src` is a comma-separated list of URLs.\n  // In this case, re-use validateSrc for each side of the cube.\n  function isImageCb (url) {\n    validatedUrls.push(url);\n    if (validatedUrls.length === 6) {\n      cb(validatedUrls);\n    }\n  }\n  if (urls) {\n    for (i = 1; i < 7; i++) {\n      validateSrc(parseUrl(urls[i]), isImageCb);\n    }\n    return;\n  }\n\n  // `src` is a query selector to <a-cubemap> containing six $([src])s.\n  aCubemap = validateAndGetQuerySelector(src);\n  if (!aCubemap) { return; }\n  if (aCubemap.tagName === 'A-CUBEMAP' && aCubemap.srcs) {\n    return cb(aCubemap.srcs);\n  }\n  // Else if aCubeMap is not a <a-cubemap>.\n  warn('Selector \"%s\" does not point to <a-cubemap>', src);\n}\n\n/**\n * Parses src from `url(src)`.\n * @param  {string} src - String to parse.\n * @return {string} The parsed src, if parseable.\n */\nfunction parseUrl (src) {\n  var parsedSrc = src.match(/\\url\\((.+)\\)/);\n  if (!parsedSrc) { return; }\n  return parsedSrc[1];\n}\n\n/**\n * Call back whether `src` is an image.\n *\n * @param {string|Element} src - URL or element that will be tested.\n * @param {function} onResult - Callback with whether `src` is an image.\n */\nfunction checkIsImage (src, onResult) {\n  var request;\n\n  if (src.tagName) {\n    onResult(src.tagName === 'IMG');\n    return;\n  }\n  request = new XMLHttpRequest();\n\n  // Try to send HEAD request to check if image first.\n  request.open('HEAD', src);\n  request.addEventListener('load', function (event) {\n    var contentType;\n    if (request.status >= 200 && request.status < 300) {\n      contentType = request.getResponseHeader('Content-Type');\n      if (contentType == null) {\n        checkIsImageFallback(src, onResult);\n      } else {\n        if (contentType.startsWith('image')) {\n          onResult(true);\n        } else {\n          onResult(false);\n        }\n      }\n    } else {\n      checkIsImageFallback(src, onResult);\n    }\n    request.abort();\n  });\n  request.send();\n}\n\nfunction checkIsImageFallback (src, onResult) {\n  var tester = new Image();\n  tester.addEventListener('load', onLoad);\n  function onLoad () { onResult(true); }\n  tester.addEventListener('error', onError);\n  function onError () { onResult(false); }\n  tester.src = src;\n}\n\n/**\n * Query and validate a query selector,\n *\n * @param  {string} selector - DOM selector.\n * @return {object|null|undefined} Selected DOM element if exists.\n           null if query yields no results.\n           undefined if `selector` is not a valid selector.\n */\nfunction validateAndGetQuerySelector (selector) {\n  try {\n    var el = document.querySelector(selector);\n    if (!el) {\n      warn('No element was found matching the selector: \"%s\"', selector);\n    }\n    return el;\n  } catch (e) {  // Capture exception if it's not a valid selector.\n    warn('\"%s\" is not a valid selector', selector);\n    return undefined;\n  }\n}\n\nmodule.exports = {\n  parseUrl: parseUrl,\n  validateSrc: validateSrc,\n  validateCubemapSrc: validateCubemapSrc\n};\n"]},"metadata":{},"sourceType":"script"}