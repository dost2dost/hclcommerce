{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Given a 3DOM execution context, patch any methods that give write access\n * to otherwise configurable material properties so that they are automatically\n * rejected when invoked.\n */\nfunction filterMaterialProperties() {\n  const errorMessage = 'Capability \"material-properties\" not allowed';\n  Object.defineProperty(this.PBRMetallicRoughness.prototype, 'setBaseColorFactor', {\n    value: () => {\n      throw new Error(errorMessage);\n    },\n    configurable: false,\n    writable: false\n  });\n}\n/**\n * Given a 3DOM execution context, patch any methods, classes or other APIs\n * related to Web Messaging so that they throw or are otherwise rendered\n * impotent.\n *\n * TODO(#1001): We probably need to crawl up the prototype chain on this one\n */\n\n\nfunction filterMessaging() {\n  const errorMessage = 'Capability \"messaging\" not allowed';\n\n  const rejectInvocation = () => {\n    throw new Error(errorMessage);\n  };\n\n  const originalAddEventListener = this.addEventListener;\n  Object.defineProperties(this, {\n    postMessage: {\n      value: rejectInvocation,\n      configurable: false\n    },\n    MessageChannel: {\n      value: rejectInvocation,\n      configurable: false\n    },\n    MessageEvent: {\n      value: rejectInvocation,\n      configurable: false\n    },\n    onmessage: {\n      set() {\n        rejectInvocation();\n      },\n\n      configurable: false\n    },\n    addEventListener: {\n      value: function (type, listener, options) {\n        if (type === 'message') {\n          rejectInvocation();\n        }\n\n        originalAddEventListener.call(this, type, listener, options);\n      },\n      configurable: false\n    }\n  });\n}\n/**\n * Given a 3DOM execution context, patch the global Fetch API so that any\n * attempts to perform network operations are immediately rejected.\n */\n\n\nfunction filterFetch() {\n  Object.defineProperties(this, {\n    fetch: {\n      value: () => {\n        throw new Error('Capability \"fetch\" not allowed');\n      },\n      configurable: false\n    }\n  });\n}\n\nconst capabilityFilterMap = {\n  'messaging': filterMessaging,\n  'material-properties': filterMaterialProperties,\n  'fetch': filterFetch\n};\n/**\n * Given a list of 3DOM capability strings, this factory produces a script\n * fragment that patches the global execution context so that any omitted\n * capabilities are explicitly disallowed.\n */\n\nexport const generateCapabilityFilter = capabilities => {\n  const filtersToApply = Object.keys(capabilityFilterMap);\n  const capabilityFilters = [];\n\n  for (const capability of filtersToApply) {\n    // Skip filters that are allowed by the list of capabilities\n    if (capabilities.indexOf(capability) > -1) {\n      continue;\n    }\n\n    const filter = capabilityFilterMap[capability];\n    capabilityFilters.push(`(${filter.toString()}).call(self);`);\n  }\n\n  return capabilityFilters.join('\\n');\n};","map":{"version":3,"sources":["../../src/context/generate-capability-filter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAiBA;;;;;AAKA,SAAS,wBAAT,GAAiC;AAC/B,QAAM,YAAY,GAAG,8CAArB;AAEA,EAAA,MAAM,CAAC,cAAP,CACI,KAAK,oBAAL,CAA0B,SAD9B,EACyC,oBADzC,EAC+D;AACzD,IAAA,KAAK,EAAE,MAAK;AACV,YAAM,IAAI,KAAJ,CAAU,YAAV,CAAN;AACD,KAHwD;AAIzD,IAAA,YAAY,EAAE,KAJ2C;AAKzD,IAAA,QAAQ,EAAE;AAL+C,GAD/D;AAQD;AAED;;;;;;;;;AAOA,SAAS,eAAT,GAAwB;AACtB,QAAM,YAAY,GAAG,oCAArB;;AACA,QAAM,gBAAgB,GAAG,MAAK;AAC5B,UAAM,IAAI,KAAJ,CAAU,YAAV,CAAN;AACD,GAFD;;AAGA,QAAM,wBAAwB,GAAG,KAAK,gBAAtC;AAEA,EAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,IAAA,WAAW,EAAE;AAAC,MAAA,KAAK,EAAE,gBAAR;AAA0B,MAAA,YAAY,EAAE;AAAxC,KADe;AAE5B,IAAA,cAAc,EAAE;AAAC,MAAA,KAAK,EAAE,gBAAR;AAA0B,MAAA,YAAY,EAAE;AAAxC,KAFY;AAG5B,IAAA,YAAY,EAAE;AAAC,MAAA,KAAK,EAAE,gBAAR;AAA0B,MAAA,YAAY,EAAE;AAAxC,KAHc;AAI5B,IAAA,SAAS,EAAE;AACT,MAAA,GAAG,GAAA;AACD,QAAA,gBAAgB;AACjB,OAHQ;;AAIT,MAAA,YAAY,EAAE;AAJL,KAJiB;AAU5B,IAAA,gBAAgB,EAAE;AAChB,MAAA,KAAK,EAAE,UACH,IADG,EAEH,QAFG,EAGH,OAHG,EAGsC;AAC3C,YAAI,IAAI,KAAK,SAAb,EAAwB;AACtB,UAAA,gBAAgB;AACjB;;AACD,QAAA,wBAAwB,CAAC,IAAzB,CAA8B,IAA9B,EAAoC,IAApC,EAA0C,QAA1C,EAAoD,OAApD;AACD,OATe;AAUhB,MAAA,YAAY,EAAE;AAVE;AAVU,GAA9B;AAuBD;AAED;;;;;;AAIA,SAAS,WAAT,GAAoB;AAClB,EAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,IAAA,KAAK,EAAE;AACL,MAAA,KAAK,EAAE,MAAK;AACV,cAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD,OAHI;AAIL,MAAA,YAAY,EAAE;AAJT;AADqB,GAA9B;AAQD;;AAMD,MAAM,mBAAmB,GAAwB;AAC/C,eAAa,eADkC;AAE/C,yBAAuB,wBAFwB;AAG/C,WAAS;AAHsC,CAAjD;AAMA;;;;;;AAKA,OAAO,MAAM,wBAAwB,GAChC,YAAD,IAA8D;AAC5D,QAAM,cAAc,GAChB,MAAM,CAAC,IAAP,CAAY,mBAAZ,CADJ;AAGA,QAAM,iBAAiB,GAAkB,EAAzC;;AAEA,OAAK,MAAM,UAAX,IAAyB,cAAzB,EAAyC;AACvC;AACA,QAAI,YAAY,CAAC,OAAb,CAAqB,UAArB,IAAmC,CAAC,CAAxC,EAA2C;AACzC;AACD;;AAED,UAAM,MAAM,GAAG,mBAAmB,CAAC,UAAD,CAAlC;AACA,IAAA,iBAAiB,CAAC,IAAlB,CAAuB,IAAI,MAAM,CAAC,QAAP,EAAiB,eAA5C;AACD;;AAED,SAAO,iBAAiB,CAAC,IAAlB,CAAuB,IAAvB,CAAP;AACD,CAlBE","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ThreeDOMCapability, ThreeDOMGlobalScope} from '../api.js';\n\n/**\n * Given a 3DOM execution context, patch any methods that give write access\n * to otherwise configurable material properties so that they are automatically\n * rejected when invoked.\n */\nfunction filterMaterialProperties(this: ThreeDOMGlobalScope) {\n  const errorMessage = 'Capability \"material-properties\" not allowed';\n\n  Object.defineProperty(\n      this.PBRMetallicRoughness.prototype, 'setBaseColorFactor', {\n        value: () => {\n          throw new Error(errorMessage);\n        },\n        configurable: false,\n        writable: false\n      });\n}\n\n/**\n * Given a 3DOM execution context, patch any methods, classes or other APIs\n * related to Web Messaging so that they throw or are otherwise rendered\n * impotent.\n *\n * TODO(#1001): We probably need to crawl up the prototype chain on this one\n */\nfunction filterMessaging(this: ThreeDOMGlobalScope) {\n  const errorMessage = 'Capability \"messaging\" not allowed';\n  const rejectInvocation = () => {\n    throw new Error(errorMessage);\n  };\n  const originalAddEventListener = this.addEventListener;\n\n  Object.defineProperties(this, {\n    postMessage: {value: rejectInvocation, configurable: false},\n    MessageChannel: {value: rejectInvocation, configurable: false},\n    MessageEvent: {value: rejectInvocation, configurable: false},\n    onmessage: {\n      set() {\n        rejectInvocation();\n      },\n      configurable: false,\n    },\n    addEventListener: {\n      value: function(\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean|AddEventListenerOptions) {\n        if (type === 'message') {\n          rejectInvocation();\n        }\n        originalAddEventListener.call(this, type, listener, options);\n      },\n      configurable: false\n    }\n  });\n}\n\n/**\n * Given a 3DOM execution context, patch the global Fetch API so that any\n * attempts to perform network operations are immediately rejected.\n */\nfunction filterFetch(this: ThreeDOMGlobalScope) {\n  Object.defineProperties(this, {\n    fetch: {\n      value: () => {\n        throw new Error('Capability \"fetch\" not allowed');\n      },\n      configurable: false\n    }\n  });\n}\n\ntype CapabilityFilterMap = {\n  [K in ThreeDOMCapability]: Function\n};\n\nconst capabilityFilterMap: CapabilityFilterMap = {\n  'messaging': filterMessaging,\n  'material-properties': filterMaterialProperties,\n  'fetch': filterFetch\n};\n\n/**\n * Given a list of 3DOM capability strings, this factory produces a script\n * fragment that patches the global execution context so that any omitted\n * capabilities are explicitly disallowed.\n */\nexport const generateCapabilityFilter =\n    (capabilities: Readonly<Array<ThreeDOMCapability>>): string => {\n      const filtersToApply =\n          Object.keys(capabilityFilterMap) as Array<ThreeDOMCapability>;\n\n      const capabilityFilters: Array<string> = [];\n\n      for (const capability of filtersToApply) {\n        // Skip filters that are allowed by the list of capabilities\n        if (capabilities.indexOf(capability) > -1) {\n          continue;\n        }\n\n        const filter = capabilityFilterMap[capability];\n        capabilityFilters.push(`(${filter.toString()}).call(self);`);\n      }\n\n      return capabilityFilters.join('\\n');\n    };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}