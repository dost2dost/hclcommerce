{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c, _d, _e;\n\nimport { Vector3 } from 'three';\nimport { CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer.js';\nimport { normalizeUnit } from '../styles/conversions.js';\nimport { parseExpressions } from '../styles/parsers.js';\nconst $slot = Symbol('slot');\nconst $pivot = Symbol('pivot');\nconst $referenceCount = Symbol('referenceCount');\nconst $updateVisibility = Symbol('updateVisibility');\nconst $visible = Symbol('visible');\nconst $onSlotchange = Symbol('onSlotchange');\nconst $slotchangeHandler = Symbol('slotchangeHandler');\n/**\n * The Hotspot object is a reference-counted slot. If decrement() returns true,\n * it should be removed from the tree so it can be garbage-collected.\n */\n\nexport class Hotspot extends CSS2DObject {\n  constructor(config) {\n    super(document.createElement('div'));\n    this.normal = new Vector3(0, 1, 0);\n    this[_a] = false;\n    this[_b] = 1;\n    this[_c] = document.createElement('div');\n    this[_d] = document.createElement('slot');\n\n    this[_e] = () => this[$onSlotchange]();\n\n    this.element.classList.add('annotation-wrapper');\n    this[$slot].name = config.name;\n    this[$slot].addEventListener('slotchange', this[$slotchangeHandler]);\n    this.element.appendChild(this[$pivot]);\n    this[$pivot].appendChild(this[$slot]);\n    this.updatePosition(config.position);\n    this.updateNormal(config.normal);\n    this.show();\n  }\n  /**\n   * Sets the hotspot to be in the highly visible foreground state.\n   */\n\n\n  show() {\n    if (!this[$visible]) {\n      this[$visible] = true;\n      this[$updateVisibility]({\n        notify: true\n      });\n    }\n  }\n  /**\n   * Sets the hotspot to be in the diminished background state.\n   */\n\n\n  hide() {\n    if (this[$visible]) {\n      this[$visible] = false;\n      this[$updateVisibility]({\n        notify: true\n      });\n    }\n  }\n  /**\n   * Cleans up the held references of this Hotspot when it is done being used.\n   */\n\n\n  dispose() {\n    this[$slot].removeEventListener('slotchange', this[$slotchangeHandler]);\n  }\n  /**\n   * Call this when adding elements to the same slot to keep track.\n   */\n\n\n  increment() {\n    this[$referenceCount]++;\n  }\n  /**\n   * Call this when removing elements from the slot; returns true when the slot\n   * is unused.\n   */\n\n\n  decrement() {\n    if (this[$referenceCount] > 0) {\n      --this[$referenceCount];\n    }\n\n    return this[$referenceCount] === 0;\n  }\n  /**\n   * Change the position of the hotspot to the input string, in the same format\n   * as the data-position attribute.\n   */\n\n\n  updatePosition(position) {\n    if (position == null) return;\n    const positionNodes = parseExpressions(position)[0].terms;\n\n    for (let i = 0; i < 3; ++i) {\n      this.position.setComponent(i, normalizeUnit(positionNodes[i]).number);\n    }\n  }\n  /**\n   * Change the hotspot's normal to the input string, in the same format as the\n   * data-normal attribute.\n   */\n\n\n  updateNormal(normal) {\n    if (normal == null) return;\n    const normalNodes = parseExpressions(normal)[0].terms;\n\n    for (let i = 0; i < 3; ++i) {\n      this.normal.setComponent(i, normalizeUnit(normalNodes[i]).number);\n    }\n  }\n\n  orient(radians) {\n    this[$pivot].style.transform = `rotate(${radians}rad)`;\n  }\n\n  [(_a = $visible, _b = $referenceCount, _c = $pivot, _d = $slot, _e = $slotchangeHandler, $updateVisibility)]({\n    notify\n  }) {\n    // NOTE: IE11 doesn't support a second arg for classList.toggle\n    if (this[$visible]) {\n      this.element.classList.remove('hide');\n    } else {\n      this.element.classList.add('hide');\n    } // NOTE: ShadyDOM doesn't support slot.assignedElements, otherwise we could\n    // use that here.\n\n\n    this[$slot].assignedNodes().forEach(node => {\n      if (node.nodeType !== Node.ELEMENT_NODE) {\n        return;\n      }\n\n      const element = node; // Visibility attribute can be configured per-node in the hotspot:\n\n      const visibilityAttribute = element.dataset.visibilityAttribute;\n\n      if (visibilityAttribute != null) {\n        const attributeName = `data-${visibilityAttribute}`; // NOTE: IE11 doesn't support toggleAttribute\n\n        if (this[$visible]) {\n          element.setAttribute(attributeName, '');\n        } else {\n          element.removeAttribute(attributeName);\n        }\n      }\n\n      if (notify) {\n        element.dispatchEvent(new CustomEvent('hotspot-visibility', {\n          detail: {\n            visible: this[$visible]\n          }\n        }));\n      }\n    });\n  }\n\n  [$onSlotchange]() {\n    this[$updateVisibility]({\n      notify: false\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/three-components/Hotspot.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeA,SAAQ,OAAR,QAAsB,OAAtB;AACA,SAAQ,WAAR,QAA0B,+CAA1B;AACA,SAAQ,aAAR,QAA4B,0BAA5B;AACA,SAAoB,gBAApB,QAA2C,sBAA3C;AAkBA,MAAM,KAAK,GAAG,MAAM,CAAC,MAAD,CAApB;AACA,MAAM,MAAM,GAAG,MAAM,CAAC,OAAD,CAArB;AACA,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAD,CAA9B;AACA,MAAM,iBAAiB,GAAG,MAAM,CAAC,kBAAD,CAAhC;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAD,CAAvB;AAEA,MAAM,aAAa,GAAG,MAAM,CAAC,cAAD,CAA5B;AACA,MAAM,kBAAkB,GAAG,MAAM,CAAC,mBAAD,CAAjC;AAEA;;;;;AAIA,OAAM,MAAO,OAAP,SAAuB,WAAvB,CAAkC;AAQtC,EAAA,WAAA,CAAY,MAAZ,EAAwC;AACtC,UAAM,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAN;AARK,SAAA,MAAA,GAAkB,IAAI,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAlB;AACA,SAAA,EAAA,IAAa,KAAb;AACA,SAAA,EAAA,IAAoB,CAApB;AACA,SAAA,EAAA,IAAW,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAX;AACA,SAAA,EAAA,IAA2B,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAA3B;;AACA,SAAA,EAAA,IAAuB,MAAM,KAAK,aAAL,GAA7B;;AAKL,SAAK,OAAL,CAAa,SAAb,CAAuB,GAAvB,CAA2B,oBAA3B;AAEA,SAAK,KAAL,EAAY,IAAZ,GAAmB,MAAM,CAAC,IAA1B;AACA,SAAK,KAAL,EAAY,gBAAZ,CAA6B,YAA7B,EAA2C,KAAK,kBAAL,CAA3C;AAEA,SAAK,OAAL,CAAa,WAAb,CAAyB,KAAK,MAAL,CAAzB;AACA,SAAK,MAAL,EAAa,WAAb,CAAyB,KAAK,KAAL,CAAzB;AAEA,SAAK,cAAL,CAAoB,MAAM,CAAC,QAA3B;AACA,SAAK,YAAL,CAAkB,MAAM,CAAC,MAAzB;AAEA,SAAK,IAAL;AACD;AAED;;;;;AAGA,EAAA,IAAI,GAAA;AACF,QAAI,CAAC,KAAK,QAAL,CAAL,EAAqB;AACnB,WAAK,QAAL,IAAiB,IAAjB;AACA,WAAK,iBAAL,EAAwB;AAAC,QAAA,MAAM,EAAE;AAAT,OAAxB;AACD;AACF;AAED;;;;;AAGA,EAAA,IAAI,GAAA;AACF,QAAI,KAAK,QAAL,CAAJ,EAAoB;AAClB,WAAK,QAAL,IAAiB,KAAjB;AACA,WAAK,iBAAL,EAAwB;AAAC,QAAA,MAAM,EAAE;AAAT,OAAxB;AACD;AACF;AAED;;;;;AAGA,EAAA,OAAO,GAAA;AACL,SAAK,KAAL,EAAY,mBAAZ,CAAgC,YAAhC,EAA8C,KAAK,kBAAL,CAA9C;AACD;AAED;;;;;AAGA,EAAA,SAAS,GAAA;AACP,SAAK,eAAL;AACD;AAED;;;;;;AAIA,EAAA,SAAS,GAAA;AACP,QAAI,KAAK,eAAL,IAAwB,CAA5B,EAA+B;AAC7B,QAAE,KAAK,eAAL,CAAF;AACD;;AACD,WAAO,KAAK,eAAL,MAA0B,CAAjC;AACD;AAED;;;;;;AAIA,EAAA,cAAc,CAAC,QAAD,EAAkB;AAC9B,QAAI,QAAQ,IAAI,IAAhB,EACE;AACF,UAAM,aAAa,GAAG,gBAAgB,CAAC,QAAD,CAAhB,CAA2B,CAA3B,EAA8B,KAApD;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AAC1B,WAAK,QAAL,CAAc,YAAd,CACI,CADJ,EACO,aAAa,CAAC,aAAa,CAAC,CAAD,CAAd,CAAb,CAAmD,MAD1D;AAED;AACF;AAED;;;;;;AAIA,EAAA,YAAY,CAAC,MAAD,EAAgB;AAC1B,QAAI,MAAM,IAAI,IAAd,EACE;AACF,UAAM,WAAW,GAAG,gBAAgB,CAAC,MAAD,CAAhB,CAAyB,CAAzB,EAA4B,KAAhD;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AAC1B,WAAK,MAAL,CAAY,YAAZ,CACI,CADJ,EACO,aAAa,CAAC,WAAW,CAAC,CAAD,CAAZ,CAAb,CAAiD,MADxD;AAED;AACF;;AAED,EAAA,MAAM,CAAC,OAAD,EAAgB;AACpB,SAAK,MAAL,EAAa,KAAb,CAAmB,SAAnB,GAA+B,UAAU,OAAO,MAAhD;AACD;;AAEQ,IAAA,EAAA,GApGD,QAoGC,EApGO,EAAA,GACR,eAmGC,EAnGc,EAAA,GACf,MAkGC,EAlGK,EAAA,GACN,KAiGC,EAjGI,EAAA,GACL,kBAgGC,EAAC,iBAAD,GAAoB;AAAC,IAAA;AAAD,GAApB,EAA+C;AACtD;AACA,QAAI,KAAK,QAAL,CAAJ,EAAoB;AAClB,WAAK,OAAL,CAAa,SAAb,CAAuB,MAAvB,CAA8B,MAA9B;AACD,KAFD,MAEO;AACL,WAAK,OAAL,CAAa,SAAb,CAAuB,GAAvB,CAA2B,MAA3B;AACD,KANqD,CAQtD;AACA;;;AACA,SAAK,KAAL,EAAY,aAAZ,GAA4B,OAA5B,CAAqC,IAAD,IAAS;AAC3C,UAAI,IAAI,CAAC,QAAL,KAAkB,IAAI,CAAC,YAA3B,EAAyC;AACvC;AACD;;AAED,YAAM,OAAO,GAAG,IAAhB,CAL2C,CAM3C;;AACA,YAAM,mBAAmB,GAAG,OAAO,CAAC,OAAR,CAAgB,mBAA5C;;AAEA,UAAI,mBAAmB,IAAI,IAA3B,EAAiC;AAC/B,cAAM,aAAa,GAAG,QAAQ,mBAAmB,EAAjD,CAD+B,CAG/B;;AACA,YAAI,KAAK,QAAL,CAAJ,EAAoB;AAClB,UAAA,OAAO,CAAC,YAAR,CAAqB,aAArB,EAAoC,EAApC;AACD,SAFD,MAEO;AACL,UAAA,OAAO,CAAC,eAAR,CAAwB,aAAxB;AACD;AACF;;AAED,UAAI,MAAJ,EAAY;AACV,QAAA,OAAO,CAAC,aAAR,CAAsB,IAAI,WAAJ,CAAgB,oBAAhB,EAAsC;AAC1D,UAAA,MAAM,EAAE;AACN,YAAA,OAAO,EAAE,KAAK,QAAL;AADH;AADkD,SAAtC,CAAtB;AAKD;AACF,KA3BD;AA4BD;;AAEQ,GAAC,aAAD,IAAe;AACtB,SAAK,iBAAL,EAAwB;AAAC,MAAA,MAAM,EAAE;AAAT,KAAxB;AACD;;AAhJqC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Vector3} from 'three';\nimport {CSS2DObject} from 'three/examples/jsm/renderers/CSS2DRenderer.js';\nimport {normalizeUnit} from '../styles/conversions.js';\nimport {NumberNode, parseExpressions} from '../styles/parsers.js';\n\nexport interface HotspotVisibilityDetails {\n  visible: boolean;\n}\n\n/**\n * Hotspots are configured by slot name, and this name must begin with \"hotspot\"\n * to be recognized. The position and normal strings are in the form of the\n * camera-target attribute and default to \"0m 0m 0m\" and \"0m 1m 0m\",\n * respectively.\n */\nexport interface HotspotConfiguration {\n  name: string;\n  position?: string;\n  normal?: string;\n}\n\nconst $slot = Symbol('slot');\nconst $pivot = Symbol('pivot');\nconst $referenceCount = Symbol('referenceCount');\nconst $updateVisibility = Symbol('updateVisibility');\nconst $visible = Symbol('visible');\n\nconst $onSlotchange = Symbol('onSlotchange');\nconst $slotchangeHandler = Symbol('slotchangeHandler');\n\n/**\n * The Hotspot object is a reference-counted slot. If decrement() returns true,\n * it should be removed from the tree so it can be garbage-collected.\n */\nexport class Hotspot extends CSS2DObject {\n  public normal: Vector3 = new Vector3(0, 1, 0);\n  private[$visible] = false;\n  private[$referenceCount] = 1;\n  private[$pivot] = document.createElement('div');\n  private[$slot]: HTMLSlotElement = document.createElement('slot');\n  private[$slotchangeHandler] = () => this[$onSlotchange]();\n\n  constructor(config: HotspotConfiguration) {\n    super(document.createElement('div'));\n\n    this.element.classList.add('annotation-wrapper');\n\n    this[$slot].name = config.name;\n    this[$slot].addEventListener('slotchange', this[$slotchangeHandler]);\n\n    this.element.appendChild(this[$pivot]);\n    this[$pivot].appendChild(this[$slot]);\n\n    this.updatePosition(config.position);\n    this.updateNormal(config.normal);\n\n    this.show();\n  }\n\n  /**\n   * Sets the hotspot to be in the highly visible foreground state.\n   */\n  show() {\n    if (!this[$visible]) {\n      this[$visible] = true;\n      this[$updateVisibility]({notify: true});\n    }\n  }\n\n  /**\n   * Sets the hotspot to be in the diminished background state.\n   */\n  hide() {\n    if (this[$visible]) {\n      this[$visible] = false;\n      this[$updateVisibility]({notify: true});\n    }\n  }\n\n  /**\n   * Cleans up the held references of this Hotspot when it is done being used.\n   */\n  dispose() {\n    this[$slot].removeEventListener('slotchange', this[$slotchangeHandler]);\n  }\n\n  /**\n   * Call this when adding elements to the same slot to keep track.\n   */\n  increment() {\n    this[$referenceCount]++;\n  }\n\n  /**\n   * Call this when removing elements from the slot; returns true when the slot\n   * is unused.\n   */\n  decrement(): boolean {\n    if (this[$referenceCount] > 0) {\n      --this[$referenceCount];\n    }\n    return this[$referenceCount] === 0;\n  }\n\n  /**\n   * Change the position of the hotspot to the input string, in the same format\n   * as the data-position attribute.\n   */\n  updatePosition(position?: string) {\n    if (position == null)\n      return;\n    const positionNodes = parseExpressions(position)[0].terms;\n    for (let i = 0; i < 3; ++i) {\n      this.position.setComponent(\n          i, normalizeUnit(positionNodes[i] as NumberNode<'m'>).number);\n    }\n  }\n\n  /**\n   * Change the hotspot's normal to the input string, in the same format as the\n   * data-normal attribute.\n   */\n  updateNormal(normal?: string) {\n    if (normal == null)\n      return;\n    const normalNodes = parseExpressions(normal)[0].terms;\n    for (let i = 0; i < 3; ++i) {\n      this.normal.setComponent(\n          i, normalizeUnit(normalNodes[i] as NumberNode<'m'>).number);\n    }\n  }\n\n  orient(radians: number) {\n    this[$pivot].style.transform = `rotate(${radians}rad)`;\n  }\n\n  protected[$updateVisibility]({notify}: {notify: boolean}) {\n    // NOTE: IE11 doesn't support a second arg for classList.toggle\n    if (this[$visible]) {\n      this.element.classList.remove('hide');\n    } else {\n      this.element.classList.add('hide');\n    }\n\n    // NOTE: ShadyDOM doesn't support slot.assignedElements, otherwise we could\n    // use that here.\n    this[$slot].assignedNodes().forEach((node) => {\n      if (node.nodeType !== Node.ELEMENT_NODE) {\n        return;\n      }\n\n      const element = node as HTMLElement;\n      // Visibility attribute can be configured per-node in the hotspot:\n      const visibilityAttribute = element.dataset.visibilityAttribute;\n\n      if (visibilityAttribute != null) {\n        const attributeName = `data-${visibilityAttribute}`;\n\n        // NOTE: IE11 doesn't support toggleAttribute\n        if (this[$visible]) {\n          element.setAttribute(attributeName, '');\n        } else {\n          element.removeAttribute(attributeName);\n        }\n      }\n\n      if (notify) {\n        element.dispatchEvent(new CustomEvent('hotspot-visibility', {\n          detail: {\n            visible: this[$visible],\n          },\n        }));\n      }\n    });\n  }\n\n  protected[$onSlotchange]() {\n    this[$updateVisibility]({notify: false});\n  }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}