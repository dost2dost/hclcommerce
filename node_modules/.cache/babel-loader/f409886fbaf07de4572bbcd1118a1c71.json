{"ast":null,"code":"var registerShader = require('../core/shader').registerShader;\n\nvar THREE = require('../lib/three');\n\nvar utils = require('../utils/');\n\nvar CubeLoader = new THREE.CubeTextureLoader();\nvar texturePromises = {};\n/**\n * Standard (physically-based) shader using THREE.MeshStandardMaterial.\n */\n\nmodule.exports.Shader = registerShader('standard', {\n  schema: {\n    ambientOcclusionMap: {\n      type: 'map'\n    },\n    ambientOcclusionMapIntensity: {\n      default: 1\n    },\n    ambientOcclusionTextureOffset: {\n      type: 'vec2'\n    },\n    ambientOcclusionTextureRepeat: {\n      type: 'vec2',\n      default: {\n        x: 1,\n        y: 1\n      }\n    },\n    color: {\n      type: 'color'\n    },\n    displacementMap: {\n      type: 'map'\n    },\n    displacementScale: {\n      default: 1\n    },\n    displacementBias: {\n      default: 0.5\n    },\n    displacementTextureOffset: {\n      type: 'vec2'\n    },\n    displacementTextureRepeat: {\n      type: 'vec2',\n      default: {\n        x: 1,\n        y: 1\n      }\n    },\n    emissive: {\n      type: 'color',\n      default: '#000'\n    },\n    emissiveIntensity: {\n      default: 1\n    },\n    envMap: {\n      default: ''\n    },\n    fog: {\n      default: true\n    },\n    height: {\n      default: 256\n    },\n    metalness: {\n      default: 0.0,\n      min: 0.0,\n      max: 1.0\n    },\n    metalnessMap: {\n      type: 'map'\n    },\n    metalnessTextureOffset: {\n      type: 'vec2'\n    },\n    metalnessTextureRepeat: {\n      type: 'vec2',\n      default: {\n        x: 1,\n        y: 1\n      }\n    },\n    normalMap: {\n      type: 'map'\n    },\n    normalScale: {\n      type: 'vec2',\n      default: {\n        x: 1,\n        y: 1\n      }\n    },\n    normalTextureOffset: {\n      type: 'vec2'\n    },\n    normalTextureRepeat: {\n      type: 'vec2',\n      default: {\n        x: 1,\n        y: 1\n      }\n    },\n    offset: {\n      type: 'vec2',\n      default: {\n        x: 0,\n        y: 0\n      }\n    },\n    repeat: {\n      type: 'vec2',\n      default: {\n        x: 1,\n        y: 1\n      }\n    },\n    roughness: {\n      default: 0.5,\n      min: 0.0,\n      max: 1.0\n    },\n    roughnessMap: {\n      type: 'map'\n    },\n    roughnessTextureOffset: {\n      type: 'vec2'\n    },\n    roughnessTextureRepeat: {\n      type: 'vec2',\n      default: {\n        x: 1,\n        y: 1\n      }\n    },\n    sphericalEnvMap: {\n      type: 'map'\n    },\n    src: {\n      type: 'map'\n    },\n    width: {\n      default: 512\n    },\n    wireframe: {\n      default: false\n    },\n    wireframeLinewidth: {\n      default: 2\n    }\n  },\n\n  /**\n   * Initializes the shader.\n   * Adds a reference from the scene to this entity as the camera.\n   */\n  init: function (data) {\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n    this.materialData = {\n      color: new THREE.Color(),\n      emissive: new THREE.Color()\n    };\n    getMaterialData(data, this.materialData);\n    this.rendererSystem.applyColorCorrection(this.materialData.color);\n    this.rendererSystem.applyColorCorrection(this.materialData.emissive);\n    this.material = new THREE.MeshStandardMaterial(this.materialData);\n    utils.material.updateMap(this, data);\n\n    if (data.normalMap) {\n      utils.material.updateDistortionMap('normal', this, data);\n    }\n\n    if (data.displacementMap) {\n      utils.material.updateDistortionMap('displacement', this, data);\n    }\n\n    if (data.ambientOcclusionMap) {\n      utils.material.updateDistortionMap('ambientOcclusion', this, data);\n    }\n\n    if (data.metalnessMap) {\n      utils.material.updateDistortionMap('metalness', this, data);\n    }\n\n    if (data.roughnessMap) {\n      utils.material.updateDistortionMap('roughness', this, data);\n    }\n\n    this.updateEnvMap(data);\n  },\n  update: function (data) {\n    this.updateMaterial(data);\n    utils.material.updateMap(this, data);\n\n    if (data.normalMap) {\n      utils.material.updateDistortionMap('normal', this, data);\n    }\n\n    if (data.displacementMap) {\n      utils.material.updateDistortionMap('displacement', this, data);\n    }\n\n    if (data.ambientOcclusionMap) {\n      utils.material.updateDistortionMap('ambientOcclusion', this, data);\n    }\n\n    if (data.metalnessMap) {\n      utils.material.updateDistortionMap('metalness', this, data);\n    }\n\n    if (data.roughnessMap) {\n      utils.material.updateDistortionMap('roughness', this, data);\n    }\n\n    this.updateEnvMap(data);\n  },\n\n  /**\n   * Updating existing material.\n   *\n   * @param {object} data - Material component data.\n   * @returns {object} Material.\n   */\n  updateMaterial: function (data) {\n    var key;\n    var material = this.material;\n    getMaterialData(data, this.materialData);\n    this.rendererSystem.applyColorCorrection(this.materialData.color);\n    this.rendererSystem.applyColorCorrection(this.materialData.emissive);\n\n    for (key in this.materialData) {\n      material[key] = this.materialData[key];\n    }\n  },\n\n  /**\n   * Handle environment cubemap. Textures are cached in texturePromises.\n   */\n  updateEnvMap: function (data) {\n    var self = this;\n    var material = this.material;\n    var envMap = data.envMap;\n    var sphericalEnvMap = data.sphericalEnvMap; // No envMap defined or already loading.\n\n    if (!envMap && !sphericalEnvMap || this.isLoadingEnvMap) {\n      material.envMap = null;\n      material.needsUpdate = true;\n      return;\n    }\n\n    this.isLoadingEnvMap = true; // if a spherical env map is defined then use it.\n\n    if (sphericalEnvMap) {\n      this.el.sceneEl.systems.material.loadTexture(sphericalEnvMap, {\n        src: sphericalEnvMap\n      }, function textureLoaded(texture) {\n        self.isLoadingEnvMap = false;\n        texture.mapping = THREE.SphericalReflectionMapping;\n        material.envMap = texture;\n        utils.material.handleTextureEvents(self.el, texture);\n        material.needsUpdate = true;\n      });\n      return;\n    } // Another material is already loading this texture. Wait on promise.\n\n\n    if (texturePromises[envMap]) {\n      texturePromises[envMap].then(function (cube) {\n        self.isLoadingEnvMap = false;\n        material.envMap = cube;\n        utils.material.handleTextureEvents(self.el, cube);\n        material.needsUpdate = true;\n      });\n      return;\n    } // Material is first to load this texture. Load and resolve texture.\n\n\n    texturePromises[envMap] = new Promise(function (resolve) {\n      utils.srcLoader.validateCubemapSrc(envMap, function loadEnvMap(urls) {\n        CubeLoader.load(urls, function (cube) {\n          // Texture loaded.\n          self.isLoadingEnvMap = false;\n          material.envMap = cube;\n          utils.material.handleTextureEvents(self.el, cube);\n          resolve(cube);\n        });\n      });\n    });\n  }\n});\n/**\n * Builds and normalize material data, normalizing stuff along the way.\n *\n * @param {object} data - Material data.\n * @param {object} materialData - Object to use.\n * @returns {object} Updated materialData.\n */\n\nfunction getMaterialData(data, materialData) {\n  materialData.color.set(data.color);\n  materialData.emissive.set(data.emissive);\n  materialData.emissiveIntensity = data.emissiveIntensity;\n  materialData.fog = data.fog;\n  materialData.metalness = data.metalness;\n  materialData.roughness = data.roughness;\n  materialData.wireframe = data.wireframe;\n  materialData.wireframeLinewidth = data.wireframeLinewidth;\n\n  if (data.normalMap) {\n    materialData.normalScale = data.normalScale;\n  }\n\n  if (data.ambientOcclusionMap) {\n    materialData.aoMapIntensity = data.ambientOcclusionMapIntensity;\n  }\n\n  if (data.displacementMap) {\n    materialData.displacementScale = data.displacementScale;\n    materialData.displacementBias = data.displacementBias;\n  }\n\n  return materialData;\n}","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/shaders/standard.js"],"names":["registerShader","require","THREE","utils","CubeLoader","CubeTextureLoader","texturePromises","module","exports","Shader","schema","ambientOcclusionMap","type","ambientOcclusionMapIntensity","default","ambientOcclusionTextureOffset","ambientOcclusionTextureRepeat","x","y","color","displacementMap","displacementScale","displacementBias","displacementTextureOffset","displacementTextureRepeat","emissive","emissiveIntensity","envMap","fog","height","metalness","min","max","metalnessMap","metalnessTextureOffset","metalnessTextureRepeat","normalMap","normalScale","normalTextureOffset","normalTextureRepeat","offset","repeat","roughness","roughnessMap","roughnessTextureOffset","roughnessTextureRepeat","sphericalEnvMap","src","width","wireframe","wireframeLinewidth","init","data","rendererSystem","el","sceneEl","systems","renderer","materialData","Color","getMaterialData","applyColorCorrection","material","MeshStandardMaterial","updateMap","updateDistortionMap","updateEnvMap","update","updateMaterial","key","self","isLoadingEnvMap","needsUpdate","loadTexture","textureLoaded","texture","mapping","SphericalReflectionMapping","handleTextureEvents","then","cube","Promise","resolve","srcLoader","validateCubemapSrc","loadEnvMap","urls","load","set","aoMapIntensity"],"mappings":"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","sourcesContent":["var registerShader = require('../core/shader').registerShader;\nvar THREE = require('../lib/three');\nvar utils = require('../utils/');\n\nvar CubeLoader = new THREE.CubeTextureLoader();\nvar texturePromises = {};\n\n/**\n * Standard (physically-based) shader using THREE.MeshStandardMaterial.\n */\nmodule.exports.Shader = registerShader('standard', {\n  schema: {\n    ambientOcclusionMap: {type: 'map'},\n    ambientOcclusionMapIntensity: {default: 1},\n    ambientOcclusionTextureOffset: {type: 'vec2'},\n    ambientOcclusionTextureRepeat: {type: 'vec2', default: {x: 1, y: 1}},\n\n    color: {type: 'color'},\n\n    displacementMap: {type: 'map'},\n    displacementScale: {default: 1},\n    displacementBias: {default: 0.5},\n    displacementTextureOffset: {type: 'vec2'},\n    displacementTextureRepeat: {type: 'vec2', default: {x: 1, y: 1}},\n    emissive: {type: 'color', default: '#000'},\n    emissiveIntensity: {default: 1},\n    envMap: {default: ''},\n\n    fog: {default: true},\n    height: {default: 256},\n\n    metalness: {default: 0.0, min: 0.0, max: 1.0},\n    metalnessMap: {type: 'map'},\n    metalnessTextureOffset: {type: 'vec2'},\n    metalnessTextureRepeat: {type: 'vec2', default: {x: 1, y: 1}},\n\n    normalMap: {type: 'map'},\n    normalScale: {type: 'vec2', default: {x: 1, y: 1}},\n    normalTextureOffset: {type: 'vec2'},\n    normalTextureRepeat: {type: 'vec2', default: {x: 1, y: 1}},\n\n    offset: {type: 'vec2', default: {x: 0, y: 0}},\n    repeat: {type: 'vec2', default: {x: 1, y: 1}},\n\n    roughness: {default: 0.5, min: 0.0, max: 1.0},\n    roughnessMap: {type: 'map'},\n    roughnessTextureOffset: {type: 'vec2'},\n    roughnessTextureRepeat: {type: 'vec2', default: {x: 1, y: 1}},\n\n    sphericalEnvMap: {type: 'map'},\n    src: {type: 'map'},\n    width: {default: 512},\n    wireframe: {default: false},\n    wireframeLinewidth: {default: 2}\n  },\n\n  /**\n   * Initializes the shader.\n   * Adds a reference from the scene to this entity as the camera.\n   */\n  init: function (data) {\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n    this.materialData = {color: new THREE.Color(), emissive: new THREE.Color()};\n    getMaterialData(data, this.materialData);\n    this.rendererSystem.applyColorCorrection(this.materialData.color);\n    this.rendererSystem.applyColorCorrection(this.materialData.emissive);\n    this.material = new THREE.MeshStandardMaterial(this.materialData);\n\n    utils.material.updateMap(this, data);\n    if (data.normalMap) { utils.material.updateDistortionMap('normal', this, data); }\n    if (data.displacementMap) { utils.material.updateDistortionMap('displacement', this, data); }\n    if (data.ambientOcclusionMap) { utils.material.updateDistortionMap('ambientOcclusion', this, data); }\n    if (data.metalnessMap) { utils.material.updateDistortionMap('metalness', this, data); }\n    if (data.roughnessMap) { utils.material.updateDistortionMap('roughness', this, data); }\n    this.updateEnvMap(data);\n  },\n\n  update: function (data) {\n    this.updateMaterial(data);\n    utils.material.updateMap(this, data);\n    if (data.normalMap) { utils.material.updateDistortionMap('normal', this, data); }\n    if (data.displacementMap) { utils.material.updateDistortionMap('displacement', this, data); }\n    if (data.ambientOcclusionMap) { utils.material.updateDistortionMap('ambientOcclusion', this, data); }\n    if (data.metalnessMap) { utils.material.updateDistortionMap('metalness', this, data); }\n    if (data.roughnessMap) { utils.material.updateDistortionMap('roughness', this, data); }\n    this.updateEnvMap(data);\n  },\n\n  /**\n   * Updating existing material.\n   *\n   * @param {object} data - Material component data.\n   * @returns {object} Material.\n   */\n  updateMaterial: function (data) {\n    var key;\n    var material = this.material;\n    getMaterialData(data, this.materialData);\n    this.rendererSystem.applyColorCorrection(this.materialData.color);\n    this.rendererSystem.applyColorCorrection(this.materialData.emissive);\n    for (key in this.materialData) {\n      material[key] = this.materialData[key];\n    }\n  },\n\n  /**\n   * Handle environment cubemap. Textures are cached in texturePromises.\n   */\n  updateEnvMap: function (data) {\n    var self = this;\n    var material = this.material;\n    var envMap = data.envMap;\n    var sphericalEnvMap = data.sphericalEnvMap;\n\n    // No envMap defined or already loading.\n    if ((!envMap && !sphericalEnvMap) || this.isLoadingEnvMap) {\n      material.envMap = null;\n      material.needsUpdate = true;\n      return;\n    }\n    this.isLoadingEnvMap = true;\n\n    // if a spherical env map is defined then use it.\n    if (sphericalEnvMap) {\n      this.el.sceneEl.systems.material.loadTexture(sphericalEnvMap, {src: sphericalEnvMap}, function textureLoaded (texture) {\n        self.isLoadingEnvMap = false;\n        texture.mapping = THREE.SphericalReflectionMapping;\n        material.envMap = texture;\n        utils.material.handleTextureEvents(self.el, texture);\n        material.needsUpdate = true;\n      });\n      return;\n    }\n\n    // Another material is already loading this texture. Wait on promise.\n    if (texturePromises[envMap]) {\n      texturePromises[envMap].then(function (cube) {\n        self.isLoadingEnvMap = false;\n        material.envMap = cube;\n        utils.material.handleTextureEvents(self.el, cube);\n        material.needsUpdate = true;\n      });\n      return;\n    }\n\n    // Material is first to load this texture. Load and resolve texture.\n    texturePromises[envMap] = new Promise(function (resolve) {\n      utils.srcLoader.validateCubemapSrc(envMap, function loadEnvMap (urls) {\n        CubeLoader.load(urls, function (cube) {\n          // Texture loaded.\n          self.isLoadingEnvMap = false;\n          material.envMap = cube;\n          utils.material.handleTextureEvents(self.el, cube);\n          resolve(cube);\n        });\n      });\n    });\n  }\n});\n\n/**\n * Builds and normalize material data, normalizing stuff along the way.\n *\n * @param {object} data - Material data.\n * @param {object} materialData - Object to use.\n * @returns {object} Updated materialData.\n */\nfunction getMaterialData (data, materialData) {\n  materialData.color.set(data.color);\n  materialData.emissive.set(data.emissive);\n  materialData.emissiveIntensity = data.emissiveIntensity;\n  materialData.fog = data.fog;\n  materialData.metalness = data.metalness;\n  materialData.roughness = data.roughness;\n  materialData.wireframe = data.wireframe;\n  materialData.wireframeLinewidth = data.wireframeLinewidth;\n\n  if (data.normalMap) { materialData.normalScale = data.normalScale; }\n\n  if (data.ambientOcclusionMap) {\n    materialData.aoMapIntensity = data.ambientOcclusionMapIntensity;\n  }\n\n  if (data.displacementMap) {\n    materialData.displacementScale = data.displacementScale;\n    materialData.displacementBias = data.displacementBias;\n  }\n\n  return materialData;\n}\n"]},"metadata":{},"sourceType":"script"}