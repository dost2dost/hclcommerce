{"ast":null,"code":"/**\r\n * Loads a Wavefront .mtl file specifying materials\r\n *\r\n * @author angelxuanchang\r\n */\nTHREE.MTLLoader = function (manager) {\n  THREE.Loader.call(this, manager);\n};\n\nTHREE.MTLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n  constructor: THREE.MTLLoader,\n\n  /**\r\n   * Loads and parses a MTL asset from a URL.\r\n   *\r\n   * @param {String} url - URL to the MTL file.\r\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\r\n   * @param {Function} [onProgress] - Callback for download progress.\r\n   * @param {Function} [onError] - Callback for download errors.\r\n   *\r\n   * @see setPath setResourcePath\r\n   *\r\n   * @note In order for relative texture references to resolve correctly\r\n   * you must call setResourcePath() explicitly prior to load.\r\n   */\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = this.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : this.path;\n    var loader = new THREE.FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.load(url, function (text) {\n      onLoad(scope.parse(text, path));\n    }, onProgress, onError);\n  },\n  setMaterialOptions: function (value) {\n    this.materialOptions = value;\n    return this;\n  },\n\n  /**\r\n   * Parses a MTL file.\r\n   *\r\n   * @param {String} text - Content of MTL file\r\n   * @return {THREE.MTLLoader.MaterialCreator}\r\n   *\r\n   * @see setPath setResourcePath\r\n   *\r\n   * @note In order for relative texture references to resolve correctly\r\n   * you must call setResourcePath() explicitly prior to parse.\r\n   */\n  parse: function (text, path) {\n    var lines = text.split('\\n');\n    var info = {};\n    var delimiter_pattern = /\\s+/;\n    var materialsInfo = {};\n\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      line = line.trim();\n\n      if (line.length === 0 || line.charAt(0) === '#') {\n        // Blank line or comment ignore\n        continue;\n      }\n\n      var pos = line.indexOf(' ');\n      var key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n      var value = pos >= 0 ? line.substring(pos + 1) : '';\n      value = value.trim();\n\n      if (key === 'newmtl') {\n        // New material\n        info = {\n          name: value\n        };\n        materialsInfo[value] = info;\n      } else {\n        if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n          var ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n\n    var materialCreator = new THREE.MTLLoader.MaterialCreator(this.resourcePath || path, this.materialOptions);\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  }\n});\n/**\r\n * Create a new THREE.MTLLoader.MaterialCreator\r\n * @param baseUrl - Url relative to which textures are loaded\r\n * @param options - Set of options on how to construct the materials\r\n *                  side: Which side to apply the material\r\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\r\n *                  wrap: What type of wrapping to apply for textures\r\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\r\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\r\n *                                Default: false, assumed to be already normalized\r\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\r\n *                                  Default: false\r\n * @constructor\r\n */\n\nTHREE.MTLLoader.MaterialCreator = function (baseUrl, options) {\n  this.baseUrl = baseUrl || '';\n  this.options = options;\n  this.materialsInfo = {};\n  this.materials = {};\n  this.materialsArray = [];\n  this.nameLookup = {};\n  this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;\n  this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n  constructor: THREE.MTLLoader.MaterialCreator,\n  crossOrigin: 'anonymous',\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n    return this;\n  },\n  setManager: function (value) {\n    this.manager = value;\n  },\n  setMaterials: function (materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  },\n  convert: function (materialsInfo) {\n    if (!this.options) return materialsInfo;\n    var converted = {};\n\n    for (var mn in materialsInfo) {\n      // Convert materials info into normalized form based on options\n      var mat = materialsInfo[mn];\n      var covmat = {};\n      converted[mn] = covmat;\n\n      for (var prop in mat) {\n        var save = true;\n        var value = mat[prop];\n        var lprop = prop.toLowerCase();\n\n        switch (lprop) {\n          case 'kd':\n          case 'ka':\n          case 'ks':\n            // Diffuse color (color under white light) using RGB values\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                // ignore\n                save = false;\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n\n    return converted;\n  },\n  preload: function () {\n    for (var mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  },\n  getIndex: function (materialName) {\n    return this.nameLookup[materialName];\n  },\n  getAsArray: function () {\n    var index = 0;\n\n    for (var mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n\n    return this.materialsArray;\n  },\n  create: function (materialName) {\n    if (this.materials[materialName] === undefined) {\n      this.createMaterial_(materialName);\n    }\n\n    return this.materials[materialName];\n  },\n  createMaterial_: function (materialName) {\n    // Create material\n    var scope = this;\n    var mat = this.materialsInfo[materialName];\n    var params = {\n      name: materialName,\n      side: this.side\n    };\n\n    function resolveURL(baseUrl, url) {\n      if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n      if (/^https?:\\/\\//i.test(url)) return url;\n      return baseUrl + url;\n    }\n\n    function setMapForType(mapType, value) {\n      if (params[mapType]) return; // Keep the first encountered texture\n\n      var texParams = scope.getTextureParams(value, params);\n      var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n      params[mapType] = map;\n    }\n\n    for (var prop in mat) {\n      var value = mat[prop];\n      var n;\n      if (value === '') continue;\n\n      switch (prop.toLowerCase()) {\n        // Ns is material specular exponent\n        case 'kd':\n          // Diffuse color (color under white light) using RGB values\n          params.color = new THREE.Color().fromArray(value);\n          break;\n\n        case 'ks':\n          // Specular color (color when light is reflected from shiny surface) using RGB values\n          params.specular = new THREE.Color().fromArray(value);\n          break;\n\n        case 'ke':\n          // Emissive using RGB values\n          params.emissive = new THREE.Color().fromArray(value);\n          break;\n\n        case 'map_kd':\n          // Diffuse texture map\n          setMapForType(\"map\", value);\n          break;\n\n        case 'map_ks':\n          // Specular map\n          setMapForType(\"specularMap\", value);\n          break;\n\n        case 'map_ke':\n          // Emissive map\n          setMapForType(\"emissiveMap\", value);\n          break;\n\n        case 'norm':\n          setMapForType(\"normalMap\", value);\n          break;\n\n        case 'map_bump':\n        case 'bump':\n          // Bump texture map\n          setMapForType(\"bumpMap\", value);\n          break;\n\n        case 'map_d':\n          // Alpha map\n          setMapForType(\"alphaMap\", value);\n          params.transparent = true;\n          break;\n\n        case 'ns':\n          // The specular exponent (defines the focus of the specular highlight)\n          // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n          params.shininess = parseFloat(value);\n          break;\n\n        case 'd':\n          n = parseFloat(value);\n\n          if (n < 1) {\n            params.opacity = n;\n            params.transparent = true;\n          }\n\n          break;\n\n        case 'tr':\n          n = parseFloat(value);\n          if (this.options && this.options.invertTrProperty) n = 1 - n;\n\n          if (n > 0) {\n            params.opacity = 1 - n;\n            params.transparent = true;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n    return this.materials[materialName];\n  },\n  getTextureParams: function (value, matParams) {\n    var texParams = {\n      scale: new THREE.Vector2(1, 1),\n      offset: new THREE.Vector2(0, 0)\n    };\n    var items = value.split(/\\s+/);\n    var pos;\n    pos = items.indexOf('-bm');\n\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n\n    pos = items.indexOf('-s');\n\n    if (pos >= 0) {\n      texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    pos = items.indexOf('-o');\n\n    if (pos >= 0) {\n      texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    texParams.url = items.join(' ').trim();\n    return texParams;\n  },\n  loadTexture: function (url, mapping, onLoad, onProgress, onError) {\n    var texture;\n    var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n    var loader = manager.getHandler(url);\n\n    if (loader === null) {\n      loader = new THREE.TextureLoader(manager);\n    }\n\n    if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n    texture = loader.load(url, onLoad, onProgress, onError);\n    if (mapping !== undefined) texture.mapping = mapping;\n    return texture;\n  }\n};","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/super-three/examples/js/loaders/MTLLoader.js"],"names":["THREE","MTLLoader","manager","Loader","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","text","parse","setMaterialOptions","value","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","getIndex","materialName","getAsArray","index","undefined","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","Color","fromArray","specular","emissive","transparent","shininess","opacity","invertTrProperty","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","texture","DefaultLoadingManager","getHandler","TextureLoader"],"mappings":"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","sourcesContent":["/**\r\n * Loads a Wavefront .mtl file specifying materials\r\n *\r\n * @author angelxuanchang\r\n */\r\n\r\nTHREE.MTLLoader = function ( manager ) {\r\n\r\n\tTHREE.Loader.call( this, manager );\r\n\r\n};\r\n\r\nTHREE.MTLLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\r\n\r\n\tconstructor: THREE.MTLLoader,\r\n\r\n\t/**\r\n\t * Loads and parses a MTL asset from a URL.\r\n\t *\r\n\t * @param {String} url - URL to the MTL file.\r\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\r\n\t * @param {Function} [onProgress] - Callback for download progress.\r\n\t * @param {Function} [onError] - Callback for download errors.\r\n\t *\r\n\t * @see setPath setResourcePath\r\n\t *\r\n\t * @note In order for relative texture references to resolve correctly\r\n\t * you must call setResourcePath() explicitly prior to load.\r\n\t */\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar path = ( this.path === '' ) ? THREE.LoaderUtils.extractUrlBase( url ) : this.path;\r\n\r\n\t\tvar loader = new THREE.FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( scope.parse( text, path ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetMaterialOptions: function ( value ) {\r\n\r\n\t\tthis.materialOptions = value;\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Parses a MTL file.\r\n\t *\r\n\t * @param {String} text - Content of MTL file\r\n\t * @return {THREE.MTLLoader.MaterialCreator}\r\n\t *\r\n\t * @see setPath setResourcePath\r\n\t *\r\n\t * @note In order for relative texture references to resolve correctly\r\n\t * you must call setResourcePath() explicitly prior to parse.\r\n\t */\r\n\tparse: function ( text, path ) {\r\n\r\n\t\tvar lines = text.split( '\\n' );\r\n\t\tvar info = {};\r\n\t\tvar delimiter_pattern = /\\s+/;\r\n\t\tvar materialsInfo = {};\r\n\r\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tvar line = lines[ i ];\r\n\t\t\tline = line.trim();\r\n\r\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\r\n\r\n\t\t\t\t// Blank line or comment ignore\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar pos = line.indexOf( ' ' );\r\n\r\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\r\n\t\t\tkey = key.toLowerCase();\r\n\r\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\r\n\t\t\tvalue = value.trim();\r\n\r\n\t\t\tif ( key === 'newmtl' ) {\r\n\r\n\t\t\t\t// New material\r\n\r\n\t\t\t\tinfo = { name: value };\r\n\t\t\t\tmaterialsInfo[ value ] = info;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\r\n\r\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\r\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tinfo[ key ] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.resourcePath || path, this.materialOptions );\r\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\r\n\t\tmaterialCreator.setManager( this.manager );\r\n\t\tmaterialCreator.setMaterials( materialsInfo );\r\n\t\treturn materialCreator;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n/**\r\n * Create a new THREE.MTLLoader.MaterialCreator\r\n * @param baseUrl - Url relative to which textures are loaded\r\n * @param options - Set of options on how to construct the materials\r\n *                  side: Which side to apply the material\r\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\r\n *                  wrap: What type of wrapping to apply for textures\r\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\r\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\r\n *                                Default: false, assumed to be already normalized\r\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\r\n *                                  Default: false\r\n * @constructor\r\n */\r\n\r\nTHREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {\r\n\r\n\tthis.baseUrl = baseUrl || '';\r\n\tthis.options = options;\r\n\tthis.materialsInfo = {};\r\n\tthis.materials = {};\r\n\tthis.materialsArray = [];\r\n\tthis.nameLookup = {};\r\n\r\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\r\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\r\n\r\n};\r\n\r\nTHREE.MTLLoader.MaterialCreator.prototype = {\r\n\r\n\tconstructor: THREE.MTLLoader.MaterialCreator,\r\n\r\n\tcrossOrigin: 'anonymous',\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetManager: function ( value ) {\r\n\r\n\t\tthis.manager = value;\r\n\r\n\t},\r\n\r\n\tsetMaterials: function ( materialsInfo ) {\r\n\r\n\t\tthis.materialsInfo = this.convert( materialsInfo );\r\n\t\tthis.materials = {};\r\n\t\tthis.materialsArray = [];\r\n\t\tthis.nameLookup = {};\r\n\r\n\t},\r\n\r\n\tconvert: function ( materialsInfo ) {\r\n\r\n\t\tif ( ! this.options ) return materialsInfo;\r\n\r\n\t\tvar converted = {};\r\n\r\n\t\tfor ( var mn in materialsInfo ) {\r\n\r\n\t\t\t// Convert materials info into normalized form based on options\r\n\r\n\t\t\tvar mat = materialsInfo[ mn ];\r\n\r\n\t\t\tvar covmat = {};\r\n\r\n\t\t\tconverted[ mn ] = covmat;\r\n\r\n\t\t\tfor ( var prop in mat ) {\r\n\r\n\t\t\t\tvar save = true;\r\n\t\t\t\tvar value = mat[ prop ];\r\n\t\t\t\tvar lprop = prop.toLowerCase();\r\n\r\n\t\t\t\tswitch ( lprop ) {\r\n\r\n\t\t\t\t\tcase 'kd':\r\n\t\t\t\t\tcase 'ka':\r\n\t\t\t\t\tcase 'ks':\r\n\r\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\r\n\r\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\r\n\r\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\r\n\r\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\r\n\r\n\t\t\t\t\t\t\t\t// ignore\r\n\r\n\t\t\t\t\t\t\t\tsave = false;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( save ) {\r\n\r\n\t\t\t\t\tcovmat[ lprop ] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn converted;\r\n\r\n\t},\r\n\r\n\tpreload: function () {\r\n\r\n\t\tfor ( var mn in this.materialsInfo ) {\r\n\r\n\t\t\tthis.create( mn );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetIndex: function ( materialName ) {\r\n\r\n\t\treturn this.nameLookup[ materialName ];\r\n\r\n\t},\r\n\r\n\tgetAsArray: function () {\r\n\r\n\t\tvar index = 0;\r\n\r\n\t\tfor ( var mn in this.materialsInfo ) {\r\n\r\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\r\n\t\t\tthis.nameLookup[ mn ] = index;\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.materialsArray;\r\n\r\n\t},\r\n\r\n\tcreate: function ( materialName ) {\r\n\r\n\t\tif ( this.materials[ materialName ] === undefined ) {\r\n\r\n\t\t\tthis.createMaterial_( materialName );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.materials[ materialName ];\r\n\r\n\t},\r\n\r\n\tcreateMaterial_: function ( materialName ) {\r\n\r\n\t\t// Create material\r\n\r\n\t\tvar scope = this;\r\n\t\tvar mat = this.materialsInfo[ materialName ];\r\n\t\tvar params = {\r\n\r\n\t\t\tname: materialName,\r\n\t\t\tside: this.side\r\n\r\n\t\t};\r\n\r\n\t\tfunction resolveURL( baseUrl, url ) {\r\n\r\n\t\t\tif ( typeof url !== 'string' || url === '' )\r\n\t\t\t\treturn '';\r\n\r\n\t\t\t// Absolute URL\r\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\r\n\r\n\t\t\treturn baseUrl + url;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setMapForType( mapType, value ) {\r\n\r\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\r\n\r\n\t\t\tvar texParams = scope.getTextureParams( value, params );\r\n\t\t\tvar map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\r\n\r\n\t\t\tmap.repeat.copy( texParams.scale );\r\n\t\t\tmap.offset.copy( texParams.offset );\r\n\r\n\t\t\tmap.wrapS = scope.wrap;\r\n\t\t\tmap.wrapT = scope.wrap;\r\n\r\n\t\t\tparams[ mapType ] = map;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var prop in mat ) {\r\n\r\n\t\t\tvar value = mat[ prop ];\r\n\t\t\tvar n;\r\n\r\n\t\t\tif ( value === '' ) continue;\r\n\r\n\t\t\tswitch ( prop.toLowerCase() ) {\r\n\r\n\t\t\t\t// Ns is material specular exponent\r\n\r\n\t\t\t\tcase 'kd':\r\n\r\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\r\n\r\n\t\t\t\t\tparams.color = new THREE.Color().fromArray( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ks':\r\n\r\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\r\n\t\t\t\t\tparams.specular = new THREE.Color().fromArray( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ke':\r\n\r\n\t\t\t\t\t// Emissive using RGB values\r\n\t\t\t\t\tparams.emissive = new THREE.Color().fromArray( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_kd':\r\n\r\n\t\t\t\t\t// Diffuse texture map\r\n\r\n\t\t\t\t\tsetMapForType( \"map\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_ks':\r\n\r\n\t\t\t\t\t// Specular map\r\n\r\n\t\t\t\t\tsetMapForType( \"specularMap\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_ke':\r\n\r\n\t\t\t\t\t// Emissive map\r\n\r\n\t\t\t\t\tsetMapForType( \"emissiveMap\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'norm':\r\n\r\n\t\t\t\t\tsetMapForType( \"normalMap\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_bump':\r\n\t\t\t\tcase 'bump':\r\n\r\n\t\t\t\t\t// Bump texture map\r\n\r\n\t\t\t\t\tsetMapForType( \"bumpMap\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_d':\r\n\r\n\t\t\t\t\t// Alpha map\r\n\r\n\t\t\t\t\tsetMapForType( \"alphaMap\", value );\r\n\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ns':\r\n\r\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\r\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\r\n\r\n\t\t\t\t\tparams.shininess = parseFloat( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'd':\r\n\t\t\t\t\tn = parseFloat( value );\r\n\r\n\t\t\t\t\tif ( n < 1 ) {\r\n\r\n\t\t\t\t\t\tparams.opacity = n;\r\n\t\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'tr':\r\n\t\t\t\t\tn = parseFloat( value );\r\n\r\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\r\n\r\n\t\t\t\t\tif ( n > 0 ) {\r\n\r\n\t\t\t\t\t\tparams.opacity = 1 - n;\r\n\t\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\r\n\t\treturn this.materials[ materialName ];\r\n\r\n\t},\r\n\r\n\tgetTextureParams: function ( value, matParams ) {\r\n\r\n\t\tvar texParams = {\r\n\r\n\t\t\tscale: new THREE.Vector2( 1, 1 ),\r\n\t\t\toffset: new THREE.Vector2( 0, 0 )\r\n\r\n\t\t };\r\n\r\n\t\tvar items = value.split( /\\s+/ );\r\n\t\tvar pos;\r\n\r\n\t\tpos = items.indexOf( '-bm' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\r\n\t\t\titems.splice( pos, 2 );\r\n\r\n\t\t}\r\n\r\n\t\tpos = items.indexOf( '-s' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\r\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\r\n\r\n\t\t}\r\n\r\n\t\tpos = items.indexOf( '-o' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\r\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\r\n\r\n\t\t}\r\n\r\n\t\ttexParams.url = items.join( ' ' ).trim();\r\n\t\treturn texParams;\r\n\r\n\t},\r\n\r\n\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar texture;\r\n\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\r\n\t\tvar loader = manager.getHandler( url );\r\n\r\n\t\tif ( loader === null ) {\r\n\r\n\t\t\tloader = new THREE.TextureLoader( manager );\r\n\r\n\t\t}\r\n\r\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\r\n\t\ttexture = loader.load( url, onLoad, onProgress, onError );\r\n\r\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"script"}