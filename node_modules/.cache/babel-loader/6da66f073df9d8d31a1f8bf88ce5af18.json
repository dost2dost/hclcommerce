{"ast":null,"code":"/**\n * Split a delimited component property string (e.g., `material.color`) to an object\n * containing `component` name and `property` name. If there is no delimiter, just return the\n * string back.\n *\n * Cache arrays from splitting strings via delimiter to save on memory.\n *\n * @param {string} str - e.g., `material.opacity`.\n * @param {string} delimiter - e.g., `.`.\n * @returns {array} e.g., `['material', 'opacity']`.\n */\nvar propertyPathCache = {};\n\nfunction getComponentPropertyPath(str, delimiter) {\n  delimiter = delimiter || '.';\n\n  if (!propertyPathCache[delimiter]) {\n    propertyPathCache[delimiter] = {};\n  }\n\n  if (str.indexOf(delimiter) !== -1) {\n    propertyPathCache[delimiter][str] = str.split(delimiter);\n  } else {\n    propertyPathCache[delimiter][str] = str;\n  }\n\n  return propertyPathCache[delimiter][str];\n}\n\nmodule.exports.getComponentPropertyPath = getComponentPropertyPath;\nmodule.exports.propertyPathCache = propertyPathCache;\n/**\n * Get component property using encoded component name + component property name with a\n * delimiter.\n */\n\nmodule.exports.getComponentProperty = function (el, name, delimiter) {\n  var splitName;\n  delimiter = delimiter || '.';\n\n  if (name.indexOf(delimiter) !== -1) {\n    splitName = getComponentPropertyPath(name, delimiter);\n\n    if (splitName.constructor === String) {\n      return el.getAttribute(splitName);\n    }\n\n    return el.getAttribute(splitName[0])[splitName[1]];\n  }\n\n  return el.getAttribute(name);\n};\n/**\n * Set component property using encoded component name + component property name with a\n * delimiter.\n */\n\n\nmodule.exports.setComponentProperty = function (el, name, value, delimiter) {\n  var splitName;\n  delimiter = delimiter || '.';\n\n  if (name.indexOf(delimiter) !== -1) {\n    splitName = getComponentPropertyPath(name, delimiter);\n\n    if (splitName.constructor === String) {\n      el.setAttribute(splitName, value);\n    } else {\n      el.setAttribute(splitName[0], splitName[1], value);\n    }\n\n    return;\n  }\n\n  el.setAttribute(name, value);\n};","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/utils/entity.js"],"names":["propertyPathCache","getComponentPropertyPath","str","delimiter","indexOf","split","module","exports","getComponentProperty","el","name","splitName","constructor","String","getAttribute","setComponentProperty","value","setAttribute"],"mappings":"AAAA;;;;;;;;;;;AAWA,IAAIA,iBAAiB,GAAG,EAAxB;;AACA,SAASC,wBAAT,CAAmCC,GAAnC,EAAwCC,SAAxC,EAAmD;AACjDA,EAAAA,SAAS,GAAGA,SAAS,IAAI,GAAzB;;AACA,MAAI,CAACH,iBAAiB,CAACG,SAAD,CAAtB,EAAmC;AAAEH,IAAAA,iBAAiB,CAACG,SAAD,CAAjB,GAA+B,EAA/B;AAAoC;;AACzE,MAAID,GAAG,CAACE,OAAJ,CAAYD,SAAZ,MAA2B,CAAC,CAAhC,EAAmC;AACjCH,IAAAA,iBAAiB,CAACG,SAAD,CAAjB,CAA6BD,GAA7B,IAAoCA,GAAG,CAACG,KAAJ,CAAUF,SAAV,CAApC;AACD,GAFD,MAEO;AACLH,IAAAA,iBAAiB,CAACG,SAAD,CAAjB,CAA6BD,GAA7B,IAAoCA,GAApC;AACD;;AACD,SAAOF,iBAAiB,CAACG,SAAD,CAAjB,CAA6BD,GAA7B,CAAP;AACD;;AACDI,MAAM,CAACC,OAAP,CAAeN,wBAAf,GAA0CA,wBAA1C;AACAK,MAAM,CAACC,OAAP,CAAeP,iBAAf,GAAmCA,iBAAnC;AAEA;;;;;AAIAM,MAAM,CAACC,OAAP,CAAeC,oBAAf,GAAsC,UAAUC,EAAV,EAAcC,IAAd,EAAoBP,SAApB,EAA+B;AACnE,MAAIQ,SAAJ;AACAR,EAAAA,SAAS,GAAGA,SAAS,IAAI,GAAzB;;AACA,MAAIO,IAAI,CAACN,OAAL,CAAaD,SAAb,MAA4B,CAAC,CAAjC,EAAoC;AAClCQ,IAAAA,SAAS,GAAGV,wBAAwB,CAACS,IAAD,EAAOP,SAAP,CAApC;;AACA,QAAIQ,SAAS,CAACC,WAAV,KAA0BC,MAA9B,EAAsC;AACpC,aAAOJ,EAAE,CAACK,YAAH,CAAgBH,SAAhB,CAAP;AACD;;AACD,WAAOF,EAAE,CAACK,YAAH,CAAgBH,SAAS,CAAC,CAAD,CAAzB,EAA8BA,SAAS,CAAC,CAAD,CAAvC,CAAP;AACD;;AACD,SAAOF,EAAE,CAACK,YAAH,CAAgBJ,IAAhB,CAAP;AACD,CAXD;AAaA;;;;;;AAIAJ,MAAM,CAACC,OAAP,CAAeQ,oBAAf,GAAsC,UAAUN,EAAV,EAAcC,IAAd,EAAoBM,KAApB,EAA2Bb,SAA3B,EAAsC;AAC1E,MAAIQ,SAAJ;AACAR,EAAAA,SAAS,GAAGA,SAAS,IAAI,GAAzB;;AACA,MAAIO,IAAI,CAACN,OAAL,CAAaD,SAAb,MAA4B,CAAC,CAAjC,EAAoC;AAClCQ,IAAAA,SAAS,GAAGV,wBAAwB,CAACS,IAAD,EAAOP,SAAP,CAApC;;AACA,QAAIQ,SAAS,CAACC,WAAV,KAA0BC,MAA9B,EAAsC;AACpCJ,MAAAA,EAAE,CAACQ,YAAH,CAAgBN,SAAhB,EAA2BK,KAA3B;AACD,KAFD,MAEO;AACLP,MAAAA,EAAE,CAACQ,YAAH,CAAgBN,SAAS,CAAC,CAAD,CAAzB,EAA8BA,SAAS,CAAC,CAAD,CAAvC,EAA4CK,KAA5C;AACD;;AACD;AACD;;AACDP,EAAAA,EAAE,CAACQ,YAAH,CAAgBP,IAAhB,EAAsBM,KAAtB;AACD,CAbD","sourcesContent":["/**\n * Split a delimited component property string (e.g., `material.color`) to an object\n * containing `component` name and `property` name. If there is no delimiter, just return the\n * string back.\n *\n * Cache arrays from splitting strings via delimiter to save on memory.\n *\n * @param {string} str - e.g., `material.opacity`.\n * @param {string} delimiter - e.g., `.`.\n * @returns {array} e.g., `['material', 'opacity']`.\n */\nvar propertyPathCache = {};\nfunction getComponentPropertyPath (str, delimiter) {\n  delimiter = delimiter || '.';\n  if (!propertyPathCache[delimiter]) { propertyPathCache[delimiter] = {}; }\n  if (str.indexOf(delimiter) !== -1) {\n    propertyPathCache[delimiter][str] = str.split(delimiter);\n  } else {\n    propertyPathCache[delimiter][str] = str;\n  }\n  return propertyPathCache[delimiter][str];\n}\nmodule.exports.getComponentPropertyPath = getComponentPropertyPath;\nmodule.exports.propertyPathCache = propertyPathCache;\n\n/**\n * Get component property using encoded component name + component property name with a\n * delimiter.\n */\nmodule.exports.getComponentProperty = function (el, name, delimiter) {\n  var splitName;\n  delimiter = delimiter || '.';\n  if (name.indexOf(delimiter) !== -1) {\n    splitName = getComponentPropertyPath(name, delimiter);\n    if (splitName.constructor === String) {\n      return el.getAttribute(splitName);\n    }\n    return el.getAttribute(splitName[0])[splitName[1]];\n  }\n  return el.getAttribute(name);\n};\n\n/**\n * Set component property using encoded component name + component property name with a\n * delimiter.\n */\nmodule.exports.setComponentProperty = function (el, name, value, delimiter) {\n  var splitName;\n  delimiter = delimiter || '.';\n  if (name.indexOf(delimiter) !== -1) {\n    splitName = getComponentPropertyPath(name, delimiter);\n    if (splitName.constructor === String) {\n      el.setAttribute(splitName, value);\n    } else {\n      el.setAttribute(splitName[0], splitName[1], value);\n    }\n    return;\n  }\n  el.setAttribute(name, value);\n};\n"]},"metadata":{},"sourceType":"script"}