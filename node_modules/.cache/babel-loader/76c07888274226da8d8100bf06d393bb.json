{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { parseExpressions } from './parsers.js';\n/**\n * For our purposes, an enumeration is a fixed set of CSS-expression-compatible\n * names. When serialized, a selected subset of the members may be specified as\n * whitespace-separated strings. An enumeration deserializer is a function that\n * parses a serialized subset of an enumeration and returns any members that are\n * found as a Set.\n *\n * The following example will produce a deserializer for the days of the\n * week:\n *\n * const deserializeDaysOfTheWeek = enumerationDeserializer([\n *   'Monday',\n *   'Tuesday',\n *   'Wednesday',\n *   'Thursday',\n *   'Friday',\n *   'Saturday',\n *   'Sunday'\n * ]);\n */\n\nexport const enumerationDeserializer = allowedNames => valueString => {\n  try {\n    const expressions = parseExpressions(valueString);\n    const names = (expressions.length ? expressions[0].terms : []).filter(valueNode => valueNode && valueNode.type === 'ident').map(valueNode => valueNode.value).filter(name => allowedNames.indexOf(name) > -1); // NOTE(cdata): IE11 does not support constructing a Set directly from\n    // an iterable, so we need to manually add all the items:\n\n    const result = new Set();\n\n    for (const name of names) {\n      result.add(name);\n    }\n\n    return result;\n  } catch (_error) {}\n\n  return new Set();\n};","map":{"version":3,"sources":["../../src/styles/deserializers.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAeA,SAAmB,gBAAnB,QAA0C,cAA1C;AAGA;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,MAAM,uBAAuB,GAAsB,YAAnB,IAClC,WAAD,IAAgC;AAC9B,MAAI;AACF,UAAM,WAAW,GAAG,gBAAgB,CAAC,WAAD,CAApC;AACA,UAAM,KAAK,GAAG,CAAC,WAAW,CAAC,MAAZ,GAAqB,WAAW,CAAC,CAAD,CAAX,CAAe,KAApC,GAA4C,EAA7C,EACK,MADL,CAES,SAAD,IACI,SAAS,IAAI,SAAS,CAAC,IAAV,KAAmB,OAH5C,EAIK,GAJL,CAIS,SAAS,IAAI,SAAS,CAAC,KAJhC,EAKK,MALL,CAKY,IAAI,IAAI,YAAY,CAAC,OAAb,CAAqB,IAArB,IAA6B,CAAC,CALlD,CAAd,CAFE,CASF;AACA;;AACA,UAAM,MAAM,GAAG,IAAI,GAAJ,EAAf;;AACA,SAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACxB,MAAA,MAAM,CAAC,GAAP,CAAW,IAAX;AACD;;AACD,WAAO,MAAP;AACD,GAhBD,CAgBE,OAAO,MAAP,EAAe,CAChB;;AACD,SAAO,IAAI,GAAJ,EAAP;AACD,CArBE","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IdentNode, parseExpressions} from './parsers.js';\n\n\n/**\n * For our purposes, an enumeration is a fixed set of CSS-expression-compatible\n * names. When serialized, a selected subset of the members may be specified as\n * whitespace-separated strings. An enumeration deserializer is a function that\n * parses a serialized subset of an enumeration and returns any members that are\n * found as a Set.\n *\n * The following example will produce a deserializer for the days of the\n * week:\n *\n * const deserializeDaysOfTheWeek = enumerationDeserializer([\n *   'Monday',\n *   'Tuesday',\n *   'Wednesday',\n *   'Thursday',\n *   'Friday',\n *   'Saturday',\n *   'Sunday'\n * ]);\n */\nexport const enumerationDeserializer = <T extends string>(allowedNames: T[]) =>\n    (valueString: string): Set<T> => {\n      try {\n        const expressions = parseExpressions(valueString);\n        const names = (expressions.length ? expressions[0].terms : [])\n                          .filter<IdentNode>(\n                              (valueNode): valueNode is IdentNode =>\n                                  valueNode && valueNode.type === 'ident')\n                          .map(valueNode => valueNode.value as T)\n                          .filter(name => allowedNames.indexOf(name) > -1);\n\n        // NOTE(cdata): IE11 does not support constructing a Set directly from\n        // an iterable, so we need to manually add all the items:\n        const result = new Set<T>();\n        for (const name of names) {\n          result.add(name);\n        }\n        return result;\n      } catch (_error) {\n      }\n      return new Set();\n    };"],"sourceRoot":""},"metadata":{},"sourceType":"module"}