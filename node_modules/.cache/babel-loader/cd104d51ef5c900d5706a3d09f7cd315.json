{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const numberNode = (value, unit) => ({\n  type: 'number',\n  number: value,\n  unit\n});\n/**\n * Given a string representing a comma-separated set of CSS-like expressions,\n * parses and returns an array of ASTs that correspond to those expressions.\n *\n * Currently supported syntax includes:\n *\n *  - functions (top-level and nested)\n *  - calc() arithmetic operators\n *  - numbers with units\n *  - hexidecimal-encoded colors in 3, 6 or 8 digit form\n *  - idents\n *\n * All syntax is intended to match the parsing rules and semantics of the actual\n * CSS spec as closely as possible.\n *\n * @see https://www.w3.org/TR/CSS2/\n * @see https://www.w3.org/TR/css-values-3/\n */\n\nexport const parseExpressions = (() => {\n  const cache = {};\n  const MAX_PARSE_ITERATIONS = 1000; // Arbitrarily large\n\n  return inputString => {\n    const cacheKey = inputString;\n\n    if (cacheKey in cache) {\n      return cache[cacheKey];\n    }\n\n    const expressions = [];\n    let parseIterations = 0;\n\n    while (inputString) {\n      if (++parseIterations > MAX_PARSE_ITERATIONS) {\n        // Avoid a potentially infinite loop due to typos:\n        inputString = '';\n        break;\n      }\n\n      const expressionParseResult = parseExpression(inputString);\n      const expression = expressionParseResult.nodes[0];\n\n      if (expression == null || expression.terms.length === 0) {\n        break;\n      }\n\n      expressions.push(expression);\n      inputString = expressionParseResult.remainingInput;\n    }\n\n    return cache[cacheKey] = expressions;\n  };\n})();\n/**\n * Parse a single expression. For the purposes of our supported syntax, an\n * expression is the set of semantically meaningful terms that appear before the\n * next comma, or between the parens of a function invokation.\n */\n\nconst parseExpression = (() => {\n  const IS_IDENT_RE = /^(\\-\\-|[a-z\\u0240-\\uffff])/i;\n  const IS_OPERATOR_RE = /^([\\*\\+\\/]|[\\-]\\s)/i;\n  const IS_EXPRESSION_END_RE = /^[\\),]/;\n  const FUNCTION_ARGUMENTS_FIRST_TOKEN = '(';\n  const HEX_FIRST_TOKEN = '#';\n  return inputString => {\n    const terms = [];\n\n    while (inputString.length) {\n      inputString = inputString.trim();\n\n      if (IS_EXPRESSION_END_RE.test(inputString)) {\n        break;\n      } else if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n        const _parseFunctionArgumen = parseFunctionArguments(inputString),\n              nodes = _parseFunctionArgumen.nodes,\n              remainingInput = _parseFunctionArgumen.remainingInput;\n\n        inputString = remainingInput;\n        terms.push({\n          type: 'function',\n          name: {\n            type: 'ident',\n            value: 'calc'\n          },\n          arguments: nodes\n        });\n      } else if (IS_IDENT_RE.test(inputString)) {\n        const identParseResult = parseIdent(inputString);\n        const identNode = identParseResult.nodes[0];\n        inputString = identParseResult.remainingInput;\n\n        if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n          const _parseFunctionArgumen2 = parseFunctionArguments(inputString),\n                nodes = _parseFunctionArgumen2.nodes,\n                remainingInput = _parseFunctionArgumen2.remainingInput;\n\n          terms.push({\n            type: 'function',\n            name: identNode,\n            arguments: nodes\n          });\n          inputString = remainingInput;\n        } else {\n          terms.push(identNode);\n        }\n      } else if (IS_OPERATOR_RE.test(inputString)) {\n        // Operators are always a single character, so just pluck them out:\n        terms.push({\n          type: 'operator',\n          value: inputString[0]\n        });\n        inputString = inputString.slice(1);\n      } else {\n        const _ref = inputString[0] === HEX_FIRST_TOKEN ? parseHex(inputString) : parseNumber(inputString),\n              nodes = _ref.nodes,\n              remainingInput = _ref.remainingInput; // The remaining string may not have had any meaningful content. Exit\n        // early if this is the case:\n\n\n        if (nodes.length === 0) {\n          break;\n        }\n\n        terms.push(nodes[0]);\n        inputString = remainingInput;\n      }\n    }\n\n    return {\n      nodes: [{\n        type: 'expression',\n        terms\n      }],\n      remainingInput: inputString\n    };\n  };\n})();\n/**\n * An ident is something like a function name or the keyword \"auto\".\n */\n\n\nconst parseIdent = (() => {\n  const NOT_IDENT_RE = /[^a-z^0-9^_^\\-^\\u0240-\\uffff]/i;\n  return inputString => {\n    const match = inputString.match(NOT_IDENT_RE);\n    const ident = match == null ? inputString : inputString.substr(0, match.index);\n    const remainingInput = match == null ? '' : inputString.substr(match.index);\n    return {\n      nodes: [{\n        type: 'ident',\n        value: ident\n      }],\n      remainingInput\n    };\n  };\n})();\n/**\n * Parses a number. A number value can be expressed with an integer or\n * non-integer syntax, and usually includes a unit (but does not strictly\n * require one for our purposes).\n */\n\n\nconst parseNumber = (() => {\n  // @see https://www.w3.org/TR/css-syntax/#number-token-diagram\n  const VALUE_RE = /[\\+\\-]?(\\d+[\\.]\\d+|\\d+|[\\.]\\d+)([eE][\\+\\-]?\\d+)?/;\n  const UNIT_RE = /^[a-z%]+/i;\n  const ALLOWED_UNITS = /^(m|mm|cm|rad|deg|[%])$/;\n  return inputString => {\n    const valueMatch = inputString.match(VALUE_RE);\n    const value = valueMatch == null ? '0' : valueMatch[0];\n    inputString = value == null ? inputString : inputString.slice(value.length);\n    const unitMatch = inputString.match(UNIT_RE);\n    let unit = unitMatch != null && unitMatch[0] !== '' ? unitMatch[0] : null;\n    const remainingInput = unitMatch == null ? inputString : inputString.slice(unit.length);\n\n    if (unit != null && !ALLOWED_UNITS.test(unit)) {\n      unit = null;\n    }\n\n    return {\n      nodes: [{\n        type: 'number',\n        number: parseFloat(value) || 0,\n        unit: unit\n      }],\n      remainingInput\n    };\n  };\n})();\n/**\n * Parses a hexidecimal-encoded color in 3, 6 or 8 digit form.\n */\n\n\nconst parseHex = (() => {\n  // TODO(cdata): right now we don't actually enforce the number of digits\n  const HEX_RE = /^[a-f0-9]*/i;\n  return inputString => {\n    inputString = inputString.slice(1).trim();\n    const hexMatch = inputString.match(HEX_RE);\n    const nodes = hexMatch == null ? [] : [{\n      type: 'hex',\n      value: hexMatch[0]\n    }];\n    return {\n      nodes,\n      remainingInput: hexMatch == null ? inputString : inputString.slice(hexMatch[0].length)\n    };\n  };\n})();\n/**\n * Parses arguments passed to a function invokation (e.g., the expressions\n * within a matched set of parens).\n */\n\n\nconst parseFunctionArguments = inputString => {\n  const expressionNodes = []; // Consume the opening paren\n\n  inputString = inputString.slice(1).trim();\n\n  while (inputString.length) {\n    const expressionParseResult = parseExpression(inputString);\n    expressionNodes.push(expressionParseResult.nodes[0]);\n    inputString = expressionParseResult.remainingInput.trim();\n\n    if (inputString[0] === ',') {\n      inputString = inputString.slice(1).trim();\n    } else if (inputString[0] === ')') {\n      // Consume the closing paren and stop parsing\n      inputString = inputString.slice(1);\n      break;\n    }\n  }\n\n  return {\n    nodes: expressionNodes,\n    remainingInput: inputString\n  };\n};\n\nconst $visitedTypes = Symbol('visitedTypes');\n/**\n * An ASTWalker walks an array of ASTs such as the type produced by\n * parseExpressions and invokes a callback for a configured set of nodes that\n * the user wishes to \"visit\" during the walk.\n */\n\nexport class ASTWalker {\n  constructor(visitedTypes) {\n    this[$visitedTypes] = visitedTypes;\n  }\n  /**\n   * Walk the given set of ASTs, and invoke the provided callback for nodes that\n   * match the filtered set that the ASTWalker was constructed with.\n   */\n\n\n  walk(ast, callback) {\n    const remaining = ast.slice();\n\n    while (remaining.length) {\n      const next = remaining.shift();\n\n      if (this[$visitedTypes].indexOf(next.type) > -1) {\n        callback(next);\n      }\n\n      switch (next.type) {\n        case 'expression':\n          remaining.unshift(...next.terms);\n          break;\n\n        case 'function':\n          remaining.unshift(next.name, ...next.arguments);\n          break;\n      }\n    }\n  }\n\n}\nexport const ZERO = Object.freeze({\n  type: 'number',\n  number: 0,\n  unit: null\n});","map":{"version":3,"sources":["../../src/styles/parsers.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// The operators that are available in CSS calc() functions\n// include symbols for addition, subtraction, multiplication and division\n// @see https://www.w3.org/TR/css-values-3/#calc-syntax\nexport type Operator = '+'|'-'|'*'|'/';\n\n// We only support units for length in meters, radians and degrees for angles\n// and percentage values\nexport type Unit = 'm'|'cm'|'mm'|'rad'|'deg';\nexport type Percentage = '%';\n\n// Any node that might appear in a parsed expression is referred to as an\n// ExpressionTerm\nexport type ExpressionTerm =\n    IdentNode|HexNode|NumberNode|OperatorNode|FunctionNode;\n\nexport interface IdentNode {\n  type: 'ident';\n  value: string;\n}\n\nexport interface HexNode {\n  type: 'hex';\n  value: string;\n}\n\nexport interface NumberNode<U = Unit | Percentage | null> {\n  type: 'number';\n  number: number;\n  unit: U;\n}\n\nexport const numberNode =\n    <T extends Unit|Percentage|null>(value: number, unit: T): NumberNode<T> =>\n        ({type: 'number', number: value, unit});\n\nexport interface OperatorNode {\n  type: 'operator';\n  value: Operator;\n}\n\nexport interface FunctionNode {\n  type: 'function';\n  name: IdentNode;\n  arguments: Array<ExpressionNode>;\n}\n\nexport interface ExpressionNode {\n  type: 'expression';\n  terms: Array<ExpressionTerm>;\n}\n\nexport type ASTNode =\n    IdentNode|HexNode|NumberNode|OperatorNode|FunctionNode|ExpressionNode;\n\n// As an internal detail of this module, non-exported parsers return both a\n// set of nodes and the remaining string input to be parsed. This saves us a bit\n// of book keeping work and allows our internal parser implementations to remain\n// essentially stateless.\ninterface ParseResult<T extends ASTNode> {\n  nodes: Array<T>;\n  remainingInput: string;\n}\n\n/**\n * Given a string representing a comma-separated set of CSS-like expressions,\n * parses and returns an array of ASTs that correspond to those expressions.\n *\n * Currently supported syntax includes:\n *\n *  - functions (top-level and nested)\n *  - calc() arithmetic operators\n *  - numbers with units\n *  - hexidecimal-encoded colors in 3, 6 or 8 digit form\n *  - idents\n *\n * All syntax is intended to match the parsing rules and semantics of the actual\n * CSS spec as closely as possible.\n *\n * @see https://www.w3.org/TR/CSS2/\n * @see https://www.w3.org/TR/css-values-3/\n */\nexport const parseExpressions = (() => {\n  const cache: {[index: string]: Array<ExpressionNode>} = {};\n  const MAX_PARSE_ITERATIONS = 1000;  // Arbitrarily large\n\n  return (inputString: string): Array<ExpressionNode> => {\n    const cacheKey = inputString;\n\n    if (cacheKey in cache) {\n      return cache[cacheKey];\n    }\n\n    const expressions: Array<ExpressionNode> = [];\n    let parseIterations = 0;\n\n    while (inputString) {\n      if (++parseIterations > MAX_PARSE_ITERATIONS) {\n        // Avoid a potentially infinite loop due to typos:\n        inputString = '';\n        break;\n      }\n\n      const expressionParseResult = parseExpression(inputString);\n      const expression = expressionParseResult.nodes[0];\n\n      if (expression == null || expression.terms.length === 0) {\n        break;\n      }\n\n      expressions.push(expression);\n      inputString = expressionParseResult.remainingInput;\n    }\n\n    return cache[cacheKey] = expressions;\n  };\n})();\n\n\n/**\n * Parse a single expression. For the purposes of our supported syntax, an\n * expression is the set of semantically meaningful terms that appear before the\n * next comma, or between the parens of a function invokation.\n */\nconst parseExpression = (() => {\n  const IS_IDENT_RE = /^(\\-\\-|[a-z\\u0240-\\uffff])/i;\n  const IS_OPERATOR_RE = /^([\\*\\+\\/]|[\\-]\\s)/i;\n  const IS_EXPRESSION_END_RE = /^[\\),]/;\n  const FUNCTION_ARGUMENTS_FIRST_TOKEN = '(';\n  const HEX_FIRST_TOKEN = '#';\n\n  return (inputString: string): ParseResult<ExpressionNode> => {\n    const terms: Array<ExpressionTerm> = [];\n\n    while (inputString.length) {\n      inputString = inputString.trim();\n\n      if (IS_EXPRESSION_END_RE.test(inputString)) {\n        break;\n      } else if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n        const {nodes, remainingInput} = parseFunctionArguments(inputString);\n\n        inputString = remainingInput;\n\n        terms.push({\n          type: 'function',\n          name: {type: 'ident', value: 'calc'},\n          arguments: nodes\n        });\n      } else if (IS_IDENT_RE.test(inputString)) {\n        const identParseResult = parseIdent(inputString);\n        const identNode = identParseResult.nodes[0];\n\n        inputString = identParseResult.remainingInput;\n\n        if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n          const {nodes, remainingInput} = parseFunctionArguments(inputString);\n          terms.push({type: 'function', name: identNode, arguments: nodes});\n          inputString = remainingInput;\n        } else {\n          terms.push(identNode);\n        }\n      } else if (IS_OPERATOR_RE.test(inputString)) {\n        // Operators are always a single character, so just pluck them out:\n        terms.push({type: 'operator', value: inputString[0] as Operator});\n        inputString = inputString.slice(1);\n      } else {\n        const {nodes, remainingInput} = inputString[0] === HEX_FIRST_TOKEN ?\n            parseHex(inputString) :\n            parseNumber(inputString);\n\n        // The remaining string may not have had any meaningful content. Exit\n        // early if this is the case:\n        if (nodes.length === 0) {\n          break;\n        }\n\n        terms.push(nodes[0]);\n        inputString = remainingInput;\n      }\n    }\n\n    return {nodes: [{type: 'expression', terms}], remainingInput: inputString};\n  };\n})();\n\n\n/**\n * An ident is something like a function name or the keyword \"auto\".\n */\nconst parseIdent = (() => {\n  const NOT_IDENT_RE = /[^a-z^0-9^_^\\-^\\u0240-\\uffff]/i;\n\n  return (inputString: string): ParseResult<IdentNode> => {\n    const match = inputString.match(NOT_IDENT_RE);\n    const ident =\n        match == null ? inputString : inputString.substr(0, match.index);\n    const remainingInput =\n        match == null ? '' : inputString.substr(match.index!);\n\n    return {nodes: [{type: 'ident', value: ident}], remainingInput};\n  };\n})();\n\n\n/**\n * Parses a number. A number value can be expressed with an integer or\n * non-integer syntax, and usually includes a unit (but does not strictly\n * require one for our purposes).\n */\nconst parseNumber = (() => {\n  // @see https://www.w3.org/TR/css-syntax/#number-token-diagram\n  const VALUE_RE = /[\\+\\-]?(\\d+[\\.]\\d+|\\d+|[\\.]\\d+)([eE][\\+\\-]?\\d+)?/;\n  const UNIT_RE = /^[a-z%]+/i;\n  const ALLOWED_UNITS = /^(m|mm|cm|rad|deg|[%])$/;\n\n  return (inputString: string): ParseResult<NumberNode> => {\n    const valueMatch = inputString.match(VALUE_RE);\n    const value = valueMatch == null ? '0' : valueMatch[0];\n    inputString = value == null ? inputString : inputString.slice(value.length);\n\n    const unitMatch = inputString.match(UNIT_RE);\n    let unit = unitMatch != null && unitMatch[0] !== '' ? unitMatch[0] : null;\n    const remainingInput =\n        unitMatch == null ? inputString : inputString.slice(unit!.length);\n\n    if (unit != null && !ALLOWED_UNITS.test(unit)) {\n      unit = null;\n    }\n\n    return {\n      nodes: [{\n        type: 'number',\n        number: parseFloat(value) || 0,\n        unit: unit as Unit | Percentage | null\n      }],\n      remainingInput\n    };\n  };\n})();\n\n\n/**\n * Parses a hexidecimal-encoded color in 3, 6 or 8 digit form.\n */\nconst parseHex = (() => {\n  // TODO(cdata): right now we don't actually enforce the number of digits\n  const HEX_RE = /^[a-f0-9]*/i;\n\n  return (inputString: string): ParseResult<HexNode> => {\n    inputString = inputString.slice(1).trim();\n    const hexMatch = inputString.match(HEX_RE);\n    const nodes: Array<HexNode> =\n        hexMatch == null ? [] : [{type: 'hex', value: hexMatch[0]}];\n\n    return {\n      nodes,\n      remainingInput: hexMatch == null ? inputString :\n                                         inputString.slice(hexMatch[0].length)\n    };\n  };\n})();\n\n\n/**\n * Parses arguments passed to a function invokation (e.g., the expressions\n * within a matched set of parens).\n */\nconst parseFunctionArguments =\n    (inputString: string): ParseResult<ExpressionNode> => {\n      const expressionNodes: Array<ExpressionNode> = [];\n\n      // Consume the opening paren\n      inputString = inputString.slice(1).trim();\n\n      while (inputString.length) {\n        const expressionParseResult = parseExpression(inputString);\n        expressionNodes.push(expressionParseResult.nodes[0]);\n        inputString = expressionParseResult.remainingInput.trim();\n\n        if (inputString[0] === ',') {\n          inputString = inputString.slice(1).trim();\n        } else if (inputString[0] === ')') {\n          // Consume the closing paren and stop parsing\n          inputString = inputString.slice(1);\n          break;\n        }\n      }\n\n      return {nodes: expressionNodes, remainingInput: inputString};\n    };\n\n\nexport type ASTWalkerCallback<T> = (node: T) => void;\n\nconst $visitedTypes = Symbol('visitedTypes');\n\n/**\n * An ASTWalker walks an array of ASTs such as the type produced by\n * parseExpressions and invokes a callback for a configured set of nodes that\n * the user wishes to \"visit\" during the walk.\n */\nexport class ASTWalker<T extends ASTNode> {\n  protected[$visitedTypes]: Array<string>;\n  constructor(visitedTypes: Array<string>) {\n    this[$visitedTypes] = visitedTypes;\n  }\n\n  /**\n   * Walk the given set of ASTs, and invoke the provided callback for nodes that\n   * match the filtered set that the ASTWalker was constructed with.\n   */\n  walk(ast: Array<ExpressionNode>, callback: ASTWalkerCallback<T>) {\n    const remaining: Array<ASTNode> = ast.slice();\n\n    while (remaining.length) {\n      const next = remaining.shift()!;\n\n      if (this[$visitedTypes].indexOf(next.type) > -1) {\n        callback(next as T);\n      }\n\n      switch (next.type) {\n        case 'expression':\n          remaining.unshift(...next.terms);\n          break;\n        case 'function':\n          remaining.unshift(next.name, ...next.arguments);\n          break;\n      }\n    }\n  }\n}\n\nexport const ZERO: NumberNode =\n    Object.freeze({type: 'number', number: 0, unit: null});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}