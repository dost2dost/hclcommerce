{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\n\nimport { clamp } from '../utilities.js';\nconst $ongoingActivities = Symbol('ongoingActivities');\nconst $announceTotalProgress = Symbol('announceTotalProgress');\nconst $eventDelegate = Symbol('eventDelegate');\nconst ACTIVITY_PROGRESS_WEIGHT = 0.5;\n/**\n * ProgressTracker is an event emitter that helps to track the ongoing progress\n * of many simultaneous actions.\n *\n * ProgressTracker reports progress activity in the form of a progress event.\n * The event.detail.totalProgress value indicates the elapsed progress of all\n * activities being tracked by the ProgressTracker.\n *\n * The value of totalProgress is a number that progresses from 0 to 1. The\n * ProgressTracker allows for the lazy accumulation of tracked actions, so the\n * total progress represents a abstract, non-absolute progress towards the\n * completion of all currently tracked events.\n *\n * When all currently tracked activities are finished, the ProgressTracker\n * emits one final progress event and then resets the list of its currently\n * tracked activities. This means that from an observer's perspective,\n * ongoing activities will accumulate and collectively contribute to the notion\n * of total progress until all currently tracked ongoing activities have\n * completed.\n */\n\nexport class ProgressTracker {\n  constructor() {\n    // NOTE(cdata): This eventDelegate hack is a quick trick to let us get the\n    // EventTarget interface without implementing or requiring a full polyfill. We\n    // should remove this once EventTarget is inheritable everywhere.\n    this[_a] = document.createDocumentFragment(); // NOTE(cdata): We declare each of these methods independently here so that we\n    // can inherit the correct types from EventTarget's interface. Maybe there is\n    // a better way to do this dynamically so that we don't repeat ourselves?\n\n    this.addEventListener = (...args) => this[$eventDelegate].addEventListener(...args);\n\n    this.removeEventListener = (...args) => this[$eventDelegate].removeEventListener(...args);\n\n    this.dispatchEvent = (...args) => this[$eventDelegate].dispatchEvent(...args);\n\n    this[_b] = new Set();\n  }\n  /**\n   * The total number of activities currently being tracked.\n   */\n\n\n  get ongoingActivityCount() {\n    return this[$ongoingActivities].size;\n  }\n  /**\n   * Registers a new activity to be tracked by the progress tracker. The method\n   * returns a special callback that should be invoked whenever new progress is\n   * ready to be reported. The progress should be reported as a value between 0\n   * and 1, where 0 would represent the beginning of the action and 1 would\n   * represent its completion.\n   *\n   * There is no built-in notion of a time-out for ongoing activities, so once\n   * an ongoing activity is begun, it is up to the consumer of this API to\n   * update the progress until that activity is no longer ongoing.\n   *\n   * Progress is only allowed to move forward for any given activity. If a lower\n   * progress is reported than the previously reported progress, it will be\n   * ignored.\n   */\n\n\n  beginActivity() {\n    const activity = {\n      progress: 0\n    };\n    this[$ongoingActivities].add(activity);\n\n    if (this.ongoingActivityCount === 1) {\n      // Announce the first progress event (which should always be 0 / 1\n      // total progress):\n      this[$announceTotalProgress]();\n    }\n\n    return progress => {\n      let nextProgress;\n      nextProgress = Math.max(clamp(progress, 0, 1), activity.progress);\n\n      if (nextProgress !== activity.progress) {\n        activity.progress = nextProgress;\n        this[$announceTotalProgress]();\n      }\n\n      return activity.progress;\n    };\n  }\n\n  [(_a = $eventDelegate, _b = $ongoingActivities, $announceTotalProgress)]() {\n    let totalProgress = 0;\n    let statusCount = 0;\n    let completedActivities = 0;\n\n    for (const activity of this[$ongoingActivities]) {\n      const progress = activity.progress;\n      const compoundWeight = ACTIVITY_PROGRESS_WEIGHT / Math.pow(2, statusCount++);\n      totalProgress += progress * compoundWeight;\n\n      if (progress === 1.0) {\n        completedActivities++;\n      }\n    }\n\n    if (completedActivities === this.ongoingActivityCount) {\n      totalProgress = 1.0;\n      this[$ongoingActivities].clear();\n    }\n\n    this.dispatchEvent(new CustomEvent('progress', {\n      detail: {\n        totalProgress\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["../../src/utilities/progress-tracker.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeA,SAAQ,KAAR,QAAoB,iBAApB;AAKA,MAAM,kBAAkB,GAAG,MAAM,CAAC,mBAAD,CAAjC;AACA,MAAM,sBAAsB,GAAG,MAAM,CAAC,uBAAD,CAArC;AACA,MAAM,cAAc,GAAG,MAAM,CAAC,eAAD,CAA7B;AAEA,MAAM,wBAAwB,GAAG,GAAjC;AAmBA;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,MAAO,eAAP,CAAsB;AAA5B,EAAA,WAAA,GAAA;AACE;AACA;AACA;AACS,SAAA,EAAA,IACL,QAAQ,CAAC,sBAAT,EADK,CAJX,CAOE;AACA;AACA;;AACO,SAAA,gBAAA,GACH,CAAC,GAAG,IAAJ,KAAa,KAAK,cAAL,EAAqB,gBAArB,CAAsC,GAAG,IAAzC,CADV;;AAEA,SAAA,mBAAA,GACH,CAAC,GAAG,IAAJ,KAAa,KAAK,cAAL,EAAqB,mBAArB,CAAyC,GAAG,IAA5C,CADV;;AAEA,SAAA,aAAA,GACH,CAAC,GAAG,IAAJ,KAAa,KAAK,cAAL,EAAqB,aAArB,CAAmC,GAAG,IAAtC,CADV;;AAIE,SAAA,EAAA,IAA6C,IAAI,GAAJ,EAA7C;AA0EV;AAxEC;;;;;AAGA,MAAI,oBAAJ,GAAwB;AACtB,WAAO,KAAK,kBAAL,EAAyB,IAAhC;AACD;AAED;;;;;;;;;;;;;;;;;AAeA,EAAA,aAAa,GAAA;AACX,UAAM,QAAQ,GAAoB;AAAC,MAAA,QAAQ,EAAE;AAAX,KAAlC;AAEA,SAAK,kBAAL,EAAyB,GAAzB,CAA6B,QAA7B;;AAEA,QAAI,KAAK,oBAAL,KAA8B,CAAlC,EAAqC;AACnC;AACA;AACA,WAAK,sBAAL;AACD;;AAED,WAAQ,QAAD,IAA6B;AAClC,UAAI,YAAJ;AAEA,MAAA,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,QAAD,EAAW,CAAX,EAAc,CAAd,CAAd,EAAgC,QAAQ,CAAC,QAAzC,CAAf;;AAEA,UAAI,YAAY,KAAK,QAAQ,CAAC,QAA9B,EAAwC;AACtC,QAAA,QAAQ,CAAC,QAAT,GAAoB,YAApB;AACA,aAAK,sBAAL;AACD;;AAED,aAAO,QAAQ,CAAC,QAAhB;AACD,KAXD;AAYD;;AAED,IAAA,EAAA,GA/DU,cA+DV,EA/DwB,EAAA,GAcd,kBAiDV,EAAC,sBAAD,KAAwB;AACtB,QAAI,aAAa,GAAG,CAApB;AACA,QAAI,WAAW,GAAG,CAAlB;AACA,QAAI,mBAAmB,GAAG,CAA1B;;AAEA,SAAK,MAAM,QAAX,IAAuB,KAAK,kBAAL,CAAvB,EAAiD;AAAA,YACxC,QADwC,GAC5B,QAD4B,CACxC,QADwC;AAE/C,YAAM,cAAc,GAChB,wBAAwB,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,WAAW,EAAvB,CAD/B;AAGA,MAAA,aAAa,IAAI,QAAQ,GAAG,cAA5B;;AAEA,UAAI,QAAQ,KAAK,GAAjB,EAAsB;AACpB,QAAA,mBAAmB;AACpB;AACF;;AAED,QAAI,mBAAmB,KAAK,KAAK,oBAAjC,EAAuD;AACrD,MAAA,aAAa,GAAG,GAAhB;AACA,WAAK,kBAAL,EAAyB,KAAzB;AACD;;AAED,SAAK,aAAL,CAAmB,IAAI,WAAJ,CACf,UADe,EACH;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA;AAAD;AAAT,KADG,CAAnB;AAED;;AA3FyB","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {clamp} from '../utilities.js';\n\ninterface OngoingActivity {\n  progress: number;\n}\nconst $ongoingActivities = Symbol('ongoingActivities');\nconst $announceTotalProgress = Symbol('announceTotalProgress');\nconst $eventDelegate = Symbol('eventDelegate');\n\nconst ACTIVITY_PROGRESS_WEIGHT = 0.5;\n\n/**\n * An Activity is represented by a callback that accepts values from 0 to 1,\n * where 1 represents the completion of the activity. The callback returns the\n * actual progress as it is stored by the ProgressTracker (which may be clamped,\n * and can never be lower than its previous value).\n */\nexport type Activity = (progress: number) => number;\n\n/**\n * A progress event contains the total progress of all ongoing activities in the\n * ProgressTracker. The progress is a heuristic, should not be considered an\n * absolute representation of progress across any or all events.\n */\nexport interface ProgressDetails {\n  totalProgress: number;\n}\n\n/**\n * ProgressTracker is an event emitter that helps to track the ongoing progress\n * of many simultaneous actions.\n *\n * ProgressTracker reports progress activity in the form of a progress event.\n * The event.detail.totalProgress value indicates the elapsed progress of all\n * activities being tracked by the ProgressTracker.\n *\n * The value of totalProgress is a number that progresses from 0 to 1. The\n * ProgressTracker allows for the lazy accumulation of tracked actions, so the\n * total progress represents a abstract, non-absolute progress towards the\n * completion of all currently tracked events.\n *\n * When all currently tracked activities are finished, the ProgressTracker\n * emits one final progress event and then resets the list of its currently\n * tracked activities. This means that from an observer's perspective,\n * ongoing activities will accumulate and collectively contribute to the notion\n * of total progress until all currently tracked ongoing activities have\n * completed.\n */\nexport class ProgressTracker implements EventTarget {\n  // NOTE(cdata): This eventDelegate hack is a quick trick to let us get the\n  // EventTarget interface without implementing or requiring a full polyfill. We\n  // should remove this once EventTarget is inheritable everywhere.\n  protected[$eventDelegate]: DocumentFragment =\n      document.createDocumentFragment();\n\n  // NOTE(cdata): We declare each of these methods independently here so that we\n  // can inherit the correct types from EventTarget's interface. Maybe there is\n  // a better way to do this dynamically so that we don't repeat ourselves?\n  public addEventListener: typeof EventTarget.prototype.addEventListener =\n      (...args) => this[$eventDelegate].addEventListener(...args);\n  public removeEventListener: typeof EventTarget.prototype.removeEventListener =\n      (...args) => this[$eventDelegate].removeEventListener(...args);\n  public dispatchEvent: typeof EventTarget.prototype.dispatchEvent =\n      (...args) => this[$eventDelegate].dispatchEvent(...args);\n\n\n  protected[$ongoingActivities]: Set<OngoingActivity> = new Set();\n\n  /**\n   * The total number of activities currently being tracked.\n   */\n  get ongoingActivityCount(): number {\n    return this[$ongoingActivities].size;\n  }\n\n  /**\n   * Registers a new activity to be tracked by the progress tracker. The method\n   * returns a special callback that should be invoked whenever new progress is\n   * ready to be reported. The progress should be reported as a value between 0\n   * and 1, where 0 would represent the beginning of the action and 1 would\n   * represent its completion.\n   *\n   * There is no built-in notion of a time-out for ongoing activities, so once\n   * an ongoing activity is begun, it is up to the consumer of this API to\n   * update the progress until that activity is no longer ongoing.\n   *\n   * Progress is only allowed to move forward for any given activity. If a lower\n   * progress is reported than the previously reported progress, it will be\n   * ignored.\n   */\n  beginActivity(): Activity {\n    const activity: OngoingActivity = {progress: 0};\n\n    this[$ongoingActivities].add(activity);\n\n    if (this.ongoingActivityCount === 1) {\n      // Announce the first progress event (which should always be 0 / 1\n      // total progress):\n      this[$announceTotalProgress]();\n    }\n\n    return (progress: number): number => {\n      let nextProgress: number;\n\n      nextProgress = Math.max(clamp(progress, 0, 1), activity.progress);\n\n      if (nextProgress !== activity.progress) {\n        activity.progress = nextProgress;\n        this[$announceTotalProgress]();\n      }\n\n      return activity.progress;\n    };\n  }\n\n  [$announceTotalProgress]() {\n    let totalProgress = 0;\n    let statusCount = 0;\n    let completedActivities = 0;\n\n    for (const activity of this[$ongoingActivities]) {\n      const {progress} = activity;\n      const compoundWeight =\n          ACTIVITY_PROGRESS_WEIGHT / Math.pow(2, statusCount++);\n\n      totalProgress += progress * compoundWeight;\n\n      if (progress === 1.0) {\n        completedActivities++;\n      }\n    }\n\n    if (completedActivities === this.ongoingActivityCount) {\n      totalProgress = 1.0;\n      this[$ongoingActivities].clear();\n    }\n\n    this.dispatchEvent(new CustomEvent<ProgressDetails>(\n        'progress', {detail: {totalProgress}}));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}