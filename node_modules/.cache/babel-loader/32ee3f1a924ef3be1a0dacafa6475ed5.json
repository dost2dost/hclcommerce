{"ast":null,"code":"var registerComponent = require('../core/component').registerComponent;\n\nvar bind = require('../utils/bind');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\n\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\nvar VIVE_CONTROLLER_MODEL_OBJ_URL = 'https://cdn.aframe.io/controllers/vive/vr_controller_vive.obj';\nvar VIVE_CONTROLLER_MODEL_OBJ_MTL = 'https://cdn.aframe.io/controllers/vive/vr_controller_vive.mtl';\n\nvar isWebXRAvailable = require('../utils/').device.isWebXRAvailable;\n\nvar GAMEPAD_ID_WEBXR = 'htc-vive-controller-mv';\nvar GAMEPAD_ID_WEBVR = 'OpenVR '; // Prefix for Gen1 and Gen2 Oculus Touch Controllers.\n\nvar GAMEPAD_ID_PREFIX = isWebXRAvailable ? GAMEPAD_ID_WEBXR : GAMEPAD_ID_WEBVR;\n/**\n * Button IDs:\n * 0 - trackpad\n * 1 - trigger (intensity value from 0.5 to 1)\n * 2 - grip\n * 3 - menu (dispatch but better for menu options)\n * 4 - system (never dispatched on this layer)\n */\n\nvar INPUT_MAPPING_WEBVR = {\n  axes: {\n    trackpad: [0, 1]\n  },\n  buttons: ['trackpad', 'trigger', 'grip', 'menu', 'system']\n};\n/**\n * Button IDs:\n * 0 - trigger\n * 1 - squeeze\n * 2 - touchpad\n * 3 - none (dispatch but better for menu options)\n * 4 - menu (never dispatched on this layer)\n *\n * Axis:\n * 0 - touchpad x axis\n * 1 - touchpad y axis\n * Reference: https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/htc/htc-vive.json\n */\n\nvar INPUT_MAPPING_WEBXR = {\n  axes: {\n    thumbstick: [0, 1]\n  },\n  buttons: ['trigger', 'grip', 'trackpad', 'none', 'menu']\n};\nvar INPUT_MAPPING = isWebXRAvailable ? INPUT_MAPPING_WEBXR : INPUT_MAPPING_WEBVR;\n/**\n * Vive controls.\n * Interface with Vive controllers and map Gamepad events to controller buttons:\n * trackpad, trigger, grip, menu, system\n * Load a controller model and highlight the pressed buttons.\n */\n\nmodule.exports.Component = registerComponent('vive-controls', {\n  schema: {\n    hand: {\n      default: 'left'\n    },\n    buttonColor: {\n      type: 'color',\n      default: '#FAFAFA'\n    },\n    // Off-white.\n    buttonHighlightColor: {\n      type: 'color',\n      default: '#22D1EE'\n    },\n    // Light blue.\n    model: {\n      default: true\n    },\n    orientationOffset: {\n      type: 'vec3'\n    }\n  },\n  mapping: INPUT_MAPPING,\n  init: function () {\n    var self = this;\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n\n    this.onButtonDown = function (evt) {\n      onButtonEvent(evt.detail.id, 'down', self);\n    };\n\n    this.onButtonUp = function (evt) {\n      onButtonEvent(evt.detail.id, 'up', self);\n    };\n\n    this.onButtonTouchEnd = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchend', self);\n    };\n\n    this.onButtonTouchStart = function (evt) {\n      onButtonEvent(evt.detail.id, 'touchstart', self);\n    };\n\n    this.previousButtonValues = {};\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n    this.bindMethods();\n  },\n  update: function () {\n    var data = this.data;\n    this.controllerIndex = data.hand === 'right' ? 0 : data.hand === 'left' ? 1 : 2;\n  },\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.removeControllersUpdateListener = bind(this.removeControllersUpdateListener, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    el.addEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = true;\n  },\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('model-loaded', this.onModelLoaded);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = false;\n  },\n\n  /**\n   * Once OpenVR returns correct hand data in supporting browsers, we can use hand property.\n   * var isPresent = checkControllerPresentAndSetup(this.el.sceneEl, GAMEPAD_ID_PREFIX,\n                                                        { hand: data.hand });\n   * Until then, use hardcoded index.\n   */\n  checkIfControllerPresent: function () {\n    var data = this.data;\n    checkControllerPresentAndSetup(this, GAMEPAD_ID_PREFIX, {\n      index: this.controllerIndex,\n      hand: data.hand\n    });\n  },\n  injectTrackedControls: function () {\n    var el = this.el;\n    var data = this.data; // If we have an OpenVR Gamepad, use the fixed mapping.\n\n    el.setAttribute('tracked-controls', {\n      idPrefix: GAMEPAD_ID_PREFIX,\n      hand: data.hand,\n      controller: this.controllerIndex,\n      orientationOffset: data.orientationOffset\n    }); // Load model.\n\n    if (!this.data.model) {\n      return;\n    }\n\n    this.el.setAttribute('obj-model', {\n      obj: VIVE_CONTROLLER_MODEL_OBJ_URL,\n      mtl: VIVE_CONTROLLER_MODEL_OBJ_MTL\n    });\n  },\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n  onControllersUpdate: function () {\n    this.checkIfControllerPresent();\n  },\n\n  /**\n   * Rotate the trigger button based on how hard the trigger is pressed.\n   */\n  onButtonChanged: function (evt) {\n    var button = this.mapping.buttons[evt.detail.id];\n    var buttonMeshes = this.buttonMeshes;\n    var analogValue;\n\n    if (!button) {\n      return;\n    }\n\n    if (button === 'trigger') {\n      analogValue = evt.detail.state.value; // Update trigger rotation depending on button value.\n\n      if (buttonMeshes && buttonMeshes.trigger) {\n        buttonMeshes.trigger.rotation.x = -analogValue * (Math.PI / 12);\n      }\n    } // Pass along changed event with button state, using button mapping for convenience.\n\n\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n  onModelLoaded: function (evt) {\n    var buttonMeshes;\n    var controllerObject3D = evt.detail.model;\n    var self = this;\n\n    if (!this.data.model) {\n      return;\n    } // Store button meshes object to be able to change their colors.\n\n\n    buttonMeshes = this.buttonMeshes = {};\n    buttonMeshes.grip = {\n      left: controllerObject3D.getObjectByName('leftgrip'),\n      right: controllerObject3D.getObjectByName('rightgrip')\n    };\n    buttonMeshes.menu = controllerObject3D.getObjectByName('menubutton');\n    buttonMeshes.system = controllerObject3D.getObjectByName('systembutton');\n    buttonMeshes.trackpad = controllerObject3D.getObjectByName('touchpad');\n    buttonMeshes.trigger = controllerObject3D.getObjectByName('trigger'); // Set default colors.\n\n    Object.keys(buttonMeshes).forEach(function (buttonName) {\n      self.setButtonColor(buttonName, self.data.buttonColor);\n    }); // Offset pivot point.\n\n    controllerObject3D.position.set(0, -0.015, 0.04);\n  },\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping.axes, evt);\n  },\n  updateModel: function (buttonName, evtName) {\n    var color;\n    var isTouch;\n\n    if (!this.data.model) {\n      return;\n    }\n\n    isTouch = evtName.indexOf('touch') !== -1; // Don't change color for trackpad touch.\n\n    if (isTouch) {\n      return;\n    } // Update colors.\n\n\n    color = evtName === 'up' ? this.data.buttonColor : this.data.buttonHighlightColor;\n    this.setButtonColor(buttonName, color);\n  },\n  setButtonColor: function (buttonName, color) {\n    var buttonMeshes = this.buttonMeshes;\n    var rendererSystem = this.rendererSystem;\n\n    if (!buttonMeshes) {\n      return;\n    } // Need to do both left and right sides for grip.\n\n\n    if (buttonName === 'grip') {\n      buttonMeshes.grip.left.material.color.set(color);\n      buttonMeshes.grip.right.material.color.set(color);\n      rendererSystem.applyColorCorrection(buttonMeshes.grip.left.material.color);\n      rendererSystem.applyColorCorrection(buttonMeshes.grip.right.material.color);\n      return;\n    }\n\n    buttonMeshes[buttonName].material.color.set(color);\n    rendererSystem.applyColorCorrection(buttonMeshes[buttonName].material.color);\n  }\n});","map":{"version":3,"sources":["C:/Users/Hannuri/Desktop/RoyalCyber/my-first-app/node_modules/aframe/src/components/vive-controls.js"],"names":["registerComponent","require","bind","trackedControlsUtils","checkControllerPresentAndSetup","emitIfAxesChanged","onButtonEvent","VIVE_CONTROLLER_MODEL_OBJ_URL","VIVE_CONTROLLER_MODEL_OBJ_MTL","isWebXRAvailable","device","GAMEPAD_ID_WEBXR","GAMEPAD_ID_WEBVR","GAMEPAD_ID_PREFIX","INPUT_MAPPING_WEBVR","axes","trackpad","buttons","INPUT_MAPPING_WEBXR","thumbstick","INPUT_MAPPING","module","exports","Component","schema","hand","default","buttonColor","type","buttonHighlightColor","model","orientationOffset","mapping","init","self","controllerPresent","lastControllerCheck","onButtonChanged","onButtonDown","evt","detail","id","onButtonUp","onButtonTouchEnd","onButtonTouchStart","previousButtonValues","rendererSystem","el","sceneEl","systems","renderer","bindMethods","update","data","controllerIndex","play","checkIfControllerPresent","addControllersUpdateListener","pause","removeEventListeners","removeControllersUpdateListener","onModelLoaded","onControllersUpdate","onAxisMoved","addEventListeners","addEventListener","controllerEventsActive","removeEventListener","index","injectTrackedControls","setAttribute","idPrefix","controller","obj","mtl","button","buttonMeshes","analogValue","state","value","trigger","rotation","x","Math","PI","emit","controllerObject3D","grip","left","getObjectByName","right","menu","system","Object","keys","forEach","buttonName","setButtonColor","position","set","updateModel","evtName","color","isTouch","indexOf","material","applyColorCorrection"],"mappings":"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","sourcesContent":["var registerComponent = require('../core/component').registerComponent;\nvar bind = require('../utils/bind');\n\nvar trackedControlsUtils = require('../utils/tracked-controls');\nvar checkControllerPresentAndSetup = trackedControlsUtils.checkControllerPresentAndSetup;\nvar emitIfAxesChanged = trackedControlsUtils.emitIfAxesChanged;\nvar onButtonEvent = trackedControlsUtils.onButtonEvent;\n\nvar VIVE_CONTROLLER_MODEL_OBJ_URL = 'https://cdn.aframe.io/controllers/vive/vr_controller_vive.obj';\nvar VIVE_CONTROLLER_MODEL_OBJ_MTL = 'https://cdn.aframe.io/controllers/vive/vr_controller_vive.mtl';\n\nvar isWebXRAvailable = require('../utils/').device.isWebXRAvailable;\n\nvar GAMEPAD_ID_WEBXR = 'htc-vive-controller-mv';\nvar GAMEPAD_ID_WEBVR = 'OpenVR ';\n\n// Prefix for Gen1 and Gen2 Oculus Touch Controllers.\nvar GAMEPAD_ID_PREFIX = isWebXRAvailable ? GAMEPAD_ID_WEBXR : GAMEPAD_ID_WEBVR;\n\n/**\n * Button IDs:\n * 0 - trackpad\n * 1 - trigger (intensity value from 0.5 to 1)\n * 2 - grip\n * 3 - menu (dispatch but better for menu options)\n * 4 - system (never dispatched on this layer)\n */\nvar INPUT_MAPPING_WEBVR = {\n  axes: {trackpad: [0, 1]},\n  buttons: ['trackpad', 'trigger', 'grip', 'menu', 'system']\n};\n\n/**\n * Button IDs:\n * 0 - trigger\n * 1 - squeeze\n * 2 - touchpad\n * 3 - none (dispatch but better for menu options)\n * 4 - menu (never dispatched on this layer)\n *\n * Axis:\n * 0 - touchpad x axis\n * 1 - touchpad y axis\n * Reference: https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/htc/htc-vive.json\n */\nvar INPUT_MAPPING_WEBXR = {\n  axes: {thumbstick: [0, 1]},\n  buttons: ['trigger', 'grip', 'trackpad', 'none', 'menu']\n};\n\nvar INPUT_MAPPING = isWebXRAvailable ? INPUT_MAPPING_WEBXR : INPUT_MAPPING_WEBVR;\n\n/**\n * Vive controls.\n * Interface with Vive controllers and map Gamepad events to controller buttons:\n * trackpad, trigger, grip, menu, system\n * Load a controller model and highlight the pressed buttons.\n */\nmodule.exports.Component = registerComponent('vive-controls', {\n  schema: {\n    hand: {default: 'left'},\n    buttonColor: {type: 'color', default: '#FAFAFA'},  // Off-white.\n    buttonHighlightColor: {type: 'color', default: '#22D1EE'},  // Light blue.\n    model: {default: true},\n    orientationOffset: {type: 'vec3'}\n  },\n\n  mapping: INPUT_MAPPING,\n\n  init: function () {\n    var self = this;\n    this.controllerPresent = false;\n    this.lastControllerCheck = 0;\n    this.onButtonChanged = bind(this.onButtonChanged, this);\n    this.onButtonDown = function (evt) { onButtonEvent(evt.detail.id, 'down', self); };\n    this.onButtonUp = function (evt) { onButtonEvent(evt.detail.id, 'up', self); };\n    this.onButtonTouchEnd = function (evt) { onButtonEvent(evt.detail.id, 'touchend', self); };\n    this.onButtonTouchStart = function (evt) { onButtonEvent(evt.detail.id, 'touchstart', self); };\n    this.previousButtonValues = {};\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\n\n    this.bindMethods();\n  },\n\n  update: function () {\n    var data = this.data;\n    this.controllerIndex = data.hand === 'right' ? 0 : data.hand === 'left' ? 1 : 2;\n  },\n\n  play: function () {\n    this.checkIfControllerPresent();\n    this.addControllersUpdateListener();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n    this.removeControllersUpdateListener();\n  },\n\n  bindMethods: function () {\n    this.onModelLoaded = bind(this.onModelLoaded, this);\n    this.onControllersUpdate = bind(this.onControllersUpdate, this);\n    this.checkIfControllerPresent = bind(this.checkIfControllerPresent, this);\n    this.removeControllersUpdateListener = bind(this.removeControllersUpdateListener, this);\n    this.onAxisMoved = bind(this.onAxisMoved, this);\n  },\n\n  addEventListeners: function () {\n    var el = this.el;\n    el.addEventListener('buttonchanged', this.onButtonChanged);\n    el.addEventListener('buttondown', this.onButtonDown);\n    el.addEventListener('buttonup', this.onButtonUp);\n    el.addEventListener('touchend', this.onButtonTouchEnd);\n    el.addEventListener('touchstart', this.onButtonTouchStart);\n    el.addEventListener('model-loaded', this.onModelLoaded);\n    el.addEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = true;\n  },\n\n  removeEventListeners: function () {\n    var el = this.el;\n    el.removeEventListener('buttonchanged', this.onButtonChanged);\n    el.removeEventListener('buttondown', this.onButtonDown);\n    el.removeEventListener('buttonup', this.onButtonUp);\n    el.removeEventListener('touchend', this.onButtonTouchEnd);\n    el.removeEventListener('touchstart', this.onButtonTouchStart);\n    el.removeEventListener('model-loaded', this.onModelLoaded);\n    el.removeEventListener('axismove', this.onAxisMoved);\n    this.controllerEventsActive = false;\n  },\n\n  /**\n   * Once OpenVR returns correct hand data in supporting browsers, we can use hand property.\n   * var isPresent = checkControllerPresentAndSetup(this.el.sceneEl, GAMEPAD_ID_PREFIX,\n                                                        { hand: data.hand });\n   * Until then, use hardcoded index.\n   */\n  checkIfControllerPresent: function () {\n    var data = this.data;\n    checkControllerPresentAndSetup(this, GAMEPAD_ID_PREFIX, {index: this.controllerIndex, hand: data.hand});\n  },\n\n  injectTrackedControls: function () {\n    var el = this.el;\n    var data = this.data;\n\n    // If we have an OpenVR Gamepad, use the fixed mapping.\n    el.setAttribute('tracked-controls', {\n      idPrefix: GAMEPAD_ID_PREFIX,\n      hand: data.hand,\n      controller: this.controllerIndex,\n      orientationOffset: data.orientationOffset\n    });\n\n    // Load model.\n    if (!this.data.model) { return; }\n    this.el.setAttribute('obj-model', {\n      obj: VIVE_CONTROLLER_MODEL_OBJ_URL,\n      mtl: VIVE_CONTROLLER_MODEL_OBJ_MTL\n    });\n  },\n\n  addControllersUpdateListener: function () {\n    this.el.sceneEl.addEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  removeControllersUpdateListener: function () {\n    this.el.sceneEl.removeEventListener('controllersupdated', this.onControllersUpdate, false);\n  },\n\n  onControllersUpdate: function () {\n    this.checkIfControllerPresent();\n  },\n\n  /**\n   * Rotate the trigger button based on how hard the trigger is pressed.\n   */\n  onButtonChanged: function (evt) {\n    var button = this.mapping.buttons[evt.detail.id];\n    var buttonMeshes = this.buttonMeshes;\n    var analogValue;\n\n    if (!button) { return; }\n\n    if (button === 'trigger') {\n      analogValue = evt.detail.state.value;\n      // Update trigger rotation depending on button value.\n      if (buttonMeshes && buttonMeshes.trigger) {\n        buttonMeshes.trigger.rotation.x = -analogValue * (Math.PI / 12);\n      }\n    }\n\n    // Pass along changed event with button state, using button mapping for convenience.\n    this.el.emit(button + 'changed', evt.detail.state);\n  },\n\n  onModelLoaded: function (evt) {\n    var buttonMeshes;\n    var controllerObject3D = evt.detail.model;\n    var self = this;\n\n    if (!this.data.model) { return; }\n\n    // Store button meshes object to be able to change their colors.\n    buttonMeshes = this.buttonMeshes = {};\n    buttonMeshes.grip = {\n      left: controllerObject3D.getObjectByName('leftgrip'),\n      right: controllerObject3D.getObjectByName('rightgrip')\n    };\n    buttonMeshes.menu = controllerObject3D.getObjectByName('menubutton');\n    buttonMeshes.system = controllerObject3D.getObjectByName('systembutton');\n    buttonMeshes.trackpad = controllerObject3D.getObjectByName('touchpad');\n    buttonMeshes.trigger = controllerObject3D.getObjectByName('trigger');\n\n    // Set default colors.\n    Object.keys(buttonMeshes).forEach(function (buttonName) {\n      self.setButtonColor(buttonName, self.data.buttonColor);\n    });\n\n    // Offset pivot point.\n    controllerObject3D.position.set(0, -0.015, 0.04);\n  },\n\n  onAxisMoved: function (evt) {\n    emitIfAxesChanged(this, this.mapping.axes, evt);\n  },\n\n  updateModel: function (buttonName, evtName) {\n    var color;\n    var isTouch;\n    if (!this.data.model) { return; }\n\n    isTouch = evtName.indexOf('touch') !== -1;\n    // Don't change color for trackpad touch.\n    if (isTouch) { return; }\n\n    // Update colors.\n    color = evtName === 'up' ? this.data.buttonColor : this.data.buttonHighlightColor;\n    this.setButtonColor(buttonName, color);\n  },\n\n  setButtonColor: function (buttonName, color) {\n    var buttonMeshes = this.buttonMeshes;\n    var rendererSystem = this.rendererSystem;\n\n    if (!buttonMeshes) { return; }\n\n    // Need to do both left and right sides for grip.\n    if (buttonName === 'grip') {\n      buttonMeshes.grip.left.material.color.set(color);\n      buttonMeshes.grip.right.material.color.set(color);\n      rendererSystem.applyColorCorrection(buttonMeshes.grip.left.material.color);\n      rendererSystem.applyColorCorrection(buttonMeshes.grip.right.material.color);\n      return;\n    }\n    buttonMeshes[buttonName].material.color.set(color);\n    rendererSystem.applyColorCorrection(buttonMeshes[buttonName].material.color);\n  }\n});\n"]},"metadata":{},"sourceType":"script"}