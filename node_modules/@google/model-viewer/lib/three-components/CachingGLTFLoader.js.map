{"version":3,"file":"CachingGLTFLoader.js","sourceRoot":"","sources":["../../src/three-components/CachingGLTFLoader.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DRACOLoader} from 'three/examples/jsm/loaders/DRACOLoader.js';\nimport {GLTF, GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nimport {CacheEvictionPolicy} from '../utilities/cache-eviction-policy.js';\n\nimport {GLTFInstance, GLTFInstanceConstructor} from './GLTFInstance.js';\n\nexport type ProgressCallback = (progress: number) => void;\n\n/**\n * A helper to Promise-ify a Three.js GLTFLoader\n */\nexport const loadWithLoader =\n    (url: string,\n     loader: GLTFLoader,\n     progressCallback: ProgressCallback = () => {}) => {\n      const onProgress = (event: ProgressEvent) => {\n        progressCallback!(event.loaded / event.total);\n      };\n      return new Promise<GLTF>((resolve, reject) => {\n        loader.load(url, resolve, onProgress, reject);\n      });\n    };\n\nconst cache = new Map<string, Promise<GLTFInstance>>();\nconst preloaded = new Map<string, boolean>();\n\nlet dracoDecoderLocation: string;\nconst dracoLoader = new DRACOLoader();\n\nexport const $loader = Symbol('loader');\nexport const $evictionPolicy = Symbol('evictionPolicy');\nconst $GLTFInstance = Symbol('GLTFInstance');\n\nexport class CachingGLTFLoader<T extends GLTFInstanceConstructor =\n                                             GLTFInstanceConstructor> {\n  static setDRACODecoderLocation(url: string) {\n    dracoDecoderLocation = url;\n    dracoLoader.setDecoderPath(url);\n  }\n\n  static getDRACODecoderLocation() {\n    return dracoDecoderLocation;\n  }\n\n  static[$evictionPolicy]: CacheEvictionPolicy =\n      new CacheEvictionPolicy(CachingGLTFLoader);\n\n  static get cache() {\n    return cache;\n  }\n\n  /** @nocollapse */\n  static clearCache() {\n    cache.forEach((_value, url) => {\n      this.delete(url);\n    });\n    this[$evictionPolicy].reset();\n  }\n\n  static has(url: string) {\n    return cache.has(url);\n  }\n\n  /** @nocollapse */\n  static async delete(url: string) {\n    if (!this.has(url)) {\n      return;\n    }\n\n    const gltfLoads = cache.get(url);\n    preloaded.delete(url);\n    cache.delete(url);\n\n    const gltf = await gltfLoads;\n    // Dispose of the cached glTF's materials and geometries:\n\n    gltf!.dispose();\n  }\n\n  /**\n   * Returns true if the model that corresponds to the specified url is\n   * available in our local cache.\n   */\n  static hasFinishedLoading(url: string) {\n    return !!preloaded.get(url);\n  }\n\n  constructor(GLTFInstance: T) {\n    this[$GLTFInstance] = GLTFInstance;\n    this[$loader].setDRACOLoader(dracoLoader);\n  }\n\n  protected[$loader]: GLTFLoader = new GLTFLoader();\n  protected[$GLTFInstance]: T;\n\n  protected get[$evictionPolicy](): CacheEvictionPolicy {\n    return (this.constructor as typeof CachingGLTFLoader)[$evictionPolicy];\n  }\n\n  /**\n   * Preloads a glTF, populating the cache. Returns a promise that resolves\n   * when the cache is populated.\n   */\n  async preload(url: string, progressCallback: ProgressCallback = () => {}) {\n    if (!cache.has(url)) {\n      const rawGLTFLoads =\n          loadWithLoader(url, this[$loader], (progress: number) => {\n            progressCallback(progress * 0.8);\n          });\n\n      const gltfInstanceLoads = rawGLTFLoads.then((rawGLTF: GLTF) => {\n        const GLTFInstance = this[$GLTFInstance];\n        const preparedGLTF = GLTFInstance.prepare(rawGLTF);\n\n        progressCallback(0.9);\n\n        return new GLTFInstance(preparedGLTF);\n      });\n\n      cache.set(url, gltfInstanceLoads);\n    }\n\n    await cache.get(url);\n\n    if (progressCallback) {\n      progressCallback(1.0);\n    }\n\n    preloaded.set(url, true);\n  }\n\n  /**\n   * Loads a glTF from the specified url and resolves a unique clone of the\n   * glTF. If the glTF has already been loaded, makes a clone of the cached\n   * copy.\n   */\n  async load(url: string, progressCallback: ProgressCallback = () => {}):\n      Promise<InstanceType<T>> {\n    await this.preload(url, progressCallback);\n\n    const gltf = await cache.get(url)!;\n    const clone = gltf.clone() as InstanceType<T>;\n\n    this[$evictionPolicy].retain(url);\n\n    // Patch dispose so that we can properly account for instance use\n    // in the caching layer:\n    clone.dispose = (() => {\n      const originalDispose = clone.dispose;\n      let disposed = false;\n\n      return () => {\n        if (disposed) {\n          return;\n        }\n\n        disposed = true;\n        originalDispose.apply(clone);\n        this[$evictionPolicy].release(url);\n      };\n    })();\n\n    return clone;\n  }\n}\n"]}