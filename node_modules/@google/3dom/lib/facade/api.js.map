{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/facade/api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RGBA} from '../api.js';\nimport {SerializedMaterial, SerializedModel, SerializedPBRMetallicRoughness, SerializedThreeDOMElement} from '../protocol.js';\n\nexport interface ThreeDOMElement {\n  readonly ownerModel: Model;\n  readonly internalID: number;\n  readonly name: string|null;\n  toJSON(): SerializedThreeDOMElement;\n}\n\n/**\n * A facade that wraps an underlying renderer's notion of PBR material\n * properties\n *\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#pbrmetallicroughness\n */\nexport interface PBRMetallicRoughness extends ThreeDOMElement {\n  baseColorFactor: RGBA;\n  toJSON(): SerializedPBRMetallicRoughness;\n}\n\n/**\n * A facade that wraps an underlying renderer's notion of a material\n *\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#material\n */\nexport interface Material extends ThreeDOMElement {\n  readonly pbrMetallicRoughness: PBRMetallicRoughness;\n  toJSON(): SerializedMaterial;\n}\n\n/**\n * A facade that wraps an underlying renderer's notion of a glTF model\n *\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#gltf\n */\nexport interface Model extends ThreeDOMElement {\n  readonly materials: Array<Material>;\n  toJSON(): SerializedModel;\n}\n\n/**\n * The API that must be implemented in order for an underlying rendere to be\n * manipulated by a ThreeDOMExecutionContext\n *\n * @see ../context.ts\n */\nexport interface ModelGraft extends EventTarget {\n  /**\n   * A flat list of all unique materials found in this scene graph.\n   *\n   * TODO(#1003): How do we handle non-active scenes?\n   * TODO(#1002): Desctibe and enforce traversal order\n   */\n  readonly model: Model;\n\n  /**\n   * Mutates a ThreeDOMElement. An element is mutated by:\n   *\n   *  1. Looking up the element by the given ID\n   *  2. Assigning value to the given property key\n   */\n  mutate(id: number, property: string, value: unknown): Promise<void>;\n}\n"]}