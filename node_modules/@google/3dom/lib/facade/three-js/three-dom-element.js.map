{"version":3,"file":"three-dom-element.js","sourceRoot":"","sources":["../../../src/facade/three-js/three-dom-element.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;AAMH,OAAO,EAAC,kBAAkB,EAAC,MAAM,oBAAoB,CAAC;AAKtD,MAAM,CAAC,MAAM,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AACtD,MAAM,CAAC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAEpC,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;AAC/B,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAEzB;;;;;GAKG;AACH,MAAM,OAAO,eAAe;IAM1B,YAAY,KAAiB,EAAE,aAAqC;QAF7D,QAAK,GAAW,kBAAkB,EAAE,CAAC;QAG1C,IAAI,CAAC,cAAc,CAAC,GAAG,aAAa,CAAC;QACrC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QAErB,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC;IAED;;;;;OAKG;IACH,IAAI,IAAI;QACN,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;QAE3C,4EAA4E;QAC5E,qEAAqE;QACrE,4BAA4B;QAC5B,IAAK,aAA0B,CAAC,UAAU,EAAE;YAC1C,qEAAqE;YACrE,UAAU;YACV,iIAAiI;YACjI,OAAQ,aAA0B,CAAC,IAAI,CAAC;SACzC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM;QACJ,MAAM,UAAU,GAA8B,EAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,EAAC,CAAC;QAC9D,MAAM,EAAC,IAAI,EAAC,GAAG,IAAI,CAAC;QACpB,IAAI,IAAI,IAAI,IAAI,EAAE;YAChB,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;SACxB;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;CACF;KA9DS,GAAG","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Material, Object3D} from 'three';\nimport {GLTF} from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nimport {SerializedThreeDOMElement} from '../../protocol.js';\nimport {getLocallyUniqueId} from '../../utilities.js';\nimport {ThreeDOMElement as ThreeDOMElementInterface} from '../api.js';\n\nimport {ModelGraft} from './model-graft.js';\n\nexport const $relatedObject = Symbol('relatedObject');\nexport const $type = Symbol('type');\n\nconst $graft = Symbol('graft');\nconst $id = Symbol('id');\n\n/**\n * A SerializableThreeDOMElement is the common primitive of all scene graph\n * elements that have been facaded in the host execution context. It adds\n * a common interface to these elements in support of convenient\n * serializability.\n */\nexport class ThreeDOMElement implements ThreeDOMElementInterface {\n  private[$graft]: ModelGraft;\n  private[$relatedObject]: Object3D|Material|GLTF;\n\n  private[$id]: number = getLocallyUniqueId();\n\n  constructor(graft: ModelGraft, relatedObject: Object3D|Material|GLTF) {\n    this[$relatedObject] = relatedObject;\n    this[$graft] = graft;\n\n    graft.adopt(this);\n  }\n\n  /**\n   * The Model of provenance for this scene graph element.\n   */\n  get ownerModel() {\n    return this[$graft].model;\n  }\n\n  /**\n   * The unique ID that marks this element. In generally, an ID should only be\n   * considered unique to the element in the context of its scene graph. These\n   * IDs are not guaranteed to be stable across script executions.\n   */\n  get internalID() {\n    return this[$id];\n  }\n\n  /**\n   * Some (but not all) scene graph elements may have an optional name. The\n   * Object3D.prototype.name property is sometimes auto-generated by Three.js.\n   * We only want to expose a name that is set in the source glTF, so Three.js\n   * generated names are ignored.\n   */\n  get name() {\n    const relatedObject = this[$relatedObject];\n\n    // NOTE: Some Three.js object names are modified from the names found in the\n    // glTF. Special casing is handled here, but might be better moved to\n    // subclasses down the road:\n    if ((relatedObject as Material).isMaterial) {\n      // Material names can be safely referenced directly from the Three.js\n      // object.\n      // @see: https://github.com/mrdoob/three.js/blob/790811db742ea9d7c54fe28f83865d7576f14134/examples/js/loaders/GLTFLoader.js#L2162\n      return (relatedObject as Material).name;\n    }\n\n    return null;\n  }\n\n  /**\n   * The backing Three.js scene graph construct for this element.\n   */\n  get relatedObject() {\n    return this[$relatedObject];\n  }\n\n  toJSON(): SerializedThreeDOMElement {\n    const serialized: SerializedThreeDOMElement = {id: this[$id]};\n    const {name} = this;\n    if (name != null) {\n      serialized.name = name;\n    }\n    return serialized;\n  }\n}\n"]}